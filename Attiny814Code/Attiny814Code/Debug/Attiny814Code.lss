
Attiny814Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00803e00  00001baa  00001c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000006  00009ba4  00001ba4  00001c58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000060  00803e52  00803e52  00001cb0  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00001d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005c8e  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002582  00000000  00000000  00007ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001933  00000000  00000000  0000a228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000054c  00000000  00000000  0000bb5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002bf0  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f4c  00000000  00000000  0000ec98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000220  00000000  00000000  0000fbe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	4e c0       	rjmp	.+156    	; 0xbe <__vector_16>
      22:	d1 c3       	rjmp	.+1954   	; 0x7c6 <__vector_17>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	ea ea       	ldi	r30, 0xAA	; 170
      48:	fb e1       	ldi	r31, 0x1B	; 27
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a2 35       	cpi	r26, 0x52	; 82
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a2 e5       	ldi	r26, 0x52	; 82
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a2 3b       	cpi	r26, 0xB2	; 178
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	2b d1       	rcall	.+598    	; 0x2be <main>
      68:	9b cd       	rjmp	.-1226   	; 0xfffffba0 <__eeprom_end+0xff7efba0>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	0e d4       	rcall	.+2076   	; 0x88a <system_init>

	touch_init();
      6e:	ed c2       	rjmp	.+1498   	; 0x64a <touch_init>

00000070 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	2f 93       	push	r18
      7c:	3f 93       	push	r19
      7e:	4f 93       	push	r20
      80:	5f 93       	push	r21
      82:	6f 93       	push	r22
      84:	7f 93       	push	r23
      86:	8f 93       	push	r24
      88:	9f 93       	push	r25
      8a:	af 93       	push	r26
      8c:	bf 93       	push	r27
      8e:	ef 93       	push	r30
      90:	ff 93       	push	r31
	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      92:	4d d3       	rcall	.+1690   	; 0x72e <touch_timer_handler>
	RTC_CallBack();
      94:	86 d0       	rcall	.+268    	; 0x1a2 <RTC_CallBack>
	/* PIT interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      96:	81 e0       	ldi	r24, 0x01	; 1
      98:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
      9c:	ff 91       	pop	r31
      9e:	ef 91       	pop	r30
      a0:	bf 91       	pop	r27
      a2:	af 91       	pop	r26
      a4:	9f 91       	pop	r25
      a6:	8f 91       	pop	r24
      a8:	7f 91       	pop	r23
      aa:	6f 91       	pop	r22
      ac:	5f 91       	pop	r21
      ae:	4f 91       	pop	r20
      b0:	3f 91       	pop	r19
      b2:	2f 91       	pop	r18
      b4:	0f 90       	pop	r0
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	0f 90       	pop	r0
      ba:	1f 90       	pop	r1
      bc:	18 95       	reti

000000be <__vector_16>:

ISR(AC0_AC_vect)
{
      be:	1f 92       	push	r1
      c0:	0f 92       	push	r0
      c2:	0f b6       	in	r0, 0x3f	; 63
      c4:	0f 92       	push	r0
      c6:	11 24       	eor	r1, r1
      c8:	2f 93       	push	r18
      ca:	3f 93       	push	r19
      cc:	4f 93       	push	r20
      ce:	5f 93       	push	r21
      d0:	6f 93       	push	r22
      d2:	7f 93       	push	r23
      d4:	8f 93       	push	r24
      d6:	9f 93       	push	r25
      d8:	af 93       	push	r26
      da:	bf 93       	push	r27
      dc:	ef 93       	push	r30
      de:	ff 93       	push	r31
	/* Insert your AC interrupt handling code here */
	/* The interrupt flag has to be cleared manually */
	AC0.STATUS = AC_CMP_bm;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <__TEXT_REGION_LENGTH__+0x700677>
	LowBattery();
      e6:	4f d0       	rcall	.+158    	; 0x186 <LowBattery>
}
      e8:	ff 91       	pop	r31
      ea:	ef 91       	pop	r30
      ec:	bf 91       	pop	r27
      ee:	af 91       	pop	r26
      f0:	9f 91       	pop	r25
      f2:	8f 91       	pop	r24
      f4:	7f 91       	pop	r23
      f6:	6f 91       	pop	r22
      f8:	5f 91       	pop	r21
      fa:	4f 91       	pop	r20
      fc:	3f 91       	pop	r19
      fe:	2f 91       	pop	r18
     100:	0f 90       	pop	r0
     102:	0f be       	out	0x3f, r0	; 63
     104:	0f 90       	pop	r0
     106:	1f 90       	pop	r1
     108:	18 95       	reti

0000010a <TOUCH_SetMeasureBusyFlag>:

volatile uint8_t measureBusyFlag = 0;

void TOUCH_SetMeasureBusyFlag(void)
{
	measureBusyFlag = 1;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	80 93 53 3e 	sts	0x3E53, r24	; 0x803e53 <measureBusyFlag>
     110:	08 95       	ret

00000112 <Radiotube_Handle>:
}

void Radiotube_Handle(void)
{
	if (RadiotubeState == OFF)
     112:	80 91 7a 3e 	lds	r24, 0x3E7A	; 0x803e7a <RadiotubeState>
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	71 f4       	brne	.+28     	; 0x136 <Radiotube_Handle+0x24>
	{
		RadiotubeState = ON;
     11a:	10 92 7a 3e 	sts	0x3E7A, r1	; 0x803e7a <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     11e:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     120:	2f e5       	ldi	r18, 0x5F	; 95
     122:	3a ee       	ldi	r19, 0xEA	; 234
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	21 50       	subi	r18, 0x01	; 1
     128:	30 40       	sbci	r19, 0x00	; 0
     12a:	90 40       	sbci	r25, 0x00	; 0
     12c:	e1 f7       	brne	.-8      	; 0x126 <Radiotube_Handle+0x14>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <Radiotube_Handle+0x1e>
     130:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     132:	28 98       	cbi	0x05, 0	; 5
     134:	0e c0       	rjmp	.+28     	; 0x152 <Radiotube_Handle+0x40>
		measeurePeriod = 32;
		edgeDetectFreeze = 1;
	}
	else
	{
		RadiotubeState = OFF;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	80 93 7a 3e 	sts	0x3E7A, r24	; 0x803e7a <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     13c:	29 9a       	sbi	0x05, 1	; 5
     13e:	ff e5       	ldi	r31, 0x5F	; 95
     140:	2a ee       	ldi	r18, 0xEA	; 234
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	f1 50       	subi	r31, 0x01	; 1
     146:	20 40       	sbci	r18, 0x00	; 0
     148:	30 40       	sbci	r19, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <Radiotube_Handle+0x32>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <Radiotube_Handle+0x3c>
     14e:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     150:	29 98       	cbi	0x05, 1	; 5
     152:	e7 ea       	ldi	r30, 0xA7	; 167
     154:	f1 e6       	ldi	r31, 0x61	; 97
     156:	31 97       	sbiw	r30, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <Radiotube_Handle+0x44>
     15a:	00 c0       	rjmp	.+0      	; 0x15c <Radiotube_Handle+0x4a>
     15c:	00 00       	nop
		IO2_set_level(true);
		_delay_ms(30);
		IO2_set_level(false);
		_delay_ms(10);
		measeurePeriod = 32;
     15e:	90 e2       	ldi	r25, 0x20	; 32
     160:	90 93 00 3e 	sts	0x3E00, r25	; 0x803e00 <__data_start>
		edgeDetectFreeze = 1;
     164:	80 93 5e 3e 	sts	0x3E5E, r24	; 0x803e5e <edgeDetectFreeze>
     168:	08 95       	ret

0000016a <MCU_GoToSleep>:
}

void MCU_GoToSleep(int mode)
{
	// Set sleep mode to Power Down mode
	set_sleep_mode(mode);
     16a:	e0 e5       	ldi	r30, 0x50	; 80
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	90 81       	ld	r25, Z
     170:	99 7f       	andi	r25, 0xF9	; 249
     172:	89 2b       	or	r24, r25
     174:	80 83       	st	Z, r24
	sleep_enable();
     176:	80 81       	ld	r24, Z
     178:	81 60       	ori	r24, 0x01	; 1
     17a:	80 83       	st	Z, r24
	sleep_cpu();
     17c:	88 95       	sleep
	sleep_disable();
     17e:	80 81       	ld	r24, Z
     180:	8e 7f       	andi	r24, 0xFE	; 254
     182:	80 83       	st	Z, r24
     184:	08 95       	ret

00000186 <LowBattery>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     186:	28 9a       	sbi	0x05, 0	; 5
     188:	2f e5       	ldi	r18, 0x5F	; 95
     18a:	8a ee       	ldi	r24, 0xEA	; 234
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	21 50       	subi	r18, 0x01	; 1
     190:	80 40       	sbci	r24, 0x00	; 0
     192:	90 40       	sbci	r25, 0x00	; 0
     194:	e1 f7       	brne	.-8      	; 0x18e <LowBattery+0x8>
     196:	00 c0       	rjmp	.+0      	; 0x198 <LowBattery+0x12>
     198:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     19a:	28 98       	cbi	0x05, 0	; 5
void LowBattery(void)
{
	IO1_set_level(true);
	_delay_ms(30);
	IO1_set_level(false);
	MCU_GoToSleep(SLEEP_MODE_PWR_DOWN);
     19c:	84 e0       	ldi	r24, 0x04	; 4
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	e4 cf       	rjmp	.-56     	; 0x16a <MCU_GoToSleep>

000001a2 <RTC_CallBack>:


void RTC_CallBack(void)
{
	/* count the time when the  finger on */
	if (SensorState == FINGER_OFF_DETECT)
     1a2:	80 91 7b 3e 	lds	r24, 0x3E7B	; 0x803e7b <SensorState>
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	49 f4       	brne	.+18     	; 0x1bc <RTC_CallBack+0x1a>
		fingerOnCnt++;
     1aa:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <fingerOnCnt>
     1ae:	90 91 64 3e 	lds	r25, 0x3E64	; 0x803e64 <fingerOnCnt+0x1>
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	80 93 63 3e 	sts	0x3E63, r24	; 0x803e63 <fingerOnCnt>
     1b8:	90 93 64 3e 	sts	0x3E64, r25	; 0x803e64 <fingerOnCnt+0x1>
	
	/* freeze the edge detection for 500 ms after open the radiotube */
	if(edgeDetectFreeze == 1)
     1bc:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <edgeDetectFreeze>
     1c0:	81 30       	cpi	r24, 0x01	; 1
     1c2:	49 f4       	brne	.+18     	; 0x1d6 <RTC_CallBack+0x34>
		edgeFreezeCnt++;
     1c4:	80 91 5c 3e 	lds	r24, 0x3E5C	; 0x803e5c <edgeFreezeCnt>
     1c8:	90 91 5d 3e 	lds	r25, 0x3E5D	; 0x803e5d <edgeFreezeCnt+0x1>
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <edgeFreezeCnt>
     1d2:	90 93 5d 3e 	sts	0x3E5D, r25	; 0x803e5d <edgeFreezeCnt+0x1>

	if (edgeFreezeCnt > 500)
     1d6:	80 91 5c 3e 	lds	r24, 0x3E5C	; 0x803e5c <edgeFreezeCnt>
     1da:	90 91 5d 3e 	lds	r25, 0x3E5D	; 0x803e5d <edgeFreezeCnt+0x1>
     1de:	85 3f       	cpi	r24, 0xF5	; 245
     1e0:	91 40       	sbci	r25, 0x01	; 1
     1e2:	30 f0       	brcs	.+12     	; 0x1f0 <RTC_CallBack+0x4e>
	{
		edgeFreezeCnt = 0;
     1e4:	10 92 5c 3e 	sts	0x3E5C, r1	; 0x803e5c <edgeFreezeCnt>
     1e8:	10 92 5d 3e 	sts	0x3E5D, r1	; 0x803e5d <edgeFreezeCnt+0x1>
		edgeDetectFreeze = 0;
     1ec:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <edgeDetectFreeze>
	}
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
     1f0:	80 91 7a 3e 	lds	r24, 0x3E7A	; 0x803e7a <RadiotubeState>
     1f4:	81 11       	cpse	r24, r1
     1f6:	24 c0       	rjmp	.+72     	; 0x240 <RTC_CallBack+0x9e>
	{
		RadiotubeOnTime++;
     1f8:	80 91 5f 3e 	lds	r24, 0x3E5F	; 0x803e5f <RadiotubeOnTime>
     1fc:	90 91 60 3e 	lds	r25, 0x3E60	; 0x803e60 <RadiotubeOnTime+0x1>
     200:	a0 91 61 3e 	lds	r26, 0x3E61	; 0x803e61 <RadiotubeOnTime+0x2>
     204:	b0 91 62 3e 	lds	r27, 0x3E62	; 0x803e62 <RadiotubeOnTime+0x3>
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	a1 1d       	adc	r26, r1
     20c:	b1 1d       	adc	r27, r1
		if(RadiotubeOnTime > 180000)
     20e:	81 32       	cpi	r24, 0x21	; 33
     210:	2f eb       	ldi	r18, 0xBF	; 191
     212:	92 07       	cpc	r25, r18
     214:	22 e0       	ldi	r18, 0x02	; 2
     216:	a2 07       	cpc	r26, r18
     218:	b1 05       	cpc	r27, r1
     21a:	48 f4       	brcc	.+18     	; 0x22e <RTC_CallBack+0x8c>
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
	{
		RadiotubeOnTime++;
     21c:	80 93 5f 3e 	sts	0x3E5F, r24	; 0x803e5f <RadiotubeOnTime>
     220:	90 93 60 3e 	sts	0x3E60, r25	; 0x803e60 <RadiotubeOnTime+0x1>
     224:	a0 93 61 3e 	sts	0x3E61, r26	; 0x803e61 <RadiotubeOnTime+0x2>
     228:	b0 93 62 3e 	sts	0x3E62, r27	; 0x803e62 <RadiotubeOnTime+0x3>
     22c:	08 95       	ret
		if(RadiotubeOnTime > 180000)
		{
			RadiotubeOnTime = 0;
     22e:	10 92 5f 3e 	sts	0x3E5F, r1	; 0x803e5f <RadiotubeOnTime>
     232:	10 92 60 3e 	sts	0x3E60, r1	; 0x803e60 <RadiotubeOnTime+0x1>
     236:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <RadiotubeOnTime+0x2>
     23a:	10 92 62 3e 	sts	0x3E62, r1	; 0x803e62 <RadiotubeOnTime+0x3>
			Radiotube_Handle();
     23e:	69 cf       	rjmp	.-302    	; 0x112 <Radiotube_Handle>
     240:	08 95       	ret

00000242 <TOUCH_DeltaSmoothing>:

int16_t TOUCH_DeltaSmoothing(int16_t curDelta)
{
	int16_t tempDelta;
	
	tempDelta = curDelta - preDebugFilteredDeltaValue;
     242:	40 91 56 3e 	lds	r20, 0x3E56	; 0x803e56 <preDebugFilteredDeltaValue>
     246:	50 91 57 3e 	lds	r21, 0x3E57	; 0x803e57 <preDebugFilteredDeltaValue+0x1>
     24a:	9c 01       	movw	r18, r24
     24c:	24 1b       	sub	r18, r20
     24e:	35 0b       	sbc	r19, r21
	
	if (abs(tempDelta) >= STRONG_EDGE_THRESHOLD)
     250:	b9 01       	movw	r22, r18
     252:	37 ff       	sbrs	r19, 7
     254:	04 c0       	rjmp	.+8      	; 0x25e <TOUCH_DeltaSmoothing+0x1c>
     256:	66 27       	eor	r22, r22
     258:	77 27       	eor	r23, r23
     25a:	62 1b       	sub	r22, r18
     25c:	73 0b       	sbc	r23, r19
     25e:	66 34       	cpi	r22, 0x46	; 70
     260:	71 05       	cpc	r23, r1
     262:	4c f4       	brge	.+18     	; 0x276 <TOUCH_DeltaSmoothing+0x34>
	{
		/* this is an strong edge */
		debugFilteredDeltaValue = curDelta;
	}
	else if (abs(tempDelta) >= WEAK_EDGE_THRESHOLD)
     264:	64 31       	cpi	r22, 0x14	; 20
     266:	71 05       	cpc	r23, r1
     268:	5c f0       	brlt	.+22     	; 0x280 <TOUCH_DeltaSmoothing+0x3e>
	{
		/* this is an weak edge */
		debugFilteredDeltaValue = (preDebugFilteredDeltaValue * 5 + curDelta * 5)/10;
     26a:	84 0f       	add	r24, r20
     26c:	95 1f       	adc	r25, r21
     26e:	97 fd       	sbrc	r25, 7
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	95 95       	asr	r25
     274:	87 95       	ror	r24
     276:	80 93 54 3e 	sts	0x3E54, r24	; 0x803e54 <debugFilteredDeltaValue>
     27a:	90 93 55 3e 	sts	0x3E55, r25	; 0x803e55 <debugFilteredDeltaValue+0x1>
     27e:	0f c0       	rjmp	.+30     	; 0x29e <TOUCH_DeltaSmoothing+0x5c>
	}
	else
	{
		/* this should be suppressed */
		debugFilteredDeltaValue = (preDebugFilteredDeltaValue * 9 + curDelta)/10;
     280:	e9 e0       	ldi	r30, 0x09	; 9
     282:	e4 9f       	mul	r30, r20
     284:	b0 01       	movw	r22, r0
     286:	e5 9f       	mul	r30, r21
     288:	70 0d       	add	r23, r0
     28a:	11 24       	eor	r1, r1
     28c:	86 0f       	add	r24, r22
     28e:	97 1f       	adc	r25, r23
     290:	6a e0       	ldi	r22, 0x0A	; 10
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	5e dc       	rcall	.-1860   	; 0xfffffb52 <__eeprom_end+0xff7efb52>
     296:	60 93 54 3e 	sts	0x3E54, r22	; 0x803e54 <debugFilteredDeltaValue>
     29a:	70 93 55 3e 	sts	0x3E55, r23	; 0x803e55 <debugFilteredDeltaValue+0x1>
	}
	
	preDebugFilteredDeltaValue = debugFilteredDeltaValue;
     29e:	80 91 54 3e 	lds	r24, 0x3E54	; 0x803e54 <debugFilteredDeltaValue>
     2a2:	90 91 55 3e 	lds	r25, 0x3E55	; 0x803e55 <debugFilteredDeltaValue+0x1>
     2a6:	80 93 56 3e 	sts	0x3E56, r24	; 0x803e56 <preDebugFilteredDeltaValue>
     2aa:	90 93 57 3e 	sts	0x3E57, r25	; 0x803e57 <preDebugFilteredDeltaValue+0x1>
	
	if (edgeDetectFreeze == 1)
     2ae:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <edgeDetectFreeze>
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	11 f4       	brne	.+4      	; 0x2ba <TOUCH_DeltaSmoothing+0x78>
		tempDelta = 0;
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
		
	return tempDelta;
}
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <main>:

int main(void)
{
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     2be:	d6 de       	rcall	.-596    	; 0x6c <atmel_start_init>
	//MCU_GoToSleep(SLEEP_MODE_PWR_DOWN);
	SensorState = FINGER_ON_DETECT;
     2c0:	10 92 7b 3e 	sts	0x3E7B, r1	; 0x803e7b <SensorState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     2c4:	29 9a       	sbi	0x05, 1	; 5
     2c6:	2f e5       	ldi	r18, 0x5F	; 95
     2c8:	8a ee       	ldi	r24, 0xEA	; 234
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	21 50       	subi	r18, 0x01	; 1
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	90 40       	sbci	r25, 0x00	; 0
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0xe>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x18>
     2d6:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2d8:	29 98       	cbi	0x05, 1	; 5
	/* the inital state of radiotube should be chosed */
	IO2_set_level(true);
	_delay_ms(30);
	IO2_set_level(false);
	
	RadiotubeState = OFF;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 7a 3e 	sts	0x3E7A, r24	; 0x803e7a <RadiotubeState>
		}
	}
	else
	{
		/* this should be suppressed */
		filteredDeltaValue = (preFilteredDeltaValue * 9 + curDelta)/10;
     2e0:	19 e0       	ldi	r17, 0x09	; 9
     2e2:	ca e0       	ldi	r28, 0x0A	; 10
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t keyStatus = 0;
	uint8_t edgeStatus = 0;
	
	
	///* Does acquisition and post-processing */
	touch_process();
     2e6:	f1 d1       	rcall	.+994    	; 0x6ca <touch_process>
	
	if (measurement_done_touch == 0)
     2e8:	80 91 67 3e 	lds	r24, 0x3E67	; 0x803e67 <measurement_done_touch>
     2ec:	88 23       	and	r24, r24
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <main+0x34>
     2f0:	db c0       	rjmp	.+438    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	int16_t curDelta;
	int16_t tempDelta;
	uint8_t edgeStatus = 0,i;
	int16_t edgeGroupSum = 0;
	
	curDelta = get_sensor_node_signal(0);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	31 d2       	rcall	.+1122   	; 0x75a <get_sensor_node_signal>
     2f8:	7c 01       	movw	r14, r24
	curDelta -= get_sensor_node_reference(0);
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	3a d2       	rcall	.+1140   	; 0x774 <get_sensor_node_reference>
     300:	a7 01       	movw	r20, r14
     302:	48 1b       	sub	r20, r24
     304:	59 0b       	sbc	r21, r25
	
	tempDelta = curDelta - preFilteredDeltaValue;
     306:	20 91 58 3e 	lds	r18, 0x3E58	; 0x803e58 <preFilteredDeltaValue>
     30a:	30 91 59 3e 	lds	r19, 0x3E59	; 0x803e59 <preFilteredDeltaValue+0x1>
     30e:	ba 01       	movw	r22, r20
     310:	62 1b       	sub	r22, r18
     312:	73 0b       	sbc	r23, r19
	
	if (abs(tempDelta) >= STRONG_EDGE_THRESHOLD)
     314:	cb 01       	movw	r24, r22
     316:	77 ff       	sbrs	r23, 7
     318:	04 c0       	rjmp	.+8      	; 0x322 <main+0x64>
     31a:	88 27       	eor	r24, r24
     31c:	99 27       	eor	r25, r25
     31e:	86 1b       	sub	r24, r22
     320:	97 0b       	sbc	r25, r23
     322:	86 34       	cpi	r24, 0x46	; 70
     324:	91 05       	cpc	r25, r1
     326:	8c f0       	brlt	.+34     	; 0x34a <main+0x8c>
	{
		/* this is an strong edge */
		if(tempDelta > 0)
     328:	16 16       	cp	r1, r22
     32a:	17 06       	cpc	r1, r23
     32c:	14 f0       	brlt	.+4      	; 0x332 <main+0x74>
			edgeStatus = 1;
		else 
			edgeStatus = 2;
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	01 c0       	rjmp	.+2      	; 0x334 <main+0x76>
	
	if (abs(tempDelta) >= STRONG_EDGE_THRESHOLD)
	{
		/* this is an strong edge */
		if(tempDelta > 0)
			edgeStatus = 1;
     332:	91 e0       	ldi	r25, 0x01	; 1
		else 
			edgeStatus = 2;
		
		filteredDeltaValue = curDelta;
     334:	40 93 5a 3e 	sts	0x3E5A, r20	; 0x803e5a <filteredDeltaValue>
     338:	50 93 5b 3e 	sts	0x3E5B, r21	; 0x803e5b <filteredDeltaValue+0x1>

static void TOUCH_ClearEdgeGroup(void)
{
	uint8_t i;
	
	edgeGroupPtr = 0;
     33c:	10 92 52 3e 	sts	0x3E52, r1	; 0x803e52 <__data_end>
	for (i = 0; i < 4; i++)
		edgeGroup[edgeGroupPtr] = 0;
     340:	10 92 72 3e 	sts	0x3E72, r1	; 0x803e72 <edgeGroup>
     344:	10 92 73 3e 	sts	0x3E73, r1	; 0x803e73 <edgeGroup+0x1>
     348:	69 c0       	rjmp	.+210    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     34a:	e0 91 52 3e 	lds	r30, 0x3E52	; 0x803e52 <__data_end>
			edgeStatus = 2;
		
		filteredDeltaValue = curDelta;
		TOUCH_ClearEdgeGroup();
	}
	else if (abs(tempDelta) >= WEAK_EDGE_THRESHOLD)
     34e:	44 97       	sbiw	r24, 0x14	; 20
     350:	0c f4       	brge	.+2      	; 0x354 <main+0x96>
     352:	45 c0       	rjmp	.+138    	; 0x3de <main+0x120>
	{
		/* this is an weak edge */
		
		filteredDeltaValue = (preFilteredDeltaValue * 5 + curDelta * 5)/10;
     354:	ca 01       	movw	r24, r20
     356:	82 0f       	add	r24, r18
     358:	93 1f       	adc	r25, r19
     35a:	97 fd       	sbrc	r25, 7
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	95 95       	asr	r25
     360:	87 95       	ror	r24
     362:	80 93 5a 3e 	sts	0x3E5A, r24	; 0x803e5a <filteredDeltaValue>
     366:	90 93 5b 3e 	sts	0x3E5B, r25	; 0x803e5b <filteredDeltaValue+0x1>
		
		/* if the sum of continuous four edges exceed the 
			strong threshold, an effective status should
			be return.*/
		edgeGroup[edgeGroupPtr++] = tempDelta;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	8e 0f       	add	r24, r30
     36e:	80 93 52 3e 	sts	0x3E52, r24	; 0x803e52 <__data_end>
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	ee 0f       	add	r30, r30
     376:	ff 1f       	adc	r31, r31
     378:	ee 58       	subi	r30, 0x8E	; 142
     37a:	f1 4c       	sbci	r31, 0xC1	; 193
     37c:	60 83       	st	Z, r22
     37e:	71 83       	std	Z+1, r23	; 0x01
		if (edgeGroupPtr >= 4)
     380:	84 30       	cpi	r24, 0x04	; 4
     382:	10 f0       	brcs	.+4      	; 0x388 <main+0xca>
			edgeGroupPtr = 0;
     384:	10 92 52 3e 	sts	0x3E52, r1	; 0x803e52 <__data_end>
		
		for (i = 0; i < 4; i++)
			edgeGroupSum += edgeGroup[i];
     388:	20 91 72 3e 	lds	r18, 0x3E72	; 0x803e72 <edgeGroup>
     38c:	30 91 73 3e 	lds	r19, 0x3E73	; 0x803e73 <edgeGroup+0x1>
     390:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <edgeGroup+0x2>
     394:	90 91 75 3e 	lds	r25, 0x3E75	; 0x803e75 <edgeGroup+0x3>
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	20 91 76 3e 	lds	r18, 0x3E76	; 0x803e76 <edgeGroup+0x4>
     3a0:	30 91 77 3e 	lds	r19, 0x3E77	; 0x803e77 <edgeGroup+0x5>
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	20 91 78 3e 	lds	r18, 0x3E78	; 0x803e78 <edgeGroup+0x6>
     3ac:	30 91 79 3e 	lds	r19, 0x3E79	; 0x803e79 <edgeGroup+0x7>
     3b0:	82 0f       	add	r24, r18
     3b2:	93 1f       	adc	r25, r19
			
		if (abs(edgeGroupSum) >= STRONG_EDGE_THRESHOLD)
     3b4:	9c 01       	movw	r18, r24
     3b6:	97 ff       	sbrs	r25, 7
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <main+0x104>
     3ba:	22 27       	eor	r18, r18
     3bc:	33 27       	eor	r19, r19
     3be:	28 1b       	sub	r18, r24
     3c0:	39 0b       	sbc	r19, r25
     3c2:	26 34       	cpi	r18, 0x46	; 70
     3c4:	31 05       	cpc	r19, r1
     3c6:	3c f1       	brlt	.+78     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

static void TOUCH_ClearEdgeGroup(void)
{
	uint8_t i;
	
	edgeGroupPtr = 0;
     3c8:	10 92 52 3e 	sts	0x3E52, r1	; 0x803e52 <__data_end>
	for (i = 0; i < 4; i++)
		edgeGroup[edgeGroupPtr] = 0;
     3cc:	10 92 72 3e 	sts	0x3E72, r1	; 0x803e72 <edgeGroup>
     3d0:	10 92 73 3e 	sts	0x3E73, r1	; 0x803e73 <edgeGroup+0x1>
			
		if (abs(edgeGroupSum) >= STRONG_EDGE_THRESHOLD)
		{
			TOUCH_ClearEdgeGroup();
			
			if (edgeGroupSum > 0)
     3d4:	18 16       	cp	r1, r24
     3d6:	19 06       	cpc	r1, r25
     3d8:	04 f1       	brlt	.+64     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
				edgeStatus = 1; 
			else
				edgeStatus = 2;
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	1f c0       	rjmp	.+62     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		}
	}
	else
	{
		/* this should be suppressed */
		filteredDeltaValue = (preFilteredDeltaValue * 9 + curDelta)/10;
     3de:	12 9f       	mul	r17, r18
     3e0:	c0 01       	movw	r24, r0
     3e2:	13 9f       	mul	r17, r19
     3e4:	90 0d       	add	r25, r0
     3e6:	11 24       	eor	r1, r1
     3e8:	84 0f       	add	r24, r20
     3ea:	95 1f       	adc	r25, r21
     3ec:	be 01       	movw	r22, r28
     3ee:	b1 db       	rcall	.-2206   	; 0xfffffb52 <__eeprom_end+0xff7efb52>
     3f0:	60 93 5a 3e 	sts	0x3E5A, r22	; 0x803e5a <filteredDeltaValue>
     3f4:	70 93 5b 3e 	sts	0x3E5B, r23	; 0x803e5b <filteredDeltaValue+0x1>
		
		edgeGroup[edgeGroupPtr++] = 0;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	8e 0f       	add	r24, r30
     3fc:	80 93 52 3e 	sts	0x3E52, r24	; 0x803e52 <__data_end>
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	ee 0f       	add	r30, r30
     404:	ff 1f       	adc	r31, r31
     406:	ee 58       	subi	r30, 0x8E	; 142
     408:	f1 4c       	sbci	r31, 0xC1	; 193
     40a:	10 82       	st	Z, r1
     40c:	11 82       	std	Z+1, r1	; 0x01
		if (edgeGroupPtr >= 4)
     40e:	84 30       	cpi	r24, 0x04	; 4
     410:	10 f0       	brcs	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			edgeGroupPtr = 0;
     412:	10 92 52 3e 	sts	0x3E52, r1	; 0x803e52 <__data_end>

static uint8_t TOUCH_DeltaEdgeDetct(void)
{
	int16_t curDelta;
	int16_t tempDelta;
	uint8_t edgeStatus = 0,i;
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		if (abs(edgeGroupSum) >= STRONG_EDGE_THRESHOLD)
		{
			TOUCH_ClearEdgeGroup();
			
			if (edgeGroupSum > 0)
				edgeStatus = 1; 
     41a:	91 e0       	ldi	r25, 0x01	; 1
		edgeGroup[edgeGroupPtr++] = 0;
		if (edgeGroupPtr >= 4)
			edgeGroupPtr = 0;
	}
	
	preFilteredDeltaValue = filteredDeltaValue;
     41c:	20 91 5a 3e 	lds	r18, 0x3E5A	; 0x803e5a <filteredDeltaValue>
     420:	30 91 5b 3e 	lds	r19, 0x3E5B	; 0x803e5b <filteredDeltaValue+0x1>
     424:	20 93 58 3e 	sts	0x3E58, r18	; 0x803e58 <preFilteredDeltaValue>
     428:	30 93 59 3e 	sts	0x3E59, r19	; 0x803e59 <preFilteredDeltaValue+0x1>
	if (measurement_done_touch == 0)
		return keyStatus;
		
	edgeStatus = TOUCH_DeltaEdgeDetct();
	
	if (edgeDetectFreeze == 1)
     42c:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <edgeDetectFreeze>
     430:	81 30       	cpi	r24, 0x01	; 1
     432:	d1 f1       	breq	.+116    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		return keyStatus;

	switch(SensorState)
     434:	80 91 7b 3e 	lds	r24, 0x3E7B	; 0x803e7b <SensorState>
     438:	88 23       	and	r24, r24
     43a:	19 f0       	breq	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	31 f0       	breq	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     440:	2b c0       	rjmp	.+86     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	{
		case FINGER_ON_DETECT:
			if (edgeStatus == 1)
     442:	91 30       	cpi	r25, 0x01	; 1
     444:	49 f5       	brne	.+82     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				SensorState = FINGER_OFF_DETECT;
     446:	90 93 7b 3e 	sts	0x3E7B, r25	; 0x803e7b <SensorState>
     44a:	26 c0       	rjmp	.+76     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		break;
		
		case FINGER_OFF_DETECT:
			if(edgeStatus == 2)
     44c:	92 30       	cpi	r25, 0x02	; 2
     44e:	81 f4       	brne	.+32     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			{
				if(fingerOnCnt > FINGER_ON_MINIMUM_TIME_MS)
     450:	20 91 63 3e 	lds	r18, 0x3E63	; 0x803e63 <fingerOnCnt>
     454:	30 91 64 3e 	lds	r19, 0x3E64	; 0x803e64 <fingerOnCnt+0x1>
	//return SNR;
//}

static uint8_t TOUCH_TouchDetect(void)
{
	uint8_t keyStatus = 0;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	27 34       	cpi	r18, 0x47	; 71
     45c:	31 05       	cpc	r19, r1
     45e:	08 f4       	brcc	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     460:	80 e0       	ldi	r24, 0x00	; 0
			if(edgeStatus == 2)
			{
				if(fingerOnCnt > FINGER_ON_MINIMUM_TIME_MS)
					keyStatus = 1;
					
				fingerOnCnt = 0;
     462:	10 92 63 3e 	sts	0x3E63, r1	; 0x803e63 <fingerOnCnt>
     466:	10 92 64 3e 	sts	0x3E64, r1	; 0x803e64 <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     46a:	10 92 7b 3e 	sts	0x3E7B, r1	; 0x803e7b <SensorState>
     46e:	15 c0       	rjmp	.+42     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			}
			else if(edgeStatus == 1)
     470:	91 30       	cpi	r25, 0x01	; 1
     472:	29 f4       	brne	.+10     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				fingerOnCnt = 0;
     474:	10 92 63 3e 	sts	0x3E63, r1	; 0x803e63 <fingerOnCnt>
     478:	10 92 64 3e 	sts	0x3E64, r1	; 0x803e64 <fingerOnCnt+0x1>
     47c:	0d c0       	rjmp	.+26     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			else if (fingerOnCnt > FINGER_ON_MAXIMUM_TIME_MS)
     47e:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <fingerOnCnt>
     482:	90 91 64 3e 	lds	r25, 0x3E64	; 0x803e64 <fingerOnCnt+0x1>
     486:	89 3e       	cpi	r24, 0xE9	; 233
     488:	93 40       	sbci	r25, 0x03	; 3
     48a:	30 f0       	brcs	.+12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			{
				fingerOnCnt = 0;
     48c:	10 92 63 3e 	sts	0x3E63, r1	; 0x803e63 <fingerOnCnt>
     490:	10 92 64 3e 	sts	0x3E64, r1	; 0x803e64 <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     494:	10 92 7b 3e 	sts	0x3E7B, r1	; 0x803e7b <SensorState>
	//return SNR;
//}

static uint8_t TOUCH_TouchDetect(void)
{
	uint8_t keyStatus = 0;
     498:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
	}
	
	/* one cycle of measurement is done */
	measurement_done_touch = 0;
     49a:	10 92 67 3e 	sts	0x3E67, r1	; 0x803e67 <measurement_done_touch>
	measureBusyFlag = 0;
     49e:	10 92 53 3e 	sts	0x3E53, r1	; 0x803e53 <measureBusyFlag>
	/* Replace with your application code */
	while(1) 
	{
		//wdt_reset();
		
		if(TOUCH_TouchDetect() == 1)
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			Radiotube_Handle();
     4a6:	35 de       	rcall	.-918    	; 0x112 <Radiotube_Handle>
		
		if (measureBusyFlag == 0)
     4a8:	80 91 53 3e 	lds	r24, 0x3E53	; 0x803e53 <measureBusyFlag>
     4ac:	81 11       	cpse	r24, r1
     4ae:	1b cf       	rjmp	.-458    	; 0x2e6 <main+0x28>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     4b0:	29 9a       	sbi	0x05, 1	; 5
		{
			IO2_set_level(true);
			MCU_GoToSleep(SLEEP_MODE_PWR_DOWN);
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	59 de       	rcall	.-846    	; 0x16a <MCU_GoToSleep>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     4b8:	29 98       	cbi	0x05, 1	; 5
     4ba:	15 cf       	rjmp	.-470    	; 0x2e6 <main+0x28>

000004bc <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     4bc:	08 95       	ret

000004be <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     4be:	cf 93       	push	r28
     4c0:	c8 2f       	mov	r28, r24
	while (!USART_is_tx_ready())
     4c2:	31 d2       	rcall	.+1122   	; 0x926 <USART_is_tx_ready>
     4c4:	88 23       	and	r24, r24
     4c6:	e9 f3       	breq	.-6      	; 0x4c2 <datastreamer_transmit+0x4>
		;

	USART_write(data_byte);
     4c8:	8c 2f       	mov	r24, r28
     4ca:	3b d2       	rcall	.+1142   	; 0x942 <USART_write>

	while (USART_is_tx_busy())
     4cc:	32 d2       	rcall	.+1124   	; 0x932 <USART_is_tx_busy>
     4ce:	81 11       	cpse	r24, r1
     4d0:	fd cf       	rjmp	.-6      	; 0x4cc <datastreamer_transmit+0xe>
		;
}
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <datastreamer_output+0xa>
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
     4e4:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <sequence.4391>
     4e8:	8f 70       	andi	r24, 0x0F	; 15
     4ea:	41 f0       	breq	.+16     	; 0x4fc <datastreamer_output+0x26>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     4ec:	85 e5       	ldi	r24, 0x55	; 85
     4ee:	e7 df       	rcall	.-50     	; 0x4be <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     4f0:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <sequence.4391>
     4f4:	e4 df       	rcall	.-56     	; 0x4be <datastreamer_transmit>

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     4f6:	19 82       	std	Y+1, r1	; 0x01
     4f8:	1a 82       	std	Y+2, r1	; 0x02
     4fa:	48 c0       	rjmp	.+144    	; 0x58c <datastreamer_output+0xb6>
     4fc:	01 e0       	ldi	r16, 0x01	; 1
     4fe:	1e e3       	ldi	r17, 0x3E	; 62
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     500:	fe e3       	ldi	r31, 0x3E	; 62
     502:	04 31       	cpi	r16, 0x14	; 20
     504:	1f 07       	cpc	r17, r31
     506:	91 f3       	breq	.-28     	; 0x4ec <datastreamer_output+0x16>
			datastreamer_transmit(data[i]);
     508:	f8 01       	movw	r30, r16
     50a:	81 91       	ld	r24, Z+
     50c:	8f 01       	movw	r16, r30
     50e:	d7 df       	rcall	.-82     	; 0x4be <datastreamer_transmit>
     510:	f7 cf       	rjmp	.-18     	; 0x500 <datastreamer_output+0x2a>
	// Frame Start
	datastreamer_transmit(sequence);

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	9a 81       	ldd	r25, Y+2	; 0x02
     516:	21 d1       	rcall	.+578    	; 0x75a <get_sensor_node_signal>
     518:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     51a:	d1 df       	rcall	.-94     	; 0x4be <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     51c:	81 2f       	mov	r24, r17
     51e:	cf df       	rcall	.-98     	; 0x4be <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	27 d1       	rcall	.+590    	; 0x774 <get_sensor_node_reference>
     526:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     528:	ca df       	rcall	.-108    	; 0x4be <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     52a:	81 2f       	mov	r24, r17
     52c:	c8 df       	rcall	.-112    	; 0x4be <datastreamer_transmit>
		
		

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	13 d1       	rcall	.+550    	; 0x75a <get_sensor_node_signal>
     534:	8c 01       	movw	r16, r24
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	9a 81       	ldd	r25, Y+2	; 0x02
     53a:	1c d1       	rcall	.+568    	; 0x774 <get_sensor_node_reference>
		
		/* delta smoothing */
		temp_int_calc = TOUCH_DeltaSmoothing(temp_int_calc);
     53c:	98 01       	movw	r18, r16
     53e:	28 1b       	sub	r18, r24
     540:	39 0b       	sbc	r19, r25
     542:	c9 01       	movw	r24, r18
     544:	7e de       	rcall	.-772    	; 0x242 <TOUCH_DeltaSmoothing>
     546:	19 2f       	mov	r17, r25
		
		u16temp_output = (uint16_t)(temp_int_calc);
		datastreamer_transmit((uint8_t)u16temp_output);
     548:	ba df       	rcall	.-140    	; 0x4be <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     54a:	81 2f       	mov	r24, r17
     54c:	b8 df       	rcall	.-144    	; 0x4be <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	1d d1       	rcall	.+570    	; 0x78e <get_sensor_cc_val>
     554:	19 2f       	mov	r17, r25
		//u16temp_output = TOUCH_SNR();
		
		datastreamer_transmit((uint8_t)u16temp_output);
     556:	b3 df       	rcall	.-154    	; 0x4be <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     558:	81 2f       	mov	r24, r17
     55a:	b1 df       	rcall	.-158    	; 0x4be <datastreamer_transmit>
		u8temp_output = NODE_PRSC(qtlib_acq_set1.qtm_acq_node_config[count_bytes_out].node_rsel_prsc);
		datastreamer_transmit(u8temp_output);
#endif
#endif
		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	23 d1       	rcall	.+582    	; 0x7a8 <get_sensor_state>
		if (0u != (u8temp_output & 0x80)) {
     562:	87 ff       	sbrs	r24, 7
     564:	19 c0       	rjmp	.+50     	; 0x598 <datastreamer_output+0xc2>
			datastreamer_transmit(0x01);
     566:	81 e0       	ldi	r24, 0x01	; 1
		} else {
			datastreamer_transmit(0x00);
     568:	aa df       	rcall	.-172    	; 0x4be <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	fc 01       	movw	r30, r24
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	8e 0f       	add	r24, r30
     576:	9f 1f       	adc	r25, r31
     578:	fc 01       	movw	r30, r24
     57a:	ec 5c       	subi	r30, 0xCC	; 204
     57c:	f1 4c       	sbci	r31, 0xC1	; 193
     57e:	80 81       	ld	r24, Z
     580:	9e df       	rcall	.-196    	; 0x4be <datastreamer_transmit>
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	9a 83       	std	Y+2, r25	; 0x02
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	89 2b       	or	r24, r25
     592:	09 f4       	brne	.+2      	; 0x596 <datastreamer_output+0xc0>
     594:	be cf       	rjmp	.-132    	; 0x512 <datastreamer_output+0x3c>
     596:	02 c0       	rjmp	.+4      	; 0x59c <datastreamer_output+0xc6>
		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
		if (0u != (u8temp_output & 0x80)) {
			datastreamer_transmit(0x01);
		} else {
			datastreamer_transmit(0x00);
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	e6 cf       	rjmp	.-52     	; 0x568 <datastreamer_output+0x92>
		datastreamer_transmit(qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->median_filter_freq[count]);
	}
#endif
		
	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     59c:	80 91 66 3e 	lds	r24, 0x3E66	; 0x803e66 <module_error_code>
     5a0:	8e df       	rcall	.-228    	; 0x4be <datastreamer_transmit>
	
	/* Frame End */
	datastreamer_transmit(sequence++);
     5a2:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <sequence.4391>
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	98 0f       	add	r25, r24
     5aa:	90 93 65 3e 	sts	0x3E65, r25	; 0x803e65 <sequence.4391>
     5ae:	87 df       	rcall	.-242    	; 0x4be <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     5b0:	8a ea       	ldi	r24, 0xAA	; 170
     5b2:	85 df       	rcall	.-246    	; 0x4be <datastreamer_transmit>
}
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <qtm_measure_complete_callback>:
void calibrate_node(uint16_t sensor_node)
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
     5c2:	ed e8       	ldi	r30, 0x8D	; 141
     5c4:	fe e3       	ldi	r31, 0x3E	; 62
     5c6:	80 81       	ld	r24, Z
     5c8:	82 60       	ori	r24, 0x02	; 2
     5ca:	80 83       	st	Z, r24
     5cc:	08 95       	ret

000005ce <qtm_post_process_complete>:
     5ce:	e0 91 2c 3e 	lds	r30, 0x3E2C	; 0x803e2c <qtlib_key_set1>
     5d2:	f0 91 2d 3e 	lds	r31, 0x3E2D	; 0x803e2d <qtlib_key_set1+0x1>
     5d6:	80 81       	ld	r24, Z
     5d8:	87 ff       	sbrs	r24, 7
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <qtm_post_process_complete+0x1e>
     5dc:	e0 91 8b 3e 	lds	r30, 0x3E8B	; 0x803e8b <p_qtm_control>
     5e0:	f0 91 8c 3e 	lds	r31, 0x3E8C	; 0x803e8c <p_qtm_control+0x1>
     5e4:	80 81       	ld	r24, Z
     5e6:	84 60       	ori	r24, 0x04	; 4
     5e8:	80 83       	st	Z, r24
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <qtm_post_process_complete+0x24>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	80 93 67 3e 	sts	0x3E67, r24	; 0x803e67 <measurement_done_touch>
     5f2:	71 cf       	rjmp	.-286    	; 0x4d6 <datastreamer_output>

000005f4 <qtm_error_callback>:
     5f4:	87 ff       	sbrs	r24, 7
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <qtm_error_callback+0x8>
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	07 c0       	rjmp	.+14     	; 0x60a <qtm_error_callback+0x16>
     5fc:	86 fd       	sbrc	r24, 6
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <qtm_error_callback+0x12>
     600:	10 92 66 3e 	sts	0x3E66, r1	; 0x803e66 <module_error_code>
     604:	04 c0       	rjmp	.+8      	; 0x60e <qtm_error_callback+0x1a>
     606:	8f 70       	andi	r24, 0x0F	; 15
     608:	8e 5f       	subi	r24, 0xFE	; 254
     60a:	80 93 66 3e 	sts	0x3E66, r24	; 0x803e66 <module_error_code>
     60e:	63 cf       	rjmp	.-314    	; 0x4d6 <datastreamer_output>

00000610 <init_complete_callback>:
     610:	89 e8       	ldi	r24, 0x89	; 137
     612:	9e e3       	ldi	r25, 0x3E	; 62
     614:	aa d9       	rcall	.-3244   	; 0xfffff96a <__eeprom_end+0xff7ef96a>
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	81 e4       	ldi	r24, 0x41	; 65
     61c:	9e e3       	ldi	r25, 0x3E	; 62
     61e:	0f da       	rcall	.-3042   	; 0xfffffa3e <__eeprom_end+0xff7efa3e>
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	81 e4       	ldi	r24, 0x41	; 65
     626:	9e e3       	ldi	r25, 0x3E	; 62
     628:	29 da       	rcall	.-2990   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
     62a:	44 e8       	ldi	r20, 0x84	; 132
     62c:	5e e3       	ldi	r21, 0x3E	; 62
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	8c e2       	ldi	r24, 0x2C	; 44
     632:	9e e3       	ldi	r25, 0x3E	; 62
     634:	09 c2       	rjmp	.+1042   	; 0xa48 <qtm_init_sensor_key>

00000636 <Timer_set_period>:
     636:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     63a:	92 fd       	sbrc	r25, 2
     63c:	fc cf       	rjmp	.-8      	; 0x636 <Timer_set_period>
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     644:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     648:	08 95       	ret

0000064a <touch_init>:
     64a:	80 e2       	ldi	r24, 0x20	; 32
     64c:	f4 df       	rcall	.-24     	; 0x636 <Timer_set_period>
     64e:	e4 e1       	ldi	r30, 0x14	; 20
     650:	f4 e0       	ldi	r31, 0x04	; 4
     652:	80 81       	ld	r24, Z
     654:	87 7f       	andi	r24, 0xF7	; 247
     656:	80 83       	st	Z, r24
     658:	ed e8       	ldi	r30, 0x8D	; 141
     65a:	fe e3       	ldi	r31, 0x3E	; 62
     65c:	10 82       	st	Z, r1
     65e:	88 e2       	ldi	r24, 0x28	; 40
     660:	9e e3       	ldi	r25, 0x3E	; 62
     662:	81 83       	std	Z+1, r24	; 0x01
     664:	92 83       	std	Z+2, r25	; 0x02
     666:	84 e2       	ldi	r24, 0x24	; 36
     668:	9e e3       	ldi	r25, 0x3E	; 62
     66a:	83 83       	std	Z+3, r24	; 0x03
     66c:	94 83       	std	Z+4, r25	; 0x04
     66e:	8c e1       	ldi	r24, 0x1C	; 28
     670:	9e e3       	ldi	r25, 0x3E	; 62
     672:	85 83       	std	Z+5, r24	; 0x05
     674:	96 83       	std	Z+6, r25	; 0x06
     676:	80 e2       	ldi	r24, 0x20	; 32
     678:	9e e3       	ldi	r25, 0x3E	; 62
     67a:	87 83       	std	Z+7, r24	; 0x07
     67c:	90 87       	std	Z+8, r25	; 0x08
     67e:	84 e1       	ldi	r24, 0x14	; 20
     680:	9e e3       	ldi	r25, 0x3E	; 62
     682:	81 87       	std	Z+9, r24	; 0x09
     684:	92 87       	std	Z+10, r25	; 0x0a
     686:	88 e1       	ldi	r24, 0x18	; 24
     688:	9e e3       	ldi	r25, 0x3E	; 62
     68a:	83 87       	std	Z+11, r24	; 0x0b
     68c:	94 87       	std	Z+12, r25	; 0x0c
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	9a e0       	ldi	r25, 0x0A	; 10
     692:	85 87       	std	Z+13, r24	; 0x0d
     694:	96 87       	std	Z+14, r25	; 0x0e
     696:	88 e0       	ldi	r24, 0x08	; 8
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	87 87       	std	Z+15, r24	; 0x0f
     69c:	90 8b       	std	Z+16, r25	; 0x10
     69e:	8a ef       	ldi	r24, 0xFA	; 250
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	81 8b       	std	Z+17, r24	; 0x11
     6a4:	92 8b       	std	Z+18, r25	; 0x12
     6a6:	81 ee       	ldi	r24, 0xE1	; 225
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	83 8b       	std	Z+19, r24	; 0x13
     6ac:	94 8b       	std	Z+20, r25	; 0x14
     6ae:	15 8a       	std	Z+21, r1	; 0x15
     6b0:	16 8a       	std	Z+22, r1	; 0x16
     6b2:	87 ee       	ldi	r24, 0xE7	; 231
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	87 8b       	std	Z+23, r24	; 0x17
     6b8:	90 8f       	std	Z+24, r25	; 0x18
     6ba:	cf 01       	movw	r24, r30
     6bc:	a7 d5       	rcall	.+2894   	; 0x120c <qtm_binding_layer_init>
     6be:	a1 d5       	rcall	.+2882   	; 0x1202 <qmt_get_binding_layer_ptr>
     6c0:	80 93 8b 3e 	sts	0x3E8B, r24	; 0x803e8b <p_qtm_control>
     6c4:	90 93 8c 3e 	sts	0x3E8C, r25	; 0x803e8c <p_qtm_control+0x1>
     6c8:	f9 ce       	rjmp	.-526    	; 0x4bc <datastreamer_init>

000006ca <touch_process>:
     6ca:	e0 91 8b 3e 	lds	r30, 0x3E8B	; 0x803e8b <p_qtm_control>
     6ce:	f0 91 8c 3e 	lds	r31, 0x3E8C	; 0x803e8c <p_qtm_control+0x1>
     6d2:	80 81       	ld	r24, Z
     6d4:	80 ff       	sbrs	r24, 0
     6d6:	0b c0       	rjmp	.+22     	; 0x6ee <touch_process+0x24>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	f6 d5       	rcall	.+3052   	; 0x12c8 <qtm_lib_start_acquisition>
     6dc:	81 11       	cpse	r24, r1
     6de:	07 c0       	rjmp	.+14     	; 0x6ee <touch_process+0x24>
     6e0:	e0 91 8b 3e 	lds	r30, 0x3E8B	; 0x803e8b <p_qtm_control>
     6e4:	f0 91 8c 3e 	lds	r31, 0x3E8C	; 0x803e8c <p_qtm_control+0x1>
     6e8:	80 81       	ld	r24, Z
     6ea:	8e 7f       	andi	r24, 0xFE	; 254
     6ec:	80 83       	st	Z, r24
     6ee:	e0 91 8b 3e 	lds	r30, 0x3E8B	; 0x803e8b <p_qtm_control>
     6f2:	f0 91 8c 3e 	lds	r31, 0x3E8C	; 0x803e8c <p_qtm_control+0x1>
     6f6:	80 81       	ld	r24, Z
     6f8:	81 ff       	sbrs	r24, 1
     6fa:	0e c0       	rjmp	.+28     	; 0x718 <touch_process+0x4e>
     6fc:	34 d6       	rcall	.+3176   	; 0x1366 <qtm_lib_acq_process>
     6fe:	81 11       	cpse	r24, r1
     700:	02 c0       	rjmp	.+4      	; 0x706 <touch_process+0x3c>
     702:	39 d6       	rcall	.+3186   	; 0x1376 <qtm_lib_post_process>
     704:	02 c0       	rjmp	.+4      	; 0x70a <touch_process+0x40>
     706:	80 e8       	ldi	r24, 0x80	; 128
     708:	75 df       	rcall	.-278    	; 0x5f4 <qtm_error_callback>
     70a:	e0 91 8b 3e 	lds	r30, 0x3E8B	; 0x803e8b <p_qtm_control>
     70e:	f0 91 8c 3e 	lds	r31, 0x3E8C	; 0x803e8c <p_qtm_control+0x1>
     712:	80 81       	ld	r24, Z
     714:	8d 7f       	andi	r24, 0xFD	; 253
     716:	80 83       	st	Z, r24
     718:	e0 91 8b 3e 	lds	r30, 0x3E8B	; 0x803e8b <p_qtm_control>
     71c:	f0 91 8c 3e 	lds	r31, 0x3E8C	; 0x803e8c <p_qtm_control+0x1>
     720:	80 81       	ld	r24, Z
     722:	82 ff       	sbrs	r24, 2
     724:	03 c0       	rjmp	.+6      	; 0x72c <touch_process+0x62>
     726:	8b 7f       	andi	r24, 0xFB	; 251
     728:	81 60       	ori	r24, 0x01	; 1
     72a:	80 83       	st	Z, r24
     72c:	08 95       	ret

0000072e <touch_timer_handler>:
     72e:	80 91 83 3e 	lds	r24, 0x3E83	; 0x803e83 <interrupt_cnt>
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	80 93 83 3e 	sts	0x3E83, r24	; 0x803e83 <interrupt_cnt>
     738:	90 91 00 3e 	lds	r25, 0x3E00	; 0x803e00 <__data_start>
     73c:	98 17       	cp	r25, r24
     73e:	60 f4       	brcc	.+24     	; 0x758 <touch_timer_handler+0x2a>
     740:	10 92 83 3e 	sts	0x3E83, r1	; 0x803e83 <interrupt_cnt>
     744:	e2 dc       	rcall	.-1596   	; 0x10a <TOUCH_SetMeasureBusyFlag>
     746:	80 91 8d 3e 	lds	r24, 0x3E8D	; 0x803e8d <qtm_control>
     74a:	81 60       	ori	r24, 0x01	; 1
     74c:	80 93 8d 3e 	sts	0x3E8D, r24	; 0x803e8d <qtm_control>
     750:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	6d c1       	rjmp	.+730    	; 0xa32 <qtm_update_qtlib_timer>
     758:	08 95       	ret

0000075a <get_sensor_node_signal>:
     75a:	25 e0       	ldi	r18, 0x05	; 5
     75c:	ac 01       	movw	r20, r24
     75e:	24 9f       	mul	r18, r20
     760:	c0 01       	movw	r24, r0
     762:	25 9f       	mul	r18, r21
     764:	90 0d       	add	r25, r0
     766:	11 24       	eor	r1, r1
     768:	fc 01       	movw	r30, r24
     76a:	ec 57       	subi	r30, 0x7C	; 124
     76c:	f1 4c       	sbci	r31, 0xC1	; 193
     76e:	81 81       	ldd	r24, Z+1	; 0x01
     770:	92 81       	ldd	r25, Z+2	; 0x02
     772:	08 95       	ret

00000774 <get_sensor_node_reference>:
     774:	26 e0       	ldi	r18, 0x06	; 6
     776:	ac 01       	movw	r20, r24
     778:	24 9f       	mul	r18, r20
     77a:	c0 01       	movw	r24, r0
     77c:	25 9f       	mul	r18, r21
     77e:	90 0d       	add	r25, r0
     780:	11 24       	eor	r1, r1
     782:	fc 01       	movw	r30, r24
     784:	ea 55       	subi	r30, 0x5A	; 90
     786:	f1 4c       	sbci	r31, 0xC1	; 193
     788:	84 81       	ldd	r24, Z+4	; 0x04
     78a:	95 81       	ldd	r25, Z+5	; 0x05
     78c:	08 95       	ret

0000078e <get_sensor_cc_val>:
     78e:	25 e0       	ldi	r18, 0x05	; 5
     790:	ac 01       	movw	r20, r24
     792:	24 9f       	mul	r18, r20
     794:	c0 01       	movw	r24, r0
     796:	25 9f       	mul	r18, r21
     798:	90 0d       	add	r25, r0
     79a:	11 24       	eor	r1, r1
     79c:	fc 01       	movw	r30, r24
     79e:	ec 57       	subi	r30, 0x7C	; 124
     7a0:	f1 4c       	sbci	r31, 0xC1	; 193
     7a2:	83 81       	ldd	r24, Z+3	; 0x03
     7a4:	94 81       	ldd	r25, Z+4	; 0x04
     7a6:	08 95       	ret

000007a8 <get_sensor_state>:
     7a8:	26 e0       	ldi	r18, 0x06	; 6
     7aa:	ac 01       	movw	r20, r24
     7ac:	24 9f       	mul	r18, r20
     7ae:	c0 01       	movw	r24, r0
     7b0:	25 9f       	mul	r18, r21
     7b2:	90 0d       	add	r25, r0
     7b4:	11 24       	eor	r1, r1
     7b6:	e0 91 30 3e 	lds	r30, 0x3E30	; 0x803e30 <qtlib_key_set1+0x4>
     7ba:	f0 91 31 3e 	lds	r31, 0x3E31	; 0x803e31 <qtlib_key_set1+0x5>
     7be:	e8 0f       	add	r30, r24
     7c0:	f9 1f       	adc	r31, r25
     7c2:	80 81       	ld	r24, Z
     7c4:	08 95       	ret

000007c6 <__vector_17>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	2f 93       	push	r18
     7d2:	3f 93       	push	r19
     7d4:	4f 93       	push	r20
     7d6:	5f 93       	push	r21
     7d8:	6f 93       	push	r22
     7da:	7f 93       	push	r23
     7dc:	8f 93       	push	r24
     7de:	9f 93       	push	r25
     7e0:	af 93       	push	r26
     7e2:	bf 93       	push	r27
     7e4:	ef 93       	push	r30
     7e6:	ff 93       	push	r31
	qtm_t81x_ptc_handler_eoc();
     7e8:	8a d9       	rcall	.-3308   	; 0xfffffafe <__eeprom_end+0xff7efafe>
}
     7ea:	ff 91       	pop	r31
     7ec:	ef 91       	pop	r30
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	08 95       	ret

00000810 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     810:	42 e0       	ldi	r20, 0x02	; 2
     812:	68 ed       	ldi	r22, 0xD8	; 216
     814:	88 e7       	ldi	r24, 0x78	; 120
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	63 d0       	rcall	.+198    	; 0x8e0 <protected_write_io>
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	68 ed       	ldi	r22, 0xD8	; 216
     81e:	81 e6       	ldi	r24, 0x61	; 97
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	5e d0       	rcall	.+188    	; 0x8e0 <protected_write_io>
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	68 ed       	ldi	r22, 0xD8	; 216
     828:	80 e6       	ldi	r24, 0x60	; 96
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	59 d0       	rcall	.+178    	; 0x8e0 <protected_write_io>
	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLA),
	             CLKCTRL_CLKSEL_OSC20M_gc /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */
	                 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	/* wait for system oscillator changing to finish */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
     82e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x700063>
     832:	80 fd       	sbrc	r24, 0
     834:	fc cf       	rjmp	.-8      	; 0x82e <CLKCTRL_init+0x1e>
	}

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 95       	ret

0000083a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     83a:	78 94       	sei

	return 0;
}
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret

00000840 <mcu_init>:
	// Disable digital input buffer
	PA7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PA7_set_pull_mode(PORT_PULL_OFF);

	AC_0_init();
     840:	e0 e1       	ldi	r30, 0x10	; 16
     842:	f4 e0       	ldi	r31, 0x04	; 4
     844:	80 81       	ld	r24, Z
     846:	88 60       	ori	r24, 0x08	; 8
     848:	81 93       	st	Z+, r24
     84a:	e8 31       	cpi	r30, 0x18	; 24
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	f8 07       	cpc	r31, r24
     850:	c9 f7       	brne	.-14     	; 0x844 <mcu_init+0x4>
     852:	e0 e3       	ldi	r30, 0x30	; 48
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	80 81       	ld	r24, Z
     858:	88 60       	ori	r24, 0x08	; 8
     85a:	81 93       	st	Z+, r24
     85c:	e8 33       	cpi	r30, 0x38	; 56
     85e:	84 e0       	ldi	r24, 0x04	; 4
     860:	f8 07       	cpc	r31, r24
     862:	c9 f7       	brne	.-14     	; 0x856 <mcu_init+0x16>
     864:	e0 e5       	ldi	r30, 0x50	; 80
     866:	f4 e0       	ldi	r31, 0x04	; 4
     868:	80 81       	ld	r24, Z
     86a:	88 60       	ori	r24, 0x08	; 8
     86c:	81 93       	st	Z+, r24
     86e:	e8 35       	cpi	r30, 0x58	; 88
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	f8 07       	cpc	r31, r24
     874:	c9 f7       	brne	.-14     	; 0x868 <mcu_init+0x28>
     876:	08 95       	ret

00000878 <USART_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     878:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     87a:	e3 e3       	ldi	r30, 0x33	; 51
     87c:	f4 e0       	ldi	r31, 0x04	; 4
     87e:	80 81       	ld	r24, Z
     880:	87 7f       	andi	r24, 0xF7	; 247
     882:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     884:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     886:	2a 98       	cbi	0x05, 2	; 5
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);

	USART_init();
     888:	44 c0       	rjmp	.+136    	; 0x912 <USART_init>

0000088a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     88a:	da df       	rcall	.-76     	; 0x840 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     88c:	00 98       	cbi	0x00, 0	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     88e:	e0 e1       	ldi	r30, 0x10	; 16
     890:	f4 e0       	ldi	r31, 0x04	; 4
     892:	80 81       	ld	r24, Z
     894:	88 60       	ori	r24, 0x08	; 8
     896:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     898:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     89a:	e2 e1       	ldi	r30, 0x12	; 18
     89c:	f4 e0       	ldi	r31, 0x04	; 4
     89e:	80 81       	ld	r24, Z
     8a0:	88 60       	ori	r24, 0x08	; 8
     8a2:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     8a4:	03 98       	cbi	0x00, 3	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     8a6:	e3 e1       	ldi	r30, 0x13	; 19
     8a8:	f4 e0       	ldi	r31, 0x04	; 4
     8aa:	80 81       	ld	r24, Z
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     8b0:	05 98       	cbi	0x00, 5	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     8b2:	e5 e1       	ldi	r30, 0x15	; 21
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	80 81       	ld	r24, Z
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     8bc:	06 98       	cbi	0x00, 6	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     8be:	e6 e1       	ldi	r30, 0x16	; 22
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	80 81       	ld	r24, Z
     8c4:	88 60       	ori	r24, 0x08	; 8
     8c6:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8c8:	20 9a       	sbi	0x04, 0	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8ca:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8cc:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8ce:	29 98       	cbi	0x05, 1	; 5
	    //// <id> pad_pull_config
	    //// <PORT_PULL_OFF"> Off
	    //// <PORT_PULL_UP"> Pull-up
	    //PORT_PULL_UP);

	CLKCTRL_init();
     8d0:	9f df       	rcall	.-194    	; 0x810 <CLKCTRL_init>

	RTC_init(1);
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	09 d0       	rcall	.+18     	; 0x8e8 <RTC_init>
	
	VREF_0_init();
     8d6:	3c d0       	rcall	.+120    	; 0x950 <VREF_0_init>
	
	USART_initialization();
     8d8:	cf df       	rcall	.-98     	; 0x878 <USART_initialization>
	
	//AC_0_initialization();

	//WDT_0_init();

	CPUINT_init();
     8da:	af df       	rcall	.-162    	; 0x83a <CPUINT_init>

	SLPCTRL_init();
     8dc:	15 d0       	rcall	.+42     	; 0x908 <SLPCTRL_init>

	BOD_init();
     8de:	96 cf       	rjmp	.-212    	; 0x80c <BOD_init>

000008e0 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     8e0:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     8e2:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     8e4:	40 83       	st	Z, r20
	ret                             // Return to caller
     8e6:	08 95       	ret

000008e8 <RTC_init>:
int8_t RTC_init(uint8_t mode)
{
	//while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
	//}
	
	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     8e8:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__TEXT_REGION_LENGTH__+0x700151>
     8ec:	81 11       	cpse	r24, r1
     8ee:	fc cf       	rjmp	.-8      	; 0x8e8 <RTC_init>
	//| 1 << RTC_RTCEN_bp     /* Enable: enabled */
	//| 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz divided by 32 */
     8f0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	//RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
	//| 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	 RTC.PITCTRLA = RTC_PERIOD_CYC32_gc /* Off */
     8f4:	81 e2       	ldi	r24, 0x21	; 33
     8f6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
			 | 1 << RTC_PITEN_bp; /* Enable: disabled */

	 RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */
     8fa:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__TEXT_REGION_LENGTH__+0x700155>

	 RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: disabled */
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>

	return 0;
}
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	08 95       	ret

00000908 <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	                | SLPCTRL_SMODE_STDBY_gc; /* Power-down Mode */

	return 0;
}
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	08 95       	ret

00000912 <USART_init>:
uint8_t USART_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     912:	e0 e0       	ldi	r30, 0x00	; 0
     914:	f8 e0       	ldi	r31, 0x08	; 8
     916:	8b e5       	ldi	r24, 0x5B	; 91
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	80 87       	std	Z+8, r24	; 0x08
     91c:	91 87       	std	Z+9, r25	; 0x09
     91e:	80 e4       	ldi	r24, 0x40	; 64
     920:	86 83       	std	Z+6, r24	; 0x06
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	08 95       	ret

00000926 <USART_is_tx_ready>:
     926:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     92a:	85 fb       	bst	r24, 5
     92c:	88 27       	eor	r24, r24
     92e:	80 f9       	bld	r24, 0
     930:	08 95       	ret

00000932 <USART_is_tx_busy>:
     932:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     936:	86 fb       	bst	r24, 6
     938:	88 27       	eor	r24, r24
     93a:	80 f9       	bld	r24, 0
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	89 27       	eor	r24, r25
     940:	08 95       	ret

00000942 <USART_write>:
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     942:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     946:	95 ff       	sbrs	r25, 5
     948:	fc cf       	rjmp	.-8      	; 0x942 <USART_write>
		;
	USART0.TXDATAL = data;
     94a:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     94e:	08 95       	ret

00000950 <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF_CTRLA = VREF_ADC0REFSEL_0V55_gc   /* Voltage reference at 0.55V */
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	             | VREF_DAC0REFSEL_1V5_gc; /* Voltage reference at 1.5V */

	VREF_CTRLB = 0 << VREF_ADC0REFEN_bp    /* ADC0 reference enable: disabled */
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	             | 1 << VREF_DAC0REFEN_bp; /* DAC0/AC0 reference enable: enabled */

	return 0;
}
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	08 95       	ret

00000960 <check_for_aks_block>:
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ec 01       	movw	r28, r24
     970:	ae 81       	ldd	r26, Y+6	; 0x06
     972:	bf 81       	ldd	r27, Y+7	; 0x07
     974:	eb 01       	movw	r28, r22
     976:	cc 0f       	add	r28, r28
     978:	dd 1f       	adc	r29, r29
     97a:	c6 0f       	add	r28, r22
     97c:	d7 1f       	adc	r29, r23
     97e:	ca 0f       	add	r28, r26
     980:	db 1f       	adc	r29, r27
     982:	fa 80       	ldd	r15, Y+2	; 0x02
     984:	fc 01       	movw	r30, r24
     986:	44 81       	ldd	r20, Z+4	; 0x04
     988:	55 81       	ldd	r21, Z+5	; 0x05
     98a:	e6 e0       	ldi	r30, 0x06	; 6
     98c:	e6 9f       	mul	r30, r22
     98e:	90 01       	movw	r18, r0
     990:	e7 9f       	mul	r30, r23
     992:	30 0d       	add	r19, r0
     994:	11 24       	eor	r1, r1
     996:	8a 01       	movw	r16, r20
     998:	02 0f       	add	r16, r18
     99a:	13 1f       	adc	r17, r19
     99c:	f8 01       	movw	r30, r16
     99e:	22 81       	ldd	r18, Z+2	; 0x02
     9a0:	33 81       	ldd	r19, Z+3	; 0x03
     9a2:	f9 01       	movw	r30, r18
     9a4:	21 81       	ldd	r18, Z+1	; 0x01
     9a6:	32 81       	ldd	r19, Z+2	; 0x02
     9a8:	f8 01       	movw	r30, r16
     9aa:	04 81       	ldd	r16, Z+4	; 0x04
     9ac:	15 81       	ldd	r17, Z+5	; 0x05
     9ae:	20 1b       	sub	r18, r16
     9b0:	31 0b       	sbc	r19, r17
     9b2:	e8 81       	ld	r30, Y
     9b4:	2e 1b       	sub	r18, r30
     9b6:	31 09       	sbc	r19, r1
     9b8:	ec 01       	movw	r28, r24
     9ba:	ea 81       	ldd	r30, Y+2	; 0x02
     9bc:	fb 81       	ldd	r31, Y+3	; 0x03
     9be:	00 81       	ld	r16, Z
     9c0:	11 81       	ldd	r17, Z+1	; 0x01
     9c2:	fa 01       	movw	r30, r20
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	40 17       	cp	r20, r16
     9ca:	51 07       	cpc	r21, r17
     9cc:	39 f1       	breq	.+78     	; 0xa1c <check_for_aks_block+0xbc>
     9ce:	46 17       	cp	r20, r22
     9d0:	57 07       	cpc	r21, r23
     9d2:	f9 f0       	breq	.+62     	; 0xa12 <check_for_aks_block+0xb2>
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	8c 91       	ld	r24, X
     9d8:	12 97       	sbiw	r26, 0x02	; 2
     9da:	f8 12       	cpse	r15, r24
     9dc:	1a c0       	rjmp	.+52     	; 0xa12 <check_for_aks_block+0xb2>
     9de:	80 81       	ld	r24, Z
     9e0:	85 58       	subi	r24, 0x85	; 133
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	e8 f0       	brcs	.+58     	; 0xa20 <check_for_aks_block+0xc0>
     9e6:	c4 80       	ldd	r12, Z+4	; 0x04
     9e8:	d5 80       	ldd	r13, Z+5	; 0x05
     9ea:	82 81       	ldd	r24, Z+2	; 0x02
     9ec:	93 81       	ldd	r25, Z+3	; 0x03
     9ee:	ec 01       	movw	r28, r24
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	9a 81       	ldd	r25, Y+2	; 0x02
     9f4:	c8 16       	cp	r12, r24
     9f6:	d9 06       	cpc	r13, r25
     9f8:	60 f4       	brcc	.+24     	; 0xa12 <check_for_aks_block+0xb2>
     9fa:	8c 19       	sub	r24, r12
     9fc:	9d 09       	sbc	r25, r13
     9fe:	cc 91       	ld	r28, X
     a00:	d0 e0       	ldi	r29, 0x00	; 0
     a02:	c8 17       	cp	r28, r24
     a04:	d9 07       	cpc	r29, r25
     a06:	28 f4       	brcc	.+10     	; 0xa12 <check_for_aks_block+0xb2>
     a08:	8c 1b       	sub	r24, r28
     a0a:	9d 0b       	sbc	r25, r29
     a0c:	28 17       	cp	r18, r24
     a0e:	39 07       	cpc	r19, r25
     a10:	38 f0       	brcs	.+14     	; 0xa20 <check_for_aks_block+0xc0>
     a12:	4f 5f       	subi	r20, 0xFF	; 255
     a14:	5f 4f       	sbci	r21, 0xFF	; 255
     a16:	13 96       	adiw	r26, 0x03	; 3
     a18:	36 96       	adiw	r30, 0x06	; 6
     a1a:	d6 cf       	rjmp	.-84     	; 0x9c8 <check_for_aks_block+0x68>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <check_for_aks_block+0xc2>
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
     a30:	08 95       	ret

00000a32 <qtm_update_qtlib_timer>:
     a32:	20 91 68 3e 	lds	r18, 0x3E68	; 0x803e68 <qtm_local_ms_timecount>
     a36:	30 91 69 3e 	lds	r19, 0x3E69	; 0x803e69 <qtm_local_ms_timecount+0x1>
     a3a:	82 0f       	add	r24, r18
     a3c:	93 1f       	adc	r25, r19
     a3e:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <qtm_local_ms_timecount>
     a42:	90 93 69 3e 	sts	0x3E69, r25	; 0x803e69 <qtm_local_ms_timecount+0x1>
     a46:	08 95       	ret

00000a48 <qtm_init_sensor_key>:
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	d9 f0       	breq	.+54     	; 0xa82 <qtm_init_sensor_key+0x3a>
     a4c:	41 15       	cp	r20, r1
     a4e:	51 05       	cpc	r21, r1
     a50:	c1 f0       	breq	.+48     	; 0xa82 <qtm_init_sensor_key+0x3a>
     a52:	26 e0       	ldi	r18, 0x06	; 6
     a54:	62 9f       	mul	r22, r18
     a56:	b0 01       	movw	r22, r0
     a58:	11 24       	eor	r1, r1
     a5a:	dc 01       	movw	r26, r24
     a5c:	14 96       	adiw	r26, 0x04	; 4
     a5e:	ed 91       	ld	r30, X+
     a60:	fc 91       	ld	r31, X
     a62:	15 97       	sbiw	r26, 0x05	; 5
     a64:	e6 0f       	add	r30, r22
     a66:	f7 1f       	adc	r31, r23
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	20 83       	st	Z, r18
     a6c:	14 96       	adiw	r26, 0x04	; 4
     a6e:	8d 91       	ld	r24, X+
     a70:	9c 91       	ld	r25, X
     a72:	15 97       	sbiw	r26, 0x05	; 5
     a74:	fc 01       	movw	r30, r24
     a76:	e6 0f       	add	r30, r22
     a78:	f7 1f       	adc	r31, r23
     a7a:	42 83       	std	Z+2, r20	; 0x02
     a7c:	53 83       	std	Z+3, r21	; 0x03
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	08 95       	ret
     a82:	8b e0       	ldi	r24, 0x0B	; 11
     a84:	08 95       	ret

00000a86 <qtm_key_sensors_process>:
     a86:	2f 92       	push	r2
     a88:	3f 92       	push	r3
     a8a:	4f 92       	push	r4
     a8c:	5f 92       	push	r5
     a8e:	6f 92       	push	r6
     a90:	7f 92       	push	r7
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	09 f4       	brne	.+2      	; 0xab0 <qtm_key_sensors_process+0x2a>
     aae:	7b c3       	rjmp	.+1782   	; 0x11a6 <qtm_key_sensors_process+0x720>
     ab0:	ec 01       	movw	r28, r24
     ab2:	a1 2c       	mov	r10, r1
     ab4:	b1 2c       	mov	r11, r1
     ab6:	81 2c       	mov	r8, r1
     ab8:	91 2c       	mov	r9, r1
     aba:	21 2c       	mov	r2, r1
     abc:	d1 2c       	mov	r13, r1
     abe:	33 e0       	ldi	r19, 0x03	; 3
     ac0:	c3 2e       	mov	r12, r19
     ac2:	45 e8       	ldi	r20, 0x85	; 133
     ac4:	64 2e       	mov	r6, r20
     ac6:	56 e8       	ldi	r21, 0x86	; 134
     ac8:	75 2e       	mov	r7, r21
     aca:	67 e0       	ldi	r22, 0x07	; 7
     acc:	36 2e       	mov	r3, r22
     ace:	72 e0       	ldi	r23, 0x02	; 2
     ad0:	47 2e       	mov	r4, r23
     ad2:	e8 e0       	ldi	r30, 0x08	; 8
     ad4:	5e 2e       	mov	r5, r30
     ad6:	ea 81       	ldd	r30, Y+2	; 0x02
     ad8:	fb 81       	ldd	r31, Y+3	; 0x03
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	88 16       	cp	r8, r24
     ae0:	99 06       	cpc	r9, r25
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <qtm_key_sensors_process+0x60>
     ae4:	a3 c1       	rjmp	.+838    	; 0xe2c <qtm_key_sensors_process+0x3a6>
     ae6:	75 01       	movw	r14, r10
     ae8:	ee 0c       	add	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0c 81       	ldd	r16, Y+4	; 0x04
     aee:	1d 81       	ldd	r17, Y+5	; 0x05
     af0:	0e 0d       	add	r16, r14
     af2:	1f 1d       	adc	r17, r15
     af4:	d8 01       	movw	r26, r16
     af6:	8c 91       	ld	r24, X
     af8:	84 30       	cpi	r24, 0x04	; 4
     afa:	09 f4       	brne	.+2      	; 0xafe <qtm_key_sensors_process+0x78>
     afc:	a1 c0       	rjmp	.+322    	; 0xc40 <qtm_key_sensors_process+0x1ba>
     afe:	38 f4       	brcc	.+14     	; 0xb0e <qtm_key_sensors_process+0x88>
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	01 f1       	breq	.+64     	; 0xb44 <qtm_key_sensors_process+0xbe>
     b04:	08 f0       	brcs	.+2      	; 0xb08 <qtm_key_sensors_process+0x82>
     b06:	49 c0       	rjmp	.+146    	; 0xb9a <qtm_key_sensors_process+0x114>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	59 f0       	breq	.+22     	; 0xb22 <qtm_key_sensors_process+0x9c>
     b0c:	88 c1       	rjmp	.+784    	; 0xe1e <qtm_key_sensors_process+0x398>
     b0e:	85 38       	cpi	r24, 0x85	; 133
     b10:	09 f4       	brne	.+2      	; 0xb14 <qtm_key_sensors_process+0x8e>
     b12:	c0 c0       	rjmp	.+384    	; 0xc94 <qtm_key_sensors_process+0x20e>
     b14:	86 38       	cpi	r24, 0x86	; 134
     b16:	09 f4       	brne	.+2      	; 0xb1a <qtm_key_sensors_process+0x94>
     b18:	f4 c0       	rjmp	.+488    	; 0xd02 <qtm_key_sensors_process+0x27c>
     b1a:	87 30       	cpi	r24, 0x07	; 7
     b1c:	09 f0       	breq	.+2      	; 0xb20 <qtm_key_sensors_process+0x9a>
     b1e:	7f c1       	rjmp	.+766    	; 0xe1e <qtm_key_sensors_process+0x398>
     b20:	35 c1       	rjmp	.+618    	; 0xd8c <qtm_key_sensors_process+0x306>
     b22:	d8 01       	movw	r26, r16
     b24:	12 96       	adiw	r26, 0x02	; 2
     b26:	ed 91       	ld	r30, X+
     b28:	fc 91       	ld	r31, X
     b2a:	13 97       	sbiw	r26, 0x03	; 3
     b2c:	80 81       	ld	r24, Z
     b2e:	8e 71       	andi	r24, 0x1E	; 30
     b30:	09 f0       	breq	.+2      	; 0xb34 <qtm_key_sensors_process+0xae>
     b32:	67 c1       	rjmp	.+718    	; 0xe02 <qtm_key_sensors_process+0x37c>
     b34:	4c 92       	st	X, r4
     b36:	8c 81       	ldd	r24, Y+4	; 0x04
     b38:	9d 81       	ldd	r25, Y+5	; 0x05
     b3a:	fc 01       	movw	r30, r24
     b3c:	ee 0d       	add	r30, r14
     b3e:	ff 1d       	adc	r31, r15
     b40:	51 82       	std	Z+1, r5	; 0x01
     b42:	5f c1       	rjmp	.+702    	; 0xe02 <qtm_key_sensors_process+0x37c>
     b44:	f8 01       	movw	r30, r16
     b46:	21 81       	ldd	r18, Z+1	; 0x01
     b48:	22 23       	and	r18, r18
     b4a:	29 f1       	breq	.+74     	; 0xb96 <qtm_key_sensors_process+0x110>
     b4c:	02 80       	ldd	r0, Z+2	; 0x02
     b4e:	f3 81       	ldd	r31, Z+3	; 0x03
     b50:	e0 2d       	mov	r30, r0
     b52:	25 30       	cpi	r18, 0x05	; 5
     b54:	20 f0       	brcs	.+8      	; 0xb5e <qtm_key_sensors_process+0xd8>
     b56:	81 81       	ldd	r24, Z+1	; 0x01
     b58:	92 81       	ldd	r25, Z+2	; 0x02
     b5a:	d8 01       	movw	r26, r16
     b5c:	0e c0       	rjmp	.+28     	; 0xb7a <qtm_key_sensors_process+0xf4>
     b5e:	d8 01       	movw	r26, r16
     b60:	14 96       	adiw	r26, 0x04	; 4
     b62:	8d 91       	ld	r24, X+
     b64:	9c 91       	ld	r25, X
     b66:	15 97       	sbiw	r26, 0x05	; 5
     b68:	41 81       	ldd	r20, Z+1	; 0x01
     b6a:	52 81       	ldd	r21, Z+2	; 0x02
     b6c:	84 17       	cp	r24, r20
     b6e:	95 07       	cpc	r25, r21
     b70:	69 f0       	breq	.+26     	; 0xb8c <qtm_key_sensors_process+0x106>
     b72:	48 17       	cp	r20, r24
     b74:	59 07       	cpc	r21, r25
     b76:	30 f4       	brcc	.+12     	; 0xb84 <qtm_key_sensors_process+0xfe>
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	14 96       	adiw	r26, 0x04	; 4
     b7c:	8d 93       	st	X+, r24
     b7e:	9c 93       	st	X, r25
     b80:	15 97       	sbiw	r26, 0x05	; 5
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <qtm_key_sensors_process+0x106>
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	f8 01       	movw	r30, r16
     b88:	84 83       	std	Z+4, r24	; 0x04
     b8a:	95 83       	std	Z+5, r25	; 0x05
     b8c:	21 50       	subi	r18, 0x01	; 1
     b8e:	d8 01       	movw	r26, r16
     b90:	11 96       	adiw	r26, 0x01	; 1
     b92:	2c 93       	st	X, r18
     b94:	36 c1       	rjmp	.+620    	; 0xe02 <qtm_key_sensors_process+0x37c>
     b96:	f8 01       	movw	r30, r16
     b98:	2f c1       	rjmp	.+606    	; 0xdf8 <qtm_key_sensors_process+0x372>
     b9a:	d8 01       	movw	r26, r16
     b9c:	14 96       	adiw	r26, 0x04	; 4
     b9e:	2d 91       	ld	r18, X+
     ba0:	3c 91       	ld	r19, X
     ba2:	15 97       	sbiw	r26, 0x05	; 5
     ba4:	12 96       	adiw	r26, 0x02	; 2
     ba6:	8d 91       	ld	r24, X+
     ba8:	9c 91       	ld	r25, X
     baa:	13 97       	sbiw	r26, 0x03	; 3
     bac:	dc 01       	movw	r26, r24
     bae:	11 96       	adiw	r26, 0x01	; 1
     bb0:	4d 91       	ld	r20, X+
     bb2:	5c 91       	ld	r21, X
     bb4:	12 97       	sbiw	r26, 0x02	; 2
     bb6:	24 17       	cp	r18, r20
     bb8:	35 07       	cpc	r19, r21
     bba:	09 f4       	brne	.+2      	; 0xbbe <qtm_key_sensors_process+0x138>
     bbc:	30 c1       	rjmp	.+608    	; 0xe1e <qtm_key_sensors_process+0x398>
     bbe:	8e 81       	ldd	r24, Y+6	; 0x06
     bc0:	9f 81       	ldd	r25, Y+7	; 0x07
     bc2:	42 17       	cp	r20, r18
     bc4:	53 07       	cpc	r21, r19
     bc6:	e0 f4       	brcc	.+56     	; 0xc00 <qtm_key_sensors_process+0x17a>
     bc8:	24 1b       	sub	r18, r20
     bca:	35 0b       	sbc	r19, r21
     bcc:	dc 01       	movw	r26, r24
     bce:	aa 0d       	add	r26, r10
     bd0:	bb 1d       	adc	r27, r11
     bd2:	8c 91       	ld	r24, X
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	05 80       	ldd	r0, Z+5	; 0x05
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <qtm_key_sensors_process+0x158>
     bda:	95 95       	asr	r25
     bdc:	87 95       	ror	r24
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <qtm_key_sensors_process+0x154>
     be2:	99 27       	eor	r25, r25
     be4:	28 17       	cp	r18, r24
     be6:	39 07       	cpc	r19, r25
     be8:	08 f4       	brcc	.+2      	; 0xbec <qtm_key_sensors_process+0x166>
     bea:	19 c1       	rjmp	.+562    	; 0xe1e <qtm_key_sensors_process+0x398>
     bec:	84 81       	ldd	r24, Z+4	; 0x04
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <qtm_key_sensors_process+0x16e>
     bf2:	15 c1       	rjmp	.+554    	; 0xe1e <qtm_key_sensors_process+0x398>
     bf4:	f8 01       	movw	r30, r16
     bf6:	30 82       	st	Z, r3
     bf8:	ea 81       	ldd	r30, Y+2	; 0x02
     bfa:	fb 81       	ldd	r31, Y+3	; 0x03
     bfc:	24 81       	ldd	r18, Z+4	; 0x04
     bfe:	19 c0       	rjmp	.+50     	; 0xc32 <qtm_key_sensors_process+0x1ac>
     c00:	fc 01       	movw	r30, r24
     c02:	ea 0d       	add	r30, r10
     c04:	fb 1d       	adc	r31, r11
     c06:	42 1b       	sub	r20, r18
     c08:	53 0b       	sbc	r21, r19
     c0a:	80 81       	ld	r24, Z
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	48 17       	cp	r20, r24
     c10:	59 07       	cpc	r21, r25
     c12:	08 f4       	brcc	.+2      	; 0xc16 <qtm_key_sensors_process+0x190>
     c14:	04 c1       	rjmp	.+520    	; 0xe1e <qtm_key_sensors_process+0x398>
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	88 23       	and	r24, r24
     c1a:	29 f0       	breq	.+10     	; 0xc26 <qtm_key_sensors_process+0x1a0>
     c1c:	b4 01       	movw	r22, r8
     c1e:	ce 01       	movw	r24, r28
     c20:	9f de       	rcall	.-706    	; 0x960 <check_for_aks_block>
     c22:	81 11       	cpse	r24, r1
     c24:	fc c0       	rjmp	.+504    	; 0xe1e <qtm_key_sensors_process+0x398>
     c26:	e4 e0       	ldi	r30, 0x04	; 4
     c28:	d8 01       	movw	r26, r16
     c2a:	ec 93       	st	X, r30
     c2c:	ea 81       	ldd	r30, Y+2	; 0x02
     c2e:	fb 81       	ldd	r31, Y+3	; 0x03
     c30:	22 81       	ldd	r18, Z+2	; 0x02
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	9d 81       	ldd	r25, Y+5	; 0x05
     c36:	fc 01       	movw	r30, r24
     c38:	ee 0d       	add	r30, r14
     c3a:	ff 1d       	adc	r31, r15
     c3c:	21 83       	std	Z+1, r18	; 0x01
     c3e:	e1 c0       	rjmp	.+450    	; 0xe02 <qtm_key_sensors_process+0x37c>
     c40:	d8 01       	movw	r26, r16
     c42:	14 96       	adiw	r26, 0x04	; 4
     c44:	2d 91       	ld	r18, X+
     c46:	3c 91       	ld	r19, X
     c48:	15 97       	sbiw	r26, 0x05	; 5
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	ed 91       	ld	r30, X+
     c4e:	fc 91       	ld	r31, X
     c50:	13 97       	sbiw	r26, 0x03	; 3
     c52:	81 81       	ldd	r24, Z+1	; 0x01
     c54:	92 81       	ldd	r25, Z+2	; 0x02
     c56:	82 17       	cp	r24, r18
     c58:	93 07       	cpc	r25, r19
     c5a:	08 f4       	brcc	.+2      	; 0xc5e <qtm_key_sensors_process+0x1d8>
     c5c:	d6 c0       	rjmp	.+428    	; 0xe0a <qtm_key_sensors_process+0x384>
     c5e:	ee 81       	ldd	r30, Y+6	; 0x06
     c60:	ff 81       	ldd	r31, Y+7	; 0x07
     c62:	ea 0d       	add	r30, r10
     c64:	fb 1d       	adc	r31, r11
     c66:	82 1b       	sub	r24, r18
     c68:	93 0b       	sbc	r25, r19
     c6a:	20 81       	ld	r18, Z
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	08 f0       	brcs	.+2      	; 0xc76 <qtm_key_sensors_process+0x1f0>
     c74:	ae c0       	rjmp	.+348    	; 0xdd2 <qtm_key_sensors_process+0x34c>
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	88 23       	and	r24, r24
     c7a:	29 f0       	breq	.+10     	; 0xc86 <qtm_key_sensors_process+0x200>
     c7c:	b4 01       	movw	r22, r8
     c7e:	ce 01       	movw	r24, r28
     c80:	6f de       	rcall	.-802    	; 0x960 <check_for_aks_block>
     c82:	81 11       	cpse	r24, r1
     c84:	cc c0       	rjmp	.+408    	; 0xe1e <qtm_key_sensors_process+0x398>
     c86:	f8 01       	movw	r30, r16
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	88 23       	and	r24, r24
     c8c:	09 f4       	brne	.+2      	; 0xc90 <qtm_key_sensors_process+0x20a>
     c8e:	67 c0       	rjmp	.+206    	; 0xd5e <qtm_key_sensors_process+0x2d8>
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	b6 c0       	rjmp	.+364    	; 0xe00 <qtm_key_sensors_process+0x37a>
     c94:	a8 81       	ld	r26, Y
     c96:	b9 81       	ldd	r27, Y+1	; 0x01
     c98:	80 85       	ldd	r24, Z+8	; 0x08
     c9a:	13 96       	adiw	r26, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	ec 81       	ldd	r30, Y+4	; 0x04
     ca0:	fd 81       	ldd	r31, Y+5	; 0x05
     ca2:	ee 0d       	add	r30, r14
     ca4:	ff 1d       	adc	r31, r15
     ca6:	44 81       	ldd	r20, Z+4	; 0x04
     ca8:	55 81       	ldd	r21, Z+5	; 0x05
     caa:	a2 81       	ldd	r26, Z+2	; 0x02
     cac:	b3 81       	ldd	r27, Z+3	; 0x03
     cae:	11 96       	adiw	r26, 0x01	; 1
     cb0:	8d 91       	ld	r24, X+
     cb2:	9c 91       	ld	r25, X
     cb4:	12 97       	sbiw	r26, 0x02	; 2
     cb6:	84 17       	cp	r24, r20
     cb8:	95 07       	cpc	r25, r21
     cba:	c0 f0       	brcs	.+48     	; 0xcec <qtm_key_sensors_process+0x266>
     cbc:	ae 81       	ldd	r26, Y+6	; 0x06
     cbe:	bf 81       	ldd	r27, Y+7	; 0x07
     cc0:	aa 0d       	add	r26, r10
     cc2:	bb 1d       	adc	r27, r11
     cc4:	6c 91       	ld	r22, X
     cc6:	26 2f       	mov	r18, r22
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	7c 91       	ld	r23, X
     cce:	7f 5f       	subi	r23, 0xFF	; 255
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <qtm_key_sensors_process+0x250>
     cd2:	35 95       	asr	r19
     cd4:	27 95       	ror	r18
     cd6:	7a 95       	dec	r23
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <qtm_key_sensors_process+0x24c>
     cda:	84 1b       	sub	r24, r20
     cdc:	95 0b       	sbc	r25, r21
     cde:	62 1b       	sub	r22, r18
     ce0:	26 2f       	mov	r18, r22
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	28 17       	cp	r18, r24
     ce6:	39 07       	cpc	r19, r25
     ce8:	08 f4       	brcc	.+2      	; 0xcec <qtm_key_sensors_process+0x266>
     cea:	97 c0       	rjmp	.+302    	; 0xe1a <qtm_key_sensors_process+0x394>
     cec:	70 82       	st	Z, r7
     cee:	ea 81       	ldd	r30, Y+2	; 0x02
     cf0:	fb 81       	ldd	r31, Y+3	; 0x03
     cf2:	22 81       	ldd	r18, Z+2	; 0x02
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	9d 81       	ldd	r25, Y+5	; 0x05
     cf8:	fc 01       	movw	r30, r24
     cfa:	ee 0d       	add	r30, r14
     cfc:	ff 1d       	adc	r31, r15
     cfe:	21 83       	std	Z+1, r18	; 0x01
     d00:	42 c0       	rjmp	.+132    	; 0xd86 <qtm_key_sensors_process+0x300>
     d02:	d8 01       	movw	r26, r16
     d04:	14 96       	adiw	r26, 0x04	; 4
     d06:	6d 91       	ld	r22, X+
     d08:	7c 91       	ld	r23, X
     d0a:	15 97       	sbiw	r26, 0x05	; 5
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	ed 91       	ld	r30, X+
     d10:	fc 91       	ld	r31, X
     d12:	13 97       	sbiw	r26, 0x03	; 3
     d14:	21 81       	ldd	r18, Z+1	; 0x01
     d16:	32 81       	ldd	r19, Z+2	; 0x02
     d18:	26 17       	cp	r18, r22
     d1a:	37 07       	cpc	r19, r23
     d1c:	58 f4       	brcc	.+22     	; 0xd34 <qtm_key_sensors_process+0x2ae>
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	8c 91       	ld	r24, X
     d22:	11 97       	sbiw	r26, 0x01	; 1
     d24:	81 11       	cpse	r24, r1
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <qtm_key_sensors_process+0x2a6>
     d28:	cc 92       	st	X, r12
     d2a:	77 c0       	rjmp	.+238    	; 0xe1a <qtm_key_sensors_process+0x394>
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	f8 01       	movw	r30, r16
     d30:	81 83       	std	Z+1, r24	; 0x01
     d32:	73 c0       	rjmp	.+230    	; 0xe1a <qtm_key_sensors_process+0x394>
     d34:	ee 81       	ldd	r30, Y+6	; 0x06
     d36:	ff 81       	ldd	r31, Y+7	; 0x07
     d38:	ea 0d       	add	r30, r10
     d3a:	fb 1d       	adc	r31, r11
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	91 81       	ldd	r25, Z+1	; 0x01
     d44:	9f 5f       	subi	r25, 0xFF	; 255
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <qtm_key_sensors_process+0x2c6>
     d48:	55 95       	asr	r21
     d4a:	47 95       	ror	r20
     d4c:	9a 95       	dec	r25
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <qtm_key_sensors_process+0x2c2>
     d50:	26 1b       	sub	r18, r22
     d52:	37 0b       	sbc	r19, r23
     d54:	84 1b       	sub	r24, r20
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	82 17       	cp	r24, r18
     d5a:	93 07       	cpc	r25, r19
     d5c:	60 f4       	brcc	.+24     	; 0xd76 <qtm_key_sensors_process+0x2f0>
     d5e:	d8 01       	movw	r26, r16
     d60:	6c 92       	st	X, r6
     d62:	ea 81       	ldd	r30, Y+2	; 0x02
     d64:	fb 81       	ldd	r31, Y+3	; 0x03
     d66:	23 81       	ldd	r18, Z+3	; 0x03
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	fc 01       	movw	r30, r24
     d6e:	ee 0d       	add	r30, r14
     d70:	ff 1d       	adc	r31, r15
     d72:	21 83       	std	Z+1, r18	; 0x01
     d74:	52 c0       	rjmp	.+164    	; 0xe1a <qtm_key_sensors_process+0x394>
     d76:	f8 01       	movw	r30, r16
     d78:	81 81       	ldd	r24, Z+1	; 0x01
     d7a:	81 11       	cpse	r24, r1
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <qtm_key_sensors_process+0x2fc>
     d7e:	c0 82       	st	Z, r12
     d80:	4c c0       	rjmp	.+152    	; 0xe1a <qtm_key_sensors_process+0x394>
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	81 83       	std	Z+1, r24	; 0x01
     d86:	22 24       	eor	r2, r2
     d88:	23 94       	inc	r2
     d8a:	3b c0       	rjmp	.+118    	; 0xe02 <qtm_key_sensors_process+0x37c>
     d8c:	d8 01       	movw	r26, r16
     d8e:	14 96       	adiw	r26, 0x04	; 4
     d90:	2d 91       	ld	r18, X+
     d92:	3c 91       	ld	r19, X
     d94:	15 97       	sbiw	r26, 0x05	; 5
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	8d 91       	ld	r24, X+
     d9a:	9c 91       	ld	r25, X
     d9c:	13 97       	sbiw	r26, 0x03	; 3
     d9e:	dc 01       	movw	r26, r24
     da0:	11 96       	adiw	r26, 0x01	; 1
     da2:	8d 91       	ld	r24, X+
     da4:	9c 91       	ld	r25, X
     da6:	12 97       	sbiw	r26, 0x02	; 2
     da8:	82 17       	cp	r24, r18
     daa:	93 07       	cpc	r25, r19
     dac:	68 f5       	brcc	.+90     	; 0xe08 <qtm_key_sensors_process+0x382>
     dae:	28 1b       	sub	r18, r24
     db0:	39 0b       	sbc	r19, r25
     db2:	ae 81       	ldd	r26, Y+6	; 0x06
     db4:	bf 81       	ldd	r27, Y+7	; 0x07
     db6:	aa 0d       	add	r26, r10
     db8:	bb 1d       	adc	r27, r11
     dba:	8c 91       	ld	r24, X
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	05 80       	ldd	r0, Z+5	; 0x05
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <qtm_key_sensors_process+0x340>
     dc2:	95 95       	asr	r25
     dc4:	87 95       	ror	r24
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <qtm_key_sensors_process+0x33c>
     dca:	99 27       	eor	r25, r25
     dcc:	28 17       	cp	r18, r24
     dce:	39 07       	cpc	r19, r25
     dd0:	18 f4       	brcc	.+6      	; 0xdd8 <qtm_key_sensors_process+0x352>
     dd2:	f8 01       	movw	r30, r16
     dd4:	c0 82       	st	Z, r12
     dd6:	1a c0       	rjmp	.+52     	; 0xe0c <qtm_key_sensors_process+0x386>
     dd8:	d8 01       	movw	r26, r16
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	8c 91       	ld	r24, X
     dde:	11 97       	sbiw	r26, 0x01	; 1
     de0:	81 11       	cpse	r24, r1
     de2:	0c c0       	rjmp	.+24     	; 0xdfc <qtm_key_sensors_process+0x376>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	8c 93       	st	X, r24
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	fc 01       	movw	r30, r24
     dee:	ee 0d       	add	r30, r14
     df0:	ff 1d       	adc	r31, r15
     df2:	02 80       	ldd	r0, Z+2	; 0x02
     df4:	f3 81       	ldd	r31, Z+3	; 0x03
     df6:	e0 2d       	mov	r30, r0
     df8:	c0 82       	st	Z, r12
     dfa:	11 c0       	rjmp	.+34     	; 0xe1e <qtm_key_sensors_process+0x398>
     dfc:	81 50       	subi	r24, 0x01	; 1
     dfe:	f8 01       	movw	r30, r16
     e00:	81 83       	std	Z+1, r24	; 0x01
     e02:	dd 24       	eor	r13, r13
     e04:	d3 94       	inc	r13
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <qtm_key_sensors_process+0x398>
     e08:	d8 01       	movw	r26, r16
     e0a:	cc 92       	st	X, r12
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	fc 01       	movw	r30, r24
     e12:	ee 0d       	add	r30, r14
     e14:	ff 1d       	adc	r31, r15
     e16:	11 82       	std	Z+1, r1	; 0x01
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <qtm_key_sensors_process+0x398>
     e1a:	22 24       	eor	r2, r2
     e1c:	23 94       	inc	r2
     e1e:	bf ef       	ldi	r27, 0xFF	; 255
     e20:	8b 1a       	sub	r8, r27
     e22:	9b 0a       	sbc	r9, r27
     e24:	e3 e0       	ldi	r30, 0x03	; 3
     e26:	ae 0e       	add	r10, r30
     e28:	b1 1c       	adc	r11, r1
     e2a:	55 ce       	rjmp	.-854    	; 0xad6 <qtm_key_sensors_process+0x50>
     e2c:	e8 81       	ld	r30, Y
     e2e:	f9 81       	ldd	r31, Y+1	; 0x01
     e30:	80 81       	ld	r24, Z
     e32:	87 ff       	sbrs	r24, 7
     e34:	23 c0       	rjmp	.+70     	; 0xe7c <qtm_key_sensors_process+0x3f6>
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	ea 81       	ldd	r30, Y+2	; 0x02
     e40:	fb 81       	ldd	r31, Y+3	; 0x03
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	28 17       	cp	r18, r24
     e48:	39 07       	cpc	r19, r25
     e4a:	98 f4       	brcc	.+38     	; 0xe72 <qtm_key_sensors_process+0x3ec>
     e4c:	ec 81       	ldd	r30, Y+4	; 0x04
     e4e:	fd 81       	ldd	r31, Y+5	; 0x05
     e50:	e4 0f       	add	r30, r20
     e52:	f5 1f       	adc	r31, r21
     e54:	a2 81       	ldd	r26, Z+2	; 0x02
     e56:	b3 81       	ldd	r27, Z+3	; 0x03
     e58:	8c 91       	ld	r24, X
     e5a:	80 fd       	sbrc	r24, 0
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <qtm_key_sensors_process+0x3e2>
     e5e:	90 81       	ld	r25, Z
     e60:	97 7f       	andi	r25, 0xF7	; 247
     e62:	11 f0       	breq	.+4      	; 0xe68 <qtm_key_sensors_process+0x3e2>
     e64:	81 60       	ori	r24, 0x01	; 1
     e66:	8c 93       	st	X, r24
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	4a 5f       	subi	r20, 0xFA	; 250
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	e6 cf       	rjmp	.-52     	; 0xe3e <qtm_key_sensors_process+0x3b8>
     e72:	e8 81       	ld	r30, Y
     e74:	f9 81       	ldd	r31, Y+1	; 0x01
     e76:	80 81       	ld	r24, Z
     e78:	8f 77       	andi	r24, 0x7F	; 127
     e7a:	80 83       	st	Z, r24
     e7c:	d1 10       	cpse	r13, r1
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <qtm_key_sensors_process+0x408>
     e80:	e8 81       	ld	r30, Y
     e82:	f9 81       	ldd	r31, Y+1	; 0x01
     e84:	21 10       	cpse	r2, r1
     e86:	6f c0       	rjmp	.+222    	; 0xf66 <qtm_key_sensors_process+0x4e0>
     e88:	80 81       	ld	r24, Z
     e8a:	8e 7f       	andi	r24, 0xFE	; 254
     e8c:	6e c0       	rjmp	.+220    	; 0xf6a <qtm_key_sensors_process+0x4e4>
     e8e:	ea 81       	ldd	r30, Y+2	; 0x02
     e90:	fb 81       	ldd	r31, Y+3	; 0x03
     e92:	81 85       	ldd	r24, Z+9	; 0x09
     e94:	88 23       	and	r24, r24
     e96:	a1 f3       	breq	.-24     	; 0xe80 <qtm_key_sensors_process+0x3fa>
     e98:	e8 81       	ld	r30, Y
     e9a:	f9 81       	ldd	r31, Y+1	; 0x01
     e9c:	80 81       	ld	r24, Z
     e9e:	80 68       	ori	r24, 0x80	; 128
     ea0:	80 83       	st	Z, r24
     ea2:	ea 81       	ldd	r30, Y+2	; 0x02
     ea4:	fb 81       	ldd	r31, Y+3	; 0x03
     ea6:	81 85       	ldd	r24, Z+9	; 0x09
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	51 f7       	brne	.-44     	; 0xe80 <qtm_key_sensors_process+0x3fa>
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	96 e0       	ldi	r25, 0x06	; 6
     eb6:	d9 2e       	mov	r13, r25
     eb8:	ea 81       	ldd	r30, Y+2	; 0x02
     eba:	fb 81       	ldd	r31, Y+3	; 0x03
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	26 17       	cp	r18, r22
     ec2:	37 07       	cpc	r19, r23
     ec4:	e8 f6       	brcc	.-70     	; 0xe80 <qtm_key_sensors_process+0x3fa>
     ec6:	0c 81       	ldd	r16, Y+4	; 0x04
     ec8:	1d 81       	ldd	r17, Y+5	; 0x05
     eca:	fa 01       	movw	r30, r20
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	e0 0f       	add	r30, r16
     ed2:	f1 1f       	adc	r31, r17
     ed4:	80 81       	ld	r24, Z
     ed6:	98 2f       	mov	r25, r24
     ed8:	97 7f       	andi	r25, 0xF7	; 247
     eda:	a1 f1       	breq	.+104    	; 0xf44 <qtm_key_sensors_process+0x4be>
     edc:	85 38       	cpi	r24, 0x85	; 133
     ede:	11 f0       	breq	.+4      	; 0xee4 <qtm_key_sensors_process+0x45e>
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	b1 f5       	brne	.+108    	; 0xf50 <qtm_key_sensors_process+0x4ca>
     ee4:	ee 80       	ldd	r14, Y+6	; 0x06
     ee6:	ff 80       	ldd	r15, Y+7	; 0x07
     ee8:	d7 01       	movw	r26, r14
     eea:	a4 0f       	add	r26, r20
     eec:	b5 1f       	adc	r27, r21
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	bc 90       	ld	r11, X
     ef2:	bb 20       	and	r11, r11
     ef4:	39 f1       	breq	.+78     	; 0xf44 <qtm_key_sensors_process+0x4be>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	c1 2c       	mov	r12, r1
     efc:	86 17       	cp	r24, r22
     efe:	97 07       	cpc	r25, r23
     f00:	f8 f4       	brcc	.+62     	; 0xf40 <qtm_key_sensors_process+0x4ba>
     f02:	28 17       	cp	r18, r24
     f04:	39 07       	cpc	r19, r25
     f06:	d1 f0       	breq	.+52     	; 0xf3c <qtm_key_sensors_process+0x4b6>
     f08:	d8 9e       	mul	r13, r24
     f0a:	d0 01       	movw	r26, r0
     f0c:	d9 9e       	mul	r13, r25
     f0e:	b0 0d       	add	r27, r0
     f10:	11 24       	eor	r1, r1
     f12:	a0 0f       	add	r26, r16
     f14:	b1 1f       	adc	r27, r17
     f16:	ac 91       	ld	r26, X
     f18:	a4 30       	cpi	r26, 0x04	; 4
     f1a:	11 f0       	breq	.+4      	; 0xf20 <qtm_key_sensors_process+0x49a>
     f1c:	a6 38       	cpi	r26, 0x86	; 134
     f1e:	71 f4       	brne	.+28     	; 0xf3c <qtm_key_sensors_process+0x4b6>
     f20:	dc 01       	movw	r26, r24
     f22:	aa 0f       	add	r26, r26
     f24:	bb 1f       	adc	r27, r27
     f26:	a8 0f       	add	r26, r24
     f28:	b9 1f       	adc	r27, r25
     f2a:	ae 0d       	add	r26, r14
     f2c:	bf 1d       	adc	r27, r15
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	ac 91       	ld	r26, X
     f32:	ba 12       	cpse	r11, r26
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <qtm_key_sensors_process+0x4b6>
     f36:	cb 01       	movw	r24, r22
     f38:	cc 24       	eor	r12, r12
     f3a:	c3 94       	inc	r12
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	de cf       	rjmp	.-68     	; 0xefc <qtm_key_sensors_process+0x476>
     f40:	c1 10       	cpse	r12, r1
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <qtm_key_sensors_process+0x4ca>
     f44:	02 80       	ldd	r0, Z+2	; 0x02
     f46:	f3 81       	ldd	r31, Z+3	; 0x03
     f48:	e0 2d       	mov	r30, r0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <qtm_key_sensors_process+0x4d4>
     f50:	02 80       	ldd	r0, Z+2	; 0x02
     f52:	f3 81       	ldd	r31, Z+3	; 0x03
     f54:	e0 2d       	mov	r30, r0
     f56:	80 81       	ld	r24, Z
     f58:	81 60       	ori	r24, 0x01	; 1
     f5a:	80 83       	st	Z, r24
     f5c:	2f 5f       	subi	r18, 0xFF	; 255
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	4d 5f       	subi	r20, 0xFD	; 253
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	a9 cf       	rjmp	.-174    	; 0xeb8 <qtm_key_sensors_process+0x432>
     f66:	80 81       	ld	r24, Z
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	80 83       	st	Z, r24
     f6c:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <qtm_local_ms_timecount>
     f70:	90 91 69 3e 	lds	r25, 0x3E69	; 0x803e69 <qtm_local_ms_timecount+0x1>
     f74:	e8 81       	ld	r30, Y
     f76:	f9 81       	ldd	r31, Y+1	; 0x01
     f78:	21 81       	ldd	r18, Z+1	; 0x01
     f7a:	32 81       	ldd	r19, Z+2	; 0x02
     f7c:	a9 01       	movw	r20, r18
     f7e:	48 53       	subi	r20, 0x38	; 56
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	48 17       	cp	r20, r24
     f84:	59 07       	cpc	r21, r25
     f86:	38 f4       	brcc	.+14     	; 0xf96 <qtm_key_sensors_process+0x510>
     f88:	82 1b       	sub	r24, r18
     f8a:	93 0b       	sbc	r25, r19
     f8c:	aa 24       	eor	r10, r10
     f8e:	a3 94       	inc	r10
     f90:	a3 e0       	ldi	r26, 0x03	; 3
     f92:	ba 2e       	mov	r11, r26
     f94:	44 c0       	rjmp	.+136    	; 0x101e <qtm_key_sensors_process+0x598>
     f96:	82 17       	cp	r24, r18
     f98:	93 07       	cpc	r25, r19
     f9a:	10 f0       	brcs	.+4      	; 0xfa0 <qtm_key_sensors_process+0x51a>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	04 c1       	rjmp	.+520    	; 0x11a8 <qtm_key_sensors_process+0x722>
     fa0:	82 1b       	sub	r24, r18
     fa2:	93 0b       	sbc	r25, r19
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	89 3c       	cpi	r24, 0xC9	; 201
     fa8:	91 05       	cpc	r25, r1
     faa:	c0 f3       	brcs	.-16     	; 0xf9c <qtm_key_sensors_process+0x516>
     fac:	ef cf       	rjmp	.-34     	; 0xf8c <qtm_key_sensors_process+0x506>
     fae:	88 5c       	subi	r24, 0xC8	; 200
     fb0:	91 09       	sbc	r25, r1
     fb2:	e8 81       	ld	r30, Y
     fb4:	f9 81       	ldd	r31, Y+1	; 0x01
     fb6:	21 81       	ldd	r18, Z+1	; 0x01
     fb8:	32 81       	ldd	r19, Z+2	; 0x02
     fba:	28 53       	subi	r18, 0x38	; 56
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	21 83       	std	Z+1, r18	; 0x01
     fc0:	32 83       	std	Z+2, r19	; 0x02
     fc2:	23 81       	ldd	r18, Z+3	; 0x03
     fc4:	21 11       	cpse	r18, r1
     fc6:	96 c0       	rjmp	.+300    	; 0x10f4 <qtm_key_sensors_process+0x66e>
     fc8:	24 81       	ldd	r18, Z+4	; 0x04
     fca:	22 23       	and	r18, r18
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <qtm_key_sensors_process+0x54c>
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	24 83       	std	Z+4, r18	; 0x04
     fd2:	e8 81       	ld	r30, Y
     fd4:	f9 81       	ldd	r31, Y+1	; 0x01
     fd6:	25 81       	ldd	r18, Z+5	; 0x05
     fd8:	22 23       	and	r18, r18
     fda:	11 f0       	breq	.+4      	; 0xfe0 <qtm_key_sensors_process+0x55a>
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	25 83       	std	Z+5, r18	; 0x05
     fe0:	8a 80       	ldd	r8, Y+2	; 0x02
     fe2:	9b 80       	ldd	r9, Y+3	; 0x03
     fe4:	d4 01       	movw	r26, r8
     fe6:	16 96       	adiw	r26, 0x06	; 6
     fe8:	2c 91       	ld	r18, X
     fea:	16 97       	sbiw	r26, 0x06	; 6
     fec:	21 11       	cpse	r18, r1
     fee:	1b c0       	rjmp	.+54     	; 0x1026 <qtm_key_sensors_process+0x5a0>
     ff0:	8a 80       	ldd	r8, Y+2	; 0x02
     ff2:	9b 80       	ldd	r9, Y+3	; 0x03
     ff4:	f4 01       	movw	r30, r8
     ff6:	27 81       	ldd	r18, Z+7	; 0x07
     ff8:	21 11       	cpse	r18, r1
     ffa:	48 c0       	rjmp	.+144    	; 0x108c <qtm_key_sensors_process+0x606>
     ffc:	ea 81       	ldd	r30, Y+2	; 0x02
     ffe:	fb 81       	ldd	r31, Y+3	; 0x03
    1000:	23 81       	ldd	r18, Z+3	; 0x03
    1002:	22 23       	and	r18, r18
    1004:	61 f0       	breq	.+24     	; 0x101e <qtm_key_sensors_process+0x598>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ea 81       	ldd	r30, Y+2	; 0x02
    1010:	fb 81       	ldd	r31, Y+3	; 0x03
    1012:	40 81       	ld	r20, Z
    1014:	51 81       	ldd	r21, Z+1	; 0x01
    1016:	a4 17       	cp	r26, r20
    1018:	b5 07       	cpc	r27, r21
    101a:	08 f4       	brcc	.+2      	; 0x101e <qtm_key_sensors_process+0x598>
    101c:	6e c0       	rjmp	.+220    	; 0x10fa <qtm_key_sensors_process+0x674>
    101e:	89 3c       	cpi	r24, 0xC9	; 201
    1020:	91 05       	cpc	r25, r1
    1022:	28 f6       	brcc	.-118    	; 0xfae <qtm_key_sensors_process+0x528>
    1024:	bb cf       	rjmp	.-138    	; 0xf9c <qtm_key_sensors_process+0x516>
    1026:	08 81       	ld	r16, Y
    1028:	19 81       	ldd	r17, Y+1	; 0x01
    102a:	f8 01       	movw	r30, r16
    102c:	24 81       	ldd	r18, Z+4	; 0x04
    102e:	21 11       	cpse	r18, r1
    1030:	df cf       	rjmp	.-66     	; 0xff0 <qtm_key_sensors_process+0x56a>
    1032:	ed 90       	ld	r14, X+
    1034:	fc 90       	ld	r15, X
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	4e 15       	cp	r20, r14
    1040:	5f 05       	cpc	r21, r15
    1042:	f1 f0       	breq	.+60     	; 0x1080 <qtm_key_sensors_process+0x5fa>
    1044:	ec 81       	ldd	r30, Y+4	; 0x04
    1046:	fd 81       	ldd	r31, Y+5	; 0x05
    1048:	e6 0f       	add	r30, r22
    104a:	f7 1f       	adc	r31, r23
    104c:	20 81       	ld	r18, Z
    104e:	23 30       	cpi	r18, 0x03	; 3
    1050:	11 f0       	breq	.+4      	; 0x1056 <qtm_key_sensors_process+0x5d0>
    1052:	28 30       	cpi	r18, 0x08	; 8
    1054:	81 f4       	brne	.+32     	; 0x1076 <qtm_key_sensors_process+0x5f0>
    1056:	24 81       	ldd	r18, Z+4	; 0x04
    1058:	35 81       	ldd	r19, Z+5	; 0x05
    105a:	c2 80       	ldd	r12, Z+2	; 0x02
    105c:	d3 80       	ldd	r13, Z+3	; 0x03
    105e:	d6 01       	movw	r26, r12
    1060:	11 96       	adiw	r26, 0x01	; 1
    1062:	cd 90       	ld	r12, X+
    1064:	dc 90       	ld	r13, X
    1066:	12 97       	sbiw	r26, 0x02	; 2
    1068:	2c 15       	cp	r18, r12
    106a:	3d 05       	cpc	r19, r13
    106c:	20 f4       	brcc	.+8      	; 0x1076 <qtm_key_sensors_process+0x5f0>
    106e:	2f 5f       	subi	r18, 0xFF	; 255
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	24 83       	std	Z+4, r18	; 0x04
    1074:	35 83       	std	Z+5, r19	; 0x05
    1076:	4f 5f       	subi	r20, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	6a 5f       	subi	r22, 0xFA	; 250
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	df cf       	rjmp	.-66     	; 0x103e <qtm_key_sensors_process+0x5b8>
    1080:	f4 01       	movw	r30, r8
    1082:	26 81       	ldd	r18, Z+6	; 0x06
    1084:	d8 01       	movw	r26, r16
    1086:	14 96       	adiw	r26, 0x04	; 4
    1088:	2c 93       	st	X, r18
    108a:	b2 cf       	rjmp	.-156    	; 0xff0 <qtm_key_sensors_process+0x56a>
    108c:	08 81       	ld	r16, Y
    108e:	19 81       	ldd	r17, Y+1	; 0x01
    1090:	d8 01       	movw	r26, r16
    1092:	15 96       	adiw	r26, 0x05	; 5
    1094:	2c 91       	ld	r18, X
    1096:	21 11       	cpse	r18, r1
    1098:	b1 cf       	rjmp	.-158    	; 0xffc <qtm_key_sensors_process+0x576>
    109a:	e0 80       	ld	r14, Z
    109c:	f1 80       	ldd	r15, Z+1	; 0x01
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	4e 15       	cp	r20, r14
    10a8:	5f 05       	cpc	r21, r15
    10aa:	f1 f0       	breq	.+60     	; 0x10e8 <qtm_key_sensors_process+0x662>
    10ac:	ec 81       	ldd	r30, Y+4	; 0x04
    10ae:	fd 81       	ldd	r31, Y+5	; 0x05
    10b0:	e6 0f       	add	r30, r22
    10b2:	f7 1f       	adc	r31, r23
    10b4:	20 81       	ld	r18, Z
    10b6:	23 30       	cpi	r18, 0x03	; 3
    10b8:	11 f0       	breq	.+4      	; 0x10be <qtm_key_sensors_process+0x638>
    10ba:	28 30       	cpi	r18, 0x08	; 8
    10bc:	81 f4       	brne	.+32     	; 0x10de <qtm_key_sensors_process+0x658>
    10be:	24 81       	ldd	r18, Z+4	; 0x04
    10c0:	35 81       	ldd	r19, Z+5	; 0x05
    10c2:	c2 80       	ldd	r12, Z+2	; 0x02
    10c4:	d3 80       	ldd	r13, Z+3	; 0x03
    10c6:	d6 01       	movw	r26, r12
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	cd 90       	ld	r12, X+
    10cc:	dc 90       	ld	r13, X
    10ce:	12 97       	sbiw	r26, 0x02	; 2
    10d0:	c2 16       	cp	r12, r18
    10d2:	d3 06       	cpc	r13, r19
    10d4:	20 f4       	brcc	.+8      	; 0x10de <qtm_key_sensors_process+0x658>
    10d6:	21 50       	subi	r18, 0x01	; 1
    10d8:	31 09       	sbc	r19, r1
    10da:	24 83       	std	Z+4, r18	; 0x04
    10dc:	35 83       	std	Z+5, r19	; 0x05
    10de:	4f 5f       	subi	r20, 0xFF	; 255
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	6a 5f       	subi	r22, 0xFA	; 250
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	df cf       	rjmp	.-66     	; 0x10a6 <qtm_key_sensors_process+0x620>
    10e8:	f4 01       	movw	r30, r8
    10ea:	27 81       	ldd	r18, Z+7	; 0x07
    10ec:	d8 01       	movw	r26, r16
    10ee:	15 96       	adiw	r26, 0x05	; 5
    10f0:	2c 93       	st	X, r18
    10f2:	84 cf       	rjmp	.-248    	; 0xffc <qtm_key_sensors_process+0x576>
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	23 83       	std	Z+3, r18	; 0x03
    10f8:	81 cf       	rjmp	.-254    	; 0xffc <qtm_key_sensors_process+0x576>
    10fa:	a9 01       	movw	r20, r18
    10fc:	44 0f       	add	r20, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	ec 81       	ldd	r30, Y+4	; 0x04
    1102:	fd 81       	ldd	r31, Y+5	; 0x05
    1104:	e4 0f       	add	r30, r20
    1106:	f5 1f       	adc	r31, r21
    1108:	60 81       	ld	r22, Z
    110a:	65 38       	cpi	r22, 0x85	; 133
    110c:	09 f0       	breq	.+2      	; 0x1110 <qtm_key_sensors_process+0x68a>
    110e:	47 c0       	rjmp	.+142    	; 0x119e <qtm_key_sensors_process+0x718>
    1110:	61 81       	ldd	r22, Z+1	; 0x01
    1112:	66 23       	and	r22, r22
    1114:	19 f0       	breq	.+6      	; 0x111c <qtm_key_sensors_process+0x696>
    1116:	61 50       	subi	r22, 0x01	; 1
    1118:	61 83       	std	Z+1, r22	; 0x01
    111a:	41 c0       	rjmp	.+130    	; 0x119e <qtm_key_sensors_process+0x718>
    111c:	a0 82       	st	Z, r10
    111e:	6c 81       	ldd	r22, Y+4	; 0x04
    1120:	7d 81       	ldd	r23, Y+5	; 0x05
    1122:	fb 01       	movw	r30, r22
    1124:	e4 0f       	add	r30, r20
    1126:	f5 1f       	adc	r31, r21
    1128:	02 80       	ldd	r0, Z+2	; 0x02
    112a:	f3 81       	ldd	r31, Z+3	; 0x03
    112c:	e0 2d       	mov	r30, r0
    112e:	b0 82       	st	Z, r11
    1130:	ee 81       	ldd	r30, Y+6	; 0x06
    1132:	ff 81       	ldd	r31, Y+7	; 0x07
    1134:	e2 0f       	add	r30, r18
    1136:	f3 1f       	adc	r31, r19
    1138:	d2 80       	ldd	r13, Z+2	; 0x02
    113a:	dd 20       	and	r13, r13
    113c:	81 f1       	breq	.+96     	; 0x119e <qtm_key_sensors_process+0x718>
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	50 e0       	ldi	r21, 0x00	; 0
    1142:	00 e0       	ldi	r16, 0x00	; 0
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	ea 81       	ldd	r30, Y+2	; 0x02
    1148:	fb 81       	ldd	r31, Y+3	; 0x03
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	06 17       	cp	r16, r22
    1150:	17 07       	cpc	r17, r23
    1152:	28 f5       	brcc	.+74     	; 0x119e <qtm_key_sensors_process+0x718>
    1154:	ee 81       	ldd	r30, Y+6	; 0x06
    1156:	ff 81       	ldd	r31, Y+7	; 0x07
    1158:	e4 0f       	add	r30, r20
    115a:	f5 1f       	adc	r31, r21
    115c:	62 81       	ldd	r22, Z+2	; 0x02
    115e:	d6 12       	cpse	r13, r22
    1160:	19 c0       	rjmp	.+50     	; 0x1194 <qtm_key_sensors_process+0x70e>
    1162:	ba 01       	movw	r22, r20
    1164:	66 0f       	add	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	ec 81       	ldd	r30, Y+4	; 0x04
    116a:	fd 81       	ldd	r31, Y+5	; 0x05
    116c:	4f 01       	movw	r8, r30
    116e:	86 0e       	add	r8, r22
    1170:	97 1e       	adc	r9, r23
    1172:	f4 01       	movw	r30, r8
    1174:	e2 80       	ldd	r14, Z+2	; 0x02
    1176:	f3 80       	ldd	r15, Z+3	; 0x03
    1178:	f7 01       	movw	r30, r14
    117a:	f0 80       	ld	r15, Z
    117c:	f0 fe       	sbrs	r15, 0
    117e:	0a c0       	rjmp	.+20     	; 0x1194 <qtm_key_sensors_process+0x70e>
    1180:	f4 01       	movw	r30, r8
    1182:	a0 82       	st	Z, r10
    1184:	ec 81       	ldd	r30, Y+4	; 0x04
    1186:	fd 81       	ldd	r31, Y+5	; 0x05
    1188:	e6 0f       	add	r30, r22
    118a:	f7 1f       	adc	r31, r23
    118c:	02 80       	ldd	r0, Z+2	; 0x02
    118e:	f3 81       	ldd	r31, Z+3	; 0x03
    1190:	e0 2d       	mov	r30, r0
    1192:	b0 82       	st	Z, r11
    1194:	0f 5f       	subi	r16, 0xFF	; 255
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	4d 5f       	subi	r20, 0xFD	; 253
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	d4 cf       	rjmp	.-88     	; 0x1146 <qtm_key_sensors_process+0x6c0>
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	2d 5f       	subi	r18, 0xFD	; 253
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	34 cf       	rjmp	.-408    	; 0x100e <qtm_key_sensors_process+0x588>
    11a6:	8b e0       	ldi	r24, 0x0B	; 11
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	9f 90       	pop	r9
    11be:	8f 90       	pop	r8
    11c0:	7f 90       	pop	r7
    11c2:	6f 90       	pop	r6
    11c4:	5f 90       	pop	r5
    11c6:	4f 90       	pop	r4
    11c8:	3f 90       	pop	r3
    11ca:	2f 90       	pop	r2
    11cc:	08 95       	ret

000011ce <qtm_error_handler>:
    11ce:	95 e0       	ldi	r25, 0x05	; 5
    11d0:	90 93 6c 3e 	sts	0x3E6C, r25	; 0x803e6c <qtm_state>
    11d4:	e0 91 ac 3e 	lds	r30, 0x3EAC	; 0x803eac <qtm>
    11d8:	f0 91 ad 3e 	lds	r31, 0x3EAD	; 0x803ead <qtm+0x1>
    11dc:	01 88       	ldd	r0, Z+17	; 0x11
    11de:	f2 89       	ldd	r31, Z+18	; 0x12
    11e0:	e0 2d       	mov	r30, r0
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <qtm_error_handler+0x1a>
    11e6:	09 94       	ijmp
    11e8:	ff cf       	rjmp	.-2      	; 0x11e8 <qtm_error_handler+0x1a>

000011ea <generic_callback_function>:
    11ea:	e0 91 ac 3e 	lds	r30, 0x3EAC	; 0x803eac <qtm>
    11ee:	f0 91 ad 3e 	lds	r31, 0x3EAD	; 0x803ead <qtm+0x1>
    11f2:	03 88       	ldd	r0, Z+19	; 0x13
    11f4:	f4 89       	ldd	r31, Z+20	; 0x14
    11f6:	e0 2d       	mov	r30, r0
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	09 f0       	breq	.+2      	; 0x11fe <generic_callback_function+0x14>
    11fc:	09 94       	ijmp
    11fe:	80 e4       	ldi	r24, 0x40	; 64
    1200:	e6 cf       	rjmp	.-52     	; 0x11ce <qtm_error_handler>

00001202 <qmt_get_binding_layer_ptr>:
    1202:	80 91 ac 3e 	lds	r24, 0x3EAC	; 0x803eac <qtm>
    1206:	90 91 ad 3e 	lds	r25, 0x3EAD	; 0x803ead <qtm+0x1>
    120a:	08 95       	ret

0000120c <qtm_binding_layer_init>:
    120c:	cf 93       	push	r28
    120e:	80 93 ac 3e 	sts	0x3EAC, r24	; 0x803eac <qtm>
    1212:	90 93 ad 3e 	sts	0x3EAD, r25	; 0x803ead <qtm+0x1>
    1216:	80 91 6c 3e 	lds	r24, 0x3E6C	; 0x803e6c <qtm_state>
    121a:	85 30       	cpi	r24, 0x05	; 5
    121c:	39 f0       	breq	.+14     	; 0x122c <qtm_binding_layer_init+0x20>
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	28 f0       	brcs	.+10     	; 0x122c <qtm_binding_layer_init+0x20>
    1222:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    1226:	88 23       	and	r24, r24
    1228:	71 f1       	breq	.+92     	; 0x1286 <qtm_binding_layer_init+0x7a>
    122a:	40 c0       	rjmp	.+128    	; 0x12ac <qtm_binding_layer_init+0xa0>
    122c:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <errors>
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	a0 91 ac 3e 	lds	r26, 0x3EAC	; 0x803eac <qtm>
    1236:	b0 91 ad 3e 	lds	r27, 0x3EAD	; 0x803ead <qtm+0x1>
    123a:	8c 2f       	mov	r24, r28
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	11 96       	adiw	r26, 0x01	; 1
    1244:	ed 91       	ld	r30, X+
    1246:	fc 91       	ld	r31, X
    1248:	12 97       	sbiw	r26, 0x02	; 2
    124a:	e8 0f       	add	r30, r24
    124c:	f9 1f       	adc	r31, r25
    124e:	01 90       	ld	r0, Z+
    1250:	f0 81       	ld	r31, Z
    1252:	e0 2d       	mov	r30, r0
    1254:	30 97       	sbiw	r30, 0x00	; 0
    1256:	29 f3       	breq	.-54     	; 0x1222 <qtm_binding_layer_init+0x16>
    1258:	17 96       	adiw	r26, 0x07	; 7
    125a:	2d 91       	ld	r18, X+
    125c:	3c 91       	ld	r19, X
    125e:	18 97       	sbiw	r26, 0x08	; 8
    1260:	d9 01       	movw	r26, r18
    1262:	a8 0f       	add	r26, r24
    1264:	b9 1f       	adc	r27, r25
    1266:	8d 91       	ld	r24, X+
    1268:	9c 91       	ld	r25, X
    126a:	09 95       	icall
    126c:	88 23       	and	r24, r24
    126e:	29 f0       	breq	.+10     	; 0x127a <qtm_binding_layer_init+0x6e>
    1270:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    1274:	8f 5f       	subi	r24, 0xFF	; 255
    1276:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <errors>
    127a:	cf 5f       	subi	r28, 0xFF	; 255
    127c:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    1280:	88 23       	and	r24, r24
    1282:	b9 f2       	breq	.-82     	; 0x1232 <qtm_binding_layer_init+0x26>
    1284:	ce cf       	rjmp	.-100    	; 0x1222 <qtm_binding_layer_init+0x16>
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    128c:	e0 91 ac 3e 	lds	r30, 0x3EAC	; 0x803eac <qtm>
    1290:	f0 91 ad 3e 	lds	r31, 0x3EAD	; 0x803ead <qtm+0x1>
    1294:	07 84       	ldd	r0, Z+15	; 0x0f
    1296:	f0 89       	ldd	r31, Z+16	; 0x10
    1298:	e0 2d       	mov	r30, r0
    129a:	30 97       	sbiw	r30, 0x00	; 0
    129c:	11 f0       	breq	.+4      	; 0x12a2 <qtm_binding_layer_init+0x96>
    129e:	09 95       	icall
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <qtm_binding_layer_init+0xa6>
    12a2:	85 e0       	ldi	r24, 0x05	; 5
    12a4:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <qtm_binding_layer_init+0xa2>
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <errors>
    12b2:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    12b6:	88 23       	and	r24, r24
    12b8:	29 f0       	breq	.+10     	; 0x12c4 <qtm_binding_layer_init+0xb8>
    12ba:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <errors>
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	cf 91       	pop	r28
    12c2:	85 cf       	rjmp	.-246    	; 0x11ce <qtm_error_handler>
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <qtm_lib_start_acquisition>:
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	18 2f       	mov	r17, r24
    12d0:	a0 91 ac 3e 	lds	r26, 0x3EAC	; 0x803eac <qtm>
    12d4:	b0 91 ad 3e 	lds	r27, 0x3EAD	; 0x803ead <qtm+0x1>
    12d8:	15 96       	adiw	r26, 0x05	; 5
    12da:	2d 91       	ld	r18, X+
    12dc:	3c 91       	ld	r19, X
    12de:	16 97       	sbiw	r26, 0x06	; 6
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
    12e2:	f9 01       	movw	r30, r18
    12e4:	ed 0f       	add	r30, r29
    12e6:	f1 1d       	adc	r31, r1
    12e8:	ed 0f       	add	r30, r29
    12ea:	f1 1d       	adc	r31, r1
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	89 2b       	or	r24, r25
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <qtm_lib_start_acquisition+0x30>
    12f4:	df 5f       	subi	r29, 0xFF	; 255
    12f6:	f5 cf       	rjmp	.-22     	; 0x12e2 <qtm_lib_start_acquisition+0x1a>
    12f8:	53 96       	adiw	r26, 0x13	; 19
    12fa:	8d 91       	ld	r24, X+
    12fc:	9c 91       	ld	r25, X
    12fe:	54 97       	sbiw	r26, 0x14	; 20
    1300:	89 2b       	or	r24, r25
    1302:	49 f1       	breq	.+82     	; 0x1356 <qtm_lib_start_acquisition+0x8e>
    1304:	81 2f       	mov	r24, r17
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	f9 01       	movw	r30, r18
    130e:	e8 0f       	add	r30, r24
    1310:	f9 1f       	adc	r31, r25
    1312:	01 90       	ld	r0, Z+
    1314:	f0 81       	ld	r31, Z
    1316:	e0 2d       	mov	r30, r0
    1318:	30 97       	sbiw	r30, 0x00	; 0
    131a:	e9 f0       	breq	.+58     	; 0x1356 <qtm_lib_start_acquisition+0x8e>
    131c:	1b 96       	adiw	r26, 0x0b	; 11
    131e:	2d 91       	ld	r18, X+
    1320:	3c 91       	ld	r19, X
    1322:	1c 97       	sbiw	r26, 0x0c	; 12
    1324:	d9 01       	movw	r26, r18
    1326:	a8 0f       	add	r26, r24
    1328:	b9 1f       	adc	r27, r25
    132a:	8d 91       	ld	r24, X+
    132c:	9c 91       	ld	r25, X
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	91 f0       	breq	.+36     	; 0x1356 <qtm_lib_start_acquisition+0x8e>
    1332:	65 ef       	ldi	r22, 0xF5	; 245
    1334:	78 e0       	ldi	r23, 0x08	; 8
    1336:	09 95       	icall
    1338:	c8 2f       	mov	r28, r24
    133a:	81 11       	cpse	r24, r1
    133c:	06 c0       	rjmp	.+12     	; 0x134a <qtm_lib_start_acquisition+0x82>
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    1344:	10 92 6b 3e 	sts	0x3E6B, r1	; 0x803e6b <current_process_id>
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <qtm_lib_start_acquisition+0x88>
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    1350:	1d 17       	cp	r17, r29
    1352:	20 f0       	brcs	.+8      	; 0x135c <qtm_lib_start_acquisition+0x94>
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <qtm_lib_start_acquisition+0x90>
    1356:	c2 e0       	ldi	r28, 0x02	; 2
    1358:	82 e8       	ldi	r24, 0x82	; 130
    135a:	39 df       	rcall	.-398    	; 0x11ce <qtm_error_handler>
    135c:	8c 2f       	mov	r24, r28
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	08 95       	ret

00001366 <qtm_lib_acq_process>:
    1366:	e0 91 ac 3e 	lds	r30, 0x3EAC	; 0x803eac <qtm>
    136a:	f0 91 ad 3e 	lds	r31, 0x3EAD	; 0x803ead <qtm+0x1>
    136e:	05 84       	ldd	r0, Z+13	; 0x0d
    1370:	f6 85       	ldd	r31, Z+14	; 0x0e
    1372:	e0 2d       	mov	r30, r0
    1374:	09 94       	ijmp

00001376 <qtm_lib_post_process>:
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	1f 92       	push	r1
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	19 82       	std	Y+1, r1	; 0x01
    1384:	e0 91 ac 3e 	lds	r30, 0x3EAC	; 0x803eac <qtm>
    1388:	f0 91 ad 3e 	lds	r31, 0x3EAD	; 0x803ead <qtm+0x1>
    138c:	05 88       	ldd	r0, Z+21	; 0x15
    138e:	f6 89       	ldd	r31, Z+22	; 0x16
    1390:	e0 2d       	mov	r30, r0
    1392:	30 97       	sbiw	r30, 0x00	; 0
    1394:	49 f0       	breq	.+18     	; 0x13a8 <qtm_lib_post_process+0x32>
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	09 95       	icall
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    13a8:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    13ac:	81 11       	cpse	r24, r1
    13ae:	2c c0       	rjmp	.+88     	; 0x1408 <qtm_lib_post_process+0x92>
    13b0:	19 81       	ldd	r17, Y+1	; 0x01
    13b2:	11 11       	cpse	r17, r1
    13b4:	29 c0       	rjmp	.+82     	; 0x1408 <qtm_lib_post_process+0x92>
    13b6:	84 e0       	ldi	r24, 0x04	; 4
    13b8:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    13bc:	a0 91 ac 3e 	lds	r26, 0x3EAC	; 0x803eac <qtm>
    13c0:	b0 91 ad 3e 	lds	r27, 0x3EAD	; 0x803ead <qtm+0x1>
    13c4:	80 91 6b 3e 	lds	r24, 0x3E6B	; 0x803e6b <current_process_id>
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	13 96       	adiw	r26, 0x03	; 3
    13d0:	ed 91       	ld	r30, X+
    13d2:	fc 91       	ld	r31, X
    13d4:	14 97       	sbiw	r26, 0x04	; 4
    13d6:	e8 0f       	add	r30, r24
    13d8:	f9 1f       	adc	r31, r25
    13da:	01 90       	ld	r0, Z+
    13dc:	f0 81       	ld	r31, Z
    13de:	e0 2d       	mov	r30, r0
    13e0:	19 96       	adiw	r26, 0x09	; 9
    13e2:	2d 91       	ld	r18, X+
    13e4:	3c 91       	ld	r19, X
    13e6:	1a 97       	sbiw	r26, 0x0a	; 10
    13e8:	30 97       	sbiw	r30, 0x00	; 0
    13ea:	81 f0       	breq	.+32     	; 0x140c <qtm_lib_post_process+0x96>
    13ec:	d9 01       	movw	r26, r18
    13ee:	a8 0f       	add	r26, r24
    13f0:	b9 1f       	adc	r27, r25
    13f2:	8d 91       	ld	r24, X+
    13f4:	9c 91       	ld	r25, X
    13f6:	09 95       	icall
    13f8:	81 11       	cpse	r24, r1
    13fa:	3d c0       	rjmp	.+122    	; 0x1476 <qtm_lib_post_process+0x100>
    13fc:	80 91 6b 3e 	lds	r24, 0x3E6B	; 0x803e6b <current_process_id>
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	80 93 6b 3e 	sts	0x3E6B, r24	; 0x803e6b <current_process_id>
    1406:	da cf       	rjmp	.-76     	; 0x13bc <qtm_lib_post_process+0x46>
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	3c c0       	rjmp	.+120    	; 0x1484 <qtm_lib_post_process+0x10e>
    140c:	10 92 6b 3e 	sts	0x3E6B, r1	; 0x803e6b <current_process_id>
    1410:	f9 01       	movw	r30, r18
    1412:	e1 0f       	add	r30, r17
    1414:	f1 1d       	adc	r31, r1
    1416:	e1 0f       	add	r30, r17
    1418:	f1 1d       	adc	r31, r1
    141a:	01 90       	ld	r0, Z+
    141c:	f0 81       	ld	r31, Z
    141e:	e0 2d       	mov	r30, r0
    1420:	30 97       	sbiw	r30, 0x00	; 0
    1422:	59 f0       	breq	.+22     	; 0x143a <qtm_lib_post_process+0xc4>
    1424:	01 90       	ld	r0, Z+
    1426:	f0 81       	ld	r31, Z
    1428:	e0 2d       	mov	r30, r0
    142a:	80 81       	ld	r24, Z
    142c:	87 ff       	sbrs	r24, 7
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <qtm_lib_post_process+0xc0>
    1430:	9c 91       	ld	r25, X
    1432:	94 60       	ori	r25, 0x04	; 4
    1434:	9c 93       	st	X, r25
    1436:	1f 5f       	subi	r17, 0xFF	; 255
    1438:	eb cf       	rjmp	.-42     	; 0x1410 <qtm_lib_post_process+0x9a>
    143a:	10 93 6b 3e 	sts	0x3E6B, r17	; 0x803e6b <current_process_id>
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <qtm_state>
    1444:	57 96       	adiw	r26, 0x17	; 23
    1446:	ed 91       	ld	r30, X+
    1448:	fc 91       	ld	r31, X
    144a:	58 97       	sbiw	r26, 0x18	; 24
    144c:	30 97       	sbiw	r30, 0x00	; 0
    144e:	11 f0       	breq	.+4      	; 0x1454 <qtm_lib_post_process+0xde>
    1450:	09 95       	icall
    1452:	05 c0       	rjmp	.+10     	; 0x145e <qtm_lib_post_process+0xe8>
    1454:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    1458:	8f 5f       	subi	r24, 0xFF	; 255
    145a:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <errors>
    145e:	10 e0       	ldi	r17, 0x00	; 0
    1460:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    1464:	88 23       	and	r24, r24
    1466:	71 f0       	breq	.+28     	; 0x1484 <qtm_lib_post_process+0x10e>
    1468:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <errors>
    146c:	80 91 6b 3e 	lds	r24, 0x3E6B	; 0x803e6b <current_process_id>
    1470:	80 64       	ori	r24, 0x40	; 64
    1472:	ad de       	rcall	.-678    	; 0x11ce <qtm_error_handler>
    1474:	07 c0       	rjmp	.+14     	; 0x1484 <qtm_lib_post_process+0x10e>
    1476:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <errors>
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <errors>
    1480:	13 e0       	ldi	r17, 0x03	; 3
    1482:	ee cf       	rjmp	.-36     	; 0x1460 <qtm_lib_post_process+0xea>
    1484:	81 2f       	mov	r24, r17
    1486:	0f 90       	pop	r0
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	08 95       	ret

00001490 <select_next_channel_to_measure>:
    1490:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <current_measure_channel>
    1494:	90 91 71 3e 	lds	r25, 0x3E71	; 0x803e71 <current_measure_channel+0x1>
    1498:	a0 91 ae 3e 	lds	r26, 0x3EAE	; 0x803eae <qtm_acquisition_control_working_set_ptr>
    149c:	b0 91 af 3e 	lds	r27, 0x3EAF	; 0x803eaf <qtm_acquisition_control_working_set_ptr+0x1>
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	11 97       	sbiw	r26, 0x01	; 1
    14a6:	40 81       	ld	r20, Z
    14a8:	51 81       	ldd	r21, Z+1	; 0x01
    14aa:	25 e0       	ldi	r18, 0x05	; 5
    14ac:	28 9f       	mul	r18, r24
    14ae:	b0 01       	movw	r22, r0
    14b0:	29 9f       	mul	r18, r25
    14b2:	70 0d       	add	r23, r0
    14b4:	11 24       	eor	r1, r1
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	84 17       	cp	r24, r20
    14bc:	95 07       	cpc	r25, r21
    14be:	a8 f4       	brcc	.+42     	; 0x14ea <select_next_channel_to_measure+0x5a>
    14c0:	14 96       	adiw	r26, 0x04	; 4
    14c2:	ed 91       	ld	r30, X+
    14c4:	fc 91       	ld	r31, X
    14c6:	15 97       	sbiw	r26, 0x05	; 5
    14c8:	e2 0f       	add	r30, r18
    14ca:	f3 1f       	adc	r31, r19
    14cc:	e6 0f       	add	r30, r22
    14ce:	f7 1f       	adc	r31, r23
    14d0:	e0 81       	ld	r30, Z
    14d2:	2b 5f       	subi	r18, 0xFB	; 251
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	e0 fd       	sbrc	r30, 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <select_next_channel_to_measure+0x4e>
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	ee cf       	rjmp	.-36     	; 0x14ba <select_next_channel_to_measure+0x2a>
    14de:	80 93 70 3e 	sts	0x3E70, r24	; 0x803e70 <current_measure_channel>
    14e2:	90 93 71 3e 	sts	0x3E71, r25	; 0x803e71 <current_measure_channel+0x1>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	08 95       	ret
    14ea:	10 92 70 3e 	sts	0x3E70, r1	; 0x803e70 <current_measure_channel>
    14ee:	10 92 71 3e 	sts	0x3E71, r1	; 0x803e71 <current_measure_channel+0x1>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	08 95       	ret

000014f6 <qtm_measure_node>:
    14f6:	bc 01       	movw	r22, r24
    14f8:	e0 91 ae 3e 	lds	r30, 0x3EAE	; 0x803eae <qtm_acquisition_control_working_set_ptr>
    14fc:	f0 91 af 3e 	lds	r31, 0x3EAF	; 0x803eaf <qtm_acquisition_control_working_set_ptr+0x1>
    1500:	86 e0       	ldi	r24, 0x06	; 6
    1502:	86 9f       	mul	r24, r22
    1504:	90 01       	movw	r18, r0
    1506:	87 9f       	mul	r24, r23
    1508:	30 0d       	add	r19, r0
    150a:	11 24       	eor	r1, r1
    150c:	a2 81       	ldd	r26, Z+2	; 0x02
    150e:	b3 81       	ldd	r27, Z+3	; 0x03
    1510:	a2 0f       	add	r26, r18
    1512:	b3 1f       	adc	r27, r19
    1514:	11 96       	adiw	r26, 0x01	; 1
    1516:	8c 91       	ld	r24, X
    1518:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
    151c:	a2 81       	ldd	r26, Z+2	; 0x02
    151e:	b3 81       	ldd	r27, Z+3	; 0x03
    1520:	a2 0f       	add	r26, r18
    1522:	b3 1f       	adc	r27, r19
    1524:	8c 91       	ld	r24, X
    1526:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    152a:	95 e0       	ldi	r25, 0x05	; 5
    152c:	96 9f       	mul	r25, r22
    152e:	a0 01       	movw	r20, r0
    1530:	97 9f       	mul	r25, r23
    1532:	50 0d       	add	r21, r0
    1534:	11 24       	eor	r1, r1
    1536:	a4 81       	ldd	r26, Z+4	; 0x04
    1538:	b5 81       	ldd	r27, Z+5	; 0x05
    153a:	a4 0f       	add	r26, r20
    153c:	b5 1f       	adc	r27, r21
    153e:	13 96       	adiw	r26, 0x03	; 3
    1540:	8c 91       	ld	r24, X
    1542:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <__TEXT_REGION_LENGTH__+0x70061a>
    1546:	a4 81       	ldd	r26, Z+4	; 0x04
    1548:	b5 81       	ldd	r27, Z+5	; 0x05
    154a:	a4 0f       	add	r26, r20
    154c:	b5 1f       	adc	r27, r21
    154e:	14 96       	adiw	r26, 0x04	; 4
    1550:	8c 91       	ld	r24, X
    1552:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <__TEXT_REGION_LENGTH__+0x70061b>
    1556:	a4 81       	ldd	r26, Z+4	; 0x04
    1558:	b5 81       	ldd	r27, Z+5	; 0x05
    155a:	a4 0f       	add	r26, r20
    155c:	b5 1f       	adc	r27, r21
    155e:	8c 91       	ld	r24, X
    1560:	81 fd       	sbrc	r24, 1
    1562:	9c 93       	st	X, r25
    1564:	84 81       	ldd	r24, Z+4	; 0x04
    1566:	95 81       	ldd	r25, Z+5	; 0x05
    1568:	dc 01       	movw	r26, r24
    156a:	a4 0f       	add	r26, r20
    156c:	b5 1f       	adc	r27, r21
    156e:	8c 91       	ld	r24, X
    1570:	8c 71       	andi	r24, 0x1C	; 28
    1572:	69 f4       	brne	.+26     	; 0x158e <qtm_measure_node+0x98>
    1574:	a2 81       	ldd	r26, Z+2	; 0x02
    1576:	b3 81       	ldd	r27, Z+3	; 0x03
    1578:	a2 0f       	add	r26, r18
    157a:	b3 1f       	adc	r27, r19
    157c:	14 96       	adiw	r26, 0x04	; 4
    157e:	ac 91       	ld	r26, X
    1580:	a2 95       	swap	r26
    1582:	af 70       	andi	r26, 0x0F	; 15
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ac 55       	subi	r26, 0x5C	; 92
    1588:	b4 46       	sbci	r27, 0x64	; 100
    158a:	8c 91       	ld	r24, X
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <qtm_measure_node+0x9a>
    158e:	8f e3       	ldi	r24, 0x3F	; 63
    1590:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <__TEXT_REGION_LENGTH__+0x70061c>
    1594:	a2 81       	ldd	r26, Z+2	; 0x02
    1596:	b3 81       	ldd	r27, Z+3	; 0x03
    1598:	a2 0f       	add	r26, r18
    159a:	b3 1f       	adc	r27, r19
    159c:	12 96       	adiw	r26, 0x02	; 2
    159e:	8c 91       	ld	r24, X
    15a0:	8b 31       	cpi	r24, 0x1B	; 27
    15a2:	10 f4       	brcc	.+4      	; 0x15a8 <qtm_measure_node+0xb2>
    15a4:	8c 5f       	subi	r24, 0xFC	; 252
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <qtm_measure_node+0xb4>
    15a8:	8f e1       	ldi	r24, 0x1F	; 31
    15aa:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    15ae:	a2 81       	ldd	r26, Z+2	; 0x02
    15b0:	b3 81       	ldd	r27, Z+3	; 0x03
    15b2:	a2 0f       	add	r26, r18
    15b4:	b3 1f       	adc	r27, r19
    15b6:	15 96       	adiw	r26, 0x05	; 5
    15b8:	8c 91       	ld	r24, X
    15ba:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    15be:	a2 81       	ldd	r26, Z+2	; 0x02
    15c0:	b3 81       	ldd	r27, Z+3	; 0x03
    15c2:	a2 0f       	add	r26, r18
    15c4:	b3 1f       	adc	r27, r19
    15c6:	13 96       	adiw	r26, 0x03	; 3
    15c8:	8c 91       	ld	r24, X
    15ca:	82 95       	swap	r24
    15cc:	8f 70       	andi	r24, 0x0F	; 15
    15ce:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <__TEXT_REGION_LENGTH__+0x700619>
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	93 81       	ldd	r25, Z+3	; 0x03
    15d6:	fc 01       	movw	r30, r24
    15d8:	e2 0f       	add	r30, r18
    15da:	f3 1f       	adc	r31, r19
    15dc:	83 81       	ldd	r24, Z+3	; 0x03
    15de:	8f 70       	andi	r24, 0x0F	; 15
    15e0:	80 61       	ori	r24, 0x10	; 16
    15e2:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    15e6:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    15ea:	83 60       	ori	r24, 0x03	; 3
    15ec:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    15f0:	81 e8       	ldi	r24, 0x81	; 129
    15f2:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    15fc:	08 95       	ret

000015fe <qtm_acquisition_process>:
    15fe:	3f 92       	push	r3
    1600:	4f 92       	push	r4
    1602:	5f 92       	push	r5
    1604:	6f 92       	push	r6
    1606:	7f 92       	push	r7
    1608:	8f 92       	push	r8
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	80 91 6f 3e 	lds	r24, 0x3E6F	; 0x803e6f <touch_seq_lib_state>
    1624:	88 23       	and	r24, r24
    1626:	09 f4       	brne	.+2      	; 0x162a <qtm_acquisition_process+0x2c>
    1628:	48 c1       	rjmp	.+656    	; 0x18ba <qtm_acquisition_process+0x2bc>
    162a:	a0 91 ae 3e 	lds	r26, 0x3EAE	; 0x803eae <qtm_acquisition_control_working_set_ptr>
    162e:	b0 91 af 3e 	lds	r27, 0x3EAF	; 0x803eaf <qtm_acquisition_control_working_set_ptr+0x1>
    1632:	c0 90 b0 3e 	lds	r12, 0x3EB0	; 0x803eb0 <qtm_raw_data_measurements_ptr>
    1636:	d0 90 b1 3e 	lds	r13, 0x3EB1	; 0x803eb1 <qtm_raw_data_measurements_ptr+0x1>
    163a:	00 e0       	ldi	r16, 0x00	; 0
    163c:	10 e0       	ldi	r17, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	e1 2c       	mov	r14, r1
    1644:	f1 2c       	mov	r15, r1
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	33 24       	eor	r3, r3
    164a:	33 94       	inc	r3
    164c:	d1 e8       	ldi	r29, 0x81	; 129
    164e:	4d 2e       	mov	r4, r29
    1650:	88 24       	eor	r8, r8
    1652:	8a 94       	dec	r8
    1654:	99 24       	eor	r9, r9
    1656:	93 94       	inc	r9
    1658:	6d 90       	ld	r6, X+
    165a:	7c 90       	ld	r7, X
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	f3 01       	movw	r30, r6
    1660:	20 81       	ld	r18, Z
    1662:	31 81       	ldd	r19, Z+1	; 0x01
    1664:	e2 16       	cp	r14, r18
    1666:	f3 06       	cpc	r15, r19
    1668:	08 f0       	brcs	.+2      	; 0x166c <qtm_acquisition_process+0x6e>
    166a:	23 c1       	rjmp	.+582    	; 0x18b2 <qtm_acquisition_process+0x2b4>
    166c:	e6 01       	movw	r28, r12
    166e:	29 91       	ld	r18, Y+
    1670:	39 91       	ld	r19, Y+
    1672:	6e 01       	movw	r12, r28
    1674:	14 96       	adiw	r26, 0x04	; 4
    1676:	ed 91       	ld	r30, X+
    1678:	fc 91       	ld	r31, X
    167a:	15 97       	sbiw	r26, 0x05	; 5
    167c:	e6 0f       	add	r30, r22
    167e:	f7 1f       	adc	r31, r23
    1680:	40 81       	ld	r20, Z
    1682:	4c 71       	andi	r20, 0x1C	; 28
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	56 95       	lsr	r21
    1688:	47 95       	ror	r20
    168a:	56 95       	lsr	r21
    168c:	47 95       	ror	r20
    168e:	41 15       	cp	r20, r1
    1690:	51 05       	cpc	r21, r1
    1692:	21 f0       	breq	.+8      	; 0x169c <qtm_acquisition_process+0x9e>
    1694:	41 30       	cpi	r20, 0x01	; 1
    1696:	51 05       	cpc	r21, r1
    1698:	b9 f0       	breq	.+46     	; 0x16c8 <qtm_acquisition_process+0xca>
    169a:	02 c1       	rjmp	.+516    	; 0x18a0 <qtm_acquisition_process+0x2a2>
    169c:	12 96       	adiw	r26, 0x02	; 2
    169e:	cd 91       	ld	r28, X+
    16a0:	dc 91       	ld	r29, X
    16a2:	13 97       	sbiw	r26, 0x03	; 3
    16a4:	c0 0f       	add	r28, r16
    16a6:	d1 1f       	adc	r29, r17
    16a8:	4c 81       	ldd	r20, Y+4	; 0x04
    16aa:	4f 70       	andi	r20, 0x0F	; 15
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	49 17       	cp	r20, r25
    16b0:	10 f4       	brcc	.+4      	; 0x16b6 <qtm_acquisition_process+0xb8>
    16b2:	94 1b       	sub	r25, r20
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <qtm_acquisition_process+0xba>
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <qtm_acquisition_process+0xc0>
    16ba:	36 95       	lsr	r19
    16bc:	27 95       	ror	r18
    16be:	9a 95       	dec	r25
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <qtm_acquisition_process+0xbc>
    16c2:	21 83       	std	Z+1, r18	; 0x01
    16c4:	32 83       	std	Z+2, r19	; 0x02
    16c6:	ed c0       	rjmp	.+474    	; 0x18a2 <qtm_acquisition_process+0x2a4>
    16c8:	12 96       	adiw	r26, 0x02	; 2
    16ca:	4d 91       	ld	r20, X+
    16cc:	5c 91       	ld	r21, X
    16ce:	13 97       	sbiw	r26, 0x03	; 3
    16d0:	40 0f       	add	r20, r16
    16d2:	51 1f       	adc	r21, r17
    16d4:	ea 01       	movw	r28, r20
    16d6:	0d 80       	ldd	r0, Y+5	; 0x05
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <qtm_acquisition_process+0xe0>
    16da:	36 95       	lsr	r19
    16dc:	27 95       	ror	r18
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <qtm_acquisition_process+0xdc>
    16e2:	21 83       	std	Z+1, r18	; 0x01
    16e4:	32 83       	std	Z+2, r19	; 0x02
    16e6:	a3 80       	ldd	r10, Z+3	; 0x03
    16e8:	b4 80       	ldd	r11, Z+4	; 0x04
    16ea:	21 15       	cp	r18, r1
    16ec:	d2 e0       	ldi	r29, 0x02	; 2
    16ee:	3d 07       	cpc	r19, r29
    16f0:	20 f0       	brcs	.+8      	; 0x16fa <qtm_acquisition_process+0xfc>
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	31 40       	sbci	r19, 0x01	; 1
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <qtm_acquisition_process+0x106>
    16fa:	a4 01       	movw	r20, r8
    16fc:	42 1b       	sub	r20, r18
    16fe:	53 0b       	sbc	r21, r19
    1700:	9a 01       	movw	r18, r20
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	e3 01       	movw	r28, r6
    1706:	5a 80       	ldd	r5, Y+2	; 0x02
    1708:	d0 e4       	ldi	r29, 0x40	; 64
    170a:	5d 12       	cpse	r5, r29
    170c:	05 c0       	rjmp	.+10     	; 0x1718 <qtm_acquisition_process+0x11a>
    170e:	36 95       	lsr	r19
    1710:	27 95       	ror	r18
    1712:	99 23       	and	r25, r25
    1714:	19 f0       	breq	.+6      	; 0x171c <qtm_acquisition_process+0x11e>
    1716:	09 c0       	rjmp	.+18     	; 0x172a <qtm_acquisition_process+0x12c>
    1718:	99 23       	and	r25, r25
    171a:	39 f0       	breq	.+14     	; 0x172a <qtm_acquisition_process+0x12c>
    171c:	4f ef       	ldi	r20, 0xFF	; 255
    171e:	a4 16       	cp	r10, r20
    1720:	b4 06       	cpc	r11, r20
    1722:	31 f4       	brne	.+12     	; 0x1730 <qtm_acquisition_process+0x132>
    1724:	40 82       	st	Z, r4
    1726:	8e e0       	ldi	r24, 0x0E	; 14
    1728:	07 c0       	rjmp	.+14     	; 0x1738 <qtm_acquisition_process+0x13a>
    172a:	77 24       	eor	r7, r7
    172c:	73 94       	inc	r7
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <qtm_acquisition_process+0x134>
    1730:	71 2c       	mov	r7, r1
    1732:	2a 30       	cpi	r18, 0x0A	; 10
    1734:	31 05       	cpc	r19, r1
    1736:	90 f4       	brcc	.+36     	; 0x175c <qtm_acquisition_process+0x15e>
    1738:	14 96       	adiw	r26, 0x04	; 4
    173a:	ed 91       	ld	r30, X+
    173c:	fc 91       	ld	r31, X
    173e:	15 97       	sbiw	r26, 0x05	; 5
    1740:	e6 0f       	add	r30, r22
    1742:	f7 1f       	adc	r31, r23
    1744:	90 81       	ld	r25, Z
    1746:	97 ff       	sbrs	r25, 7
    1748:	30 82       	st	Z, r3
    174a:	14 96       	adiw	r26, 0x04	; 4
    174c:	ed 91       	ld	r30, X+
    174e:	fc 91       	ld	r31, X
    1750:	15 97       	sbiw	r26, 0x05	; 5
    1752:	e6 0f       	add	r30, r22
    1754:	f7 1f       	adc	r31, r23
    1756:	a3 82       	std	Z+3, r10	; 0x03
    1758:	b4 82       	std	Z+4, r11	; 0x04
    175a:	a3 c0       	rjmp	.+326    	; 0x18a2 <qtm_acquisition_process+0x2a4>
    175c:	e5 01       	movw	r28, r10
    175e:	cd 2f       	mov	r28, r29
    1760:	dd 27       	eor	r29, r29
    1762:	c2 95       	swap	r28
    1764:	cf 70       	andi	r28, 0x0F	; 15
    1766:	9c 2f       	mov	r25, r28
    1768:	a5 01       	movw	r20, r10
    176a:	44 27       	eor	r20, r20
    176c:	5f 70       	andi	r21, 0x0F	; 15
    176e:	65 2e       	mov	r6, r21
    1770:	a5 01       	movw	r20, r10
    1772:	40 7f       	andi	r20, 0xF0	; 240
    1774:	55 27       	eor	r21, r21
    1776:	52 95       	swap	r21
    1778:	42 95       	swap	r20
    177a:	4f 70       	andi	r20, 0x0F	; 15
    177c:	45 27       	eor	r20, r21
    177e:	5f 70       	andi	r21, 0x0F	; 15
    1780:	45 27       	eor	r20, r21
    1782:	5a 2d       	mov	r21, r10
    1784:	5f 70       	andi	r21, 0x0F	; 15
    1786:	a5 2e       	mov	r10, r21
    1788:	c4 30       	cpi	r28, 0x04	; 4
    178a:	30 f0       	brcs	.+12     	; 0x1798 <qtm_acquisition_process+0x19a>
    178c:	93 70       	andi	r25, 0x03	; 3
    178e:	d6 95       	lsr	r29
    1790:	c7 95       	ror	r28
    1792:	d6 95       	lsr	r29
    1794:	c7 95       	ror	r28
    1796:	9c 0f       	add	r25, r28
    1798:	71 10       	cpse	r7, r1
    179a:	3c c0       	rjmp	.+120    	; 0x1814 <qtm_acquisition_process+0x216>
    179c:	50 e8       	ldi	r21, 0x80	; 128
    179e:	55 0d       	add	r21, r5
    17a0:	52 30       	cpi	r21, 0x02	; 2
    17a2:	10 f4       	brcc	.+4      	; 0x17a8 <qtm_acquisition_process+0x1aa>
    17a4:	56 e0       	ldi	r21, 0x06	; 6
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <qtm_acquisition_process+0x1b8>
    17a8:	53 e0       	ldi	r21, 0x03	; 3
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <qtm_acquisition_process+0x1b8>
    17ac:	95 17       	cp	r25, r21
    17ae:	68 f4       	brcc	.+26     	; 0x17ca <qtm_acquisition_process+0x1cc>
    17b0:	9f 5f       	subi	r25, 0xFF	; 255
    17b2:	2f 5c       	subi	r18, 0xCF	; 207
    17b4:	31 09       	sbc	r19, r1
    17b6:	20 3d       	cpi	r18, 0xD0	; 208
    17b8:	31 05       	cpc	r19, r1
    17ba:	c0 f7       	brcc	.-16     	; 0x17ac <qtm_acquisition_process+0x1ae>
    17bc:	06 c0       	rjmp	.+12     	; 0x17ca <qtm_acquisition_process+0x1cc>
    17be:	cf e0       	ldi	r28, 0x0F	; 15
    17c0:	6c 16       	cp	r6, r28
    17c2:	49 f0       	breq	.+18     	; 0x17d6 <qtm_acquisition_process+0x1d8>
    17c4:	63 94       	inc	r6
    17c6:	25 51       	subi	r18, 0x15	; 21
    17c8:	31 09       	sbc	r19, r1
    17ca:	26 31       	cpi	r18, 0x16	; 22
    17cc:	31 05       	cpc	r19, r1
    17ce:	b8 f7       	brcc	.-18     	; 0x17be <qtm_acquisition_process+0x1c0>
    17d0:	df e0       	ldi	r29, 0x0F	; 15
    17d2:	6d 12       	cpse	r6, r29
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <qtm_acquisition_process+0x1f4>
    17d6:	95 17       	cp	r25, r21
    17d8:	20 f4       	brcc	.+8      	; 0x17e2 <qtm_acquisition_process+0x1e4>
    17da:	9f 5f       	subi	r25, 0xFF	; 255
    17dc:	d5 e0       	ldi	r29, 0x05	; 5
    17de:	6d 2e       	mov	r6, r29
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <qtm_acquisition_process+0x1f4>
    17e2:	cf e0       	ldi	r28, 0x0F	; 15
    17e4:	6c 2e       	mov	r6, r28
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <qtm_acquisition_process+0x1f4>
    17e8:	4f 30       	cpi	r20, 0x0F	; 15
    17ea:	49 f0       	breq	.+18     	; 0x17fe <qtm_acquisition_process+0x200>
    17ec:	4f 5f       	subi	r20, 0xFF	; 255
    17ee:	22 50       	subi	r18, 0x02	; 2
    17f0:	31 09       	sbc	r19, r1
    17f2:	23 30       	cpi	r18, 0x03	; 3
    17f4:	31 05       	cpc	r19, r1
    17f6:	c0 f7       	brcc	.-16     	; 0x17e8 <qtm_acquisition_process+0x1ea>
    17f8:	4f 30       	cpi	r20, 0x0F	; 15
    17fa:	09 f0       	breq	.+2      	; 0x17fe <qtm_acquisition_process+0x200>
    17fc:	65 c0       	rjmp	.+202    	; 0x18c8 <qtm_acquisition_process+0x2ca>
    17fe:	4f e0       	ldi	r20, 0x0F	; 15
    1800:	64 16       	cp	r6, r20
    1802:	81 f1       	breq	.+96     	; 0x1864 <qtm_acquisition_process+0x266>
    1804:	63 94       	inc	r6
    1806:	45 e0       	ldi	r20, 0x05	; 5
    1808:	5f c0       	rjmp	.+190    	; 0x18c8 <qtm_acquisition_process+0x2ca>
    180a:	99 23       	and	r25, r25
    180c:	61 f0       	breq	.+24     	; 0x1826 <qtm_acquisition_process+0x228>
    180e:	91 50       	subi	r25, 0x01	; 1
    1810:	2f 5c       	subi	r18, 0xCF	; 207
    1812:	31 09       	sbc	r19, r1
    1814:	20 3d       	cpi	r18, 0xD0	; 208
    1816:	31 05       	cpc	r19, r1
    1818:	c0 f7       	brcc	.-16     	; 0x180a <qtm_acquisition_process+0x20c>
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <qtm_acquisition_process+0x228>
    181c:	66 20       	and	r6, r6
    181e:	41 f0       	breq	.+16     	; 0x1830 <qtm_acquisition_process+0x232>
    1820:	6a 94       	dec	r6
    1822:	25 51       	subi	r18, 0x15	; 21
    1824:	31 09       	sbc	r19, r1
    1826:	26 31       	cpi	r18, 0x16	; 22
    1828:	31 05       	cpc	r19, r1
    182a:	c0 f7       	brcc	.-16     	; 0x181c <qtm_acquisition_process+0x21e>
    182c:	61 10       	cpse	r6, r1
    182e:	0d c0       	rjmp	.+26     	; 0x184a <qtm_acquisition_process+0x24c>
    1830:	99 23       	and	r25, r25
    1832:	21 f0       	breq	.+8      	; 0x183c <qtm_acquisition_process+0x23e>
    1834:	91 50       	subi	r25, 0x01	; 1
    1836:	5a e0       	ldi	r21, 0x0A	; 10
    1838:	65 2e       	mov	r6, r21
    183a:	07 c0       	rjmp	.+14     	; 0x184a <qtm_acquisition_process+0x24c>
    183c:	61 2c       	mov	r6, r1
    183e:	05 c0       	rjmp	.+10     	; 0x184a <qtm_acquisition_process+0x24c>
    1840:	44 23       	and	r20, r20
    1842:	41 f0       	breq	.+16     	; 0x1854 <qtm_acquisition_process+0x256>
    1844:	41 50       	subi	r20, 0x01	; 1
    1846:	22 50       	subi	r18, 0x02	; 2
    1848:	31 09       	sbc	r19, r1
    184a:	23 30       	cpi	r18, 0x03	; 3
    184c:	31 05       	cpc	r19, r1
    184e:	c0 f7       	brcc	.-16     	; 0x1840 <qtm_acquisition_process+0x242>
    1850:	41 11       	cpse	r20, r1
    1852:	10 c0       	rjmp	.+32     	; 0x1874 <qtm_acquisition_process+0x276>
    1854:	66 20       	and	r6, r6
    1856:	e9 f1       	breq	.+122    	; 0x18d2 <qtm_acquisition_process+0x2d4>
    1858:	6a 94       	dec	r6
    185a:	4a e0       	ldi	r20, 0x0A	; 10
    185c:	23 30       	cpi	r18, 0x03	; 3
    185e:	31 05       	cpc	r19, r1
    1860:	c8 f6       	brcc	.-78     	; 0x1814 <qtm_acquisition_process+0x216>
    1862:	08 c0       	rjmp	.+16     	; 0x1874 <qtm_acquisition_process+0x276>
    1864:	59 13       	cpse	r21, r25
    1866:	2f c0       	rjmp	.+94     	; 0x18c6 <qtm_acquisition_process+0x2c8>
    1868:	23 30       	cpi	r18, 0x03	; 3
    186a:	31 05       	cpc	r19, r1
    186c:	40 f1       	brcs	.+80     	; 0x18be <qtm_acquisition_process+0x2c0>
    186e:	4f e0       	ldi	r20, 0x0F	; 15
    1870:	a4 2e       	mov	r10, r20
    1872:	4f e0       	ldi	r20, 0x0F	; 15
    1874:	94 30       	cpi	r25, 0x04	; 4
    1876:	18 f0       	brcs	.+6      	; 0x187e <qtm_acquisition_process+0x280>
    1878:	99 0f       	add	r25, r25
    187a:	99 0f       	add	r25, r25
    187c:	99 50       	subi	r25, 0x09	; 9
    187e:	c0 e1       	ldi	r28, 0x10	; 16
    1880:	4c 9f       	mul	r20, r28
    1882:	a0 01       	movw	r20, r0
    1884:	11 24       	eor	r1, r1
    1886:	56 29       	or	r21, r6
    1888:	4a 29       	or	r20, r10
    188a:	c9 2f       	mov	r28, r25
    188c:	d0 e0       	ldi	r29, 0x00	; 0
    188e:	dc 2f       	mov	r29, r28
    1890:	cc 27       	eor	r28, r28
    1892:	d2 95       	swap	r29
    1894:	d0 7f       	andi	r29, 0xF0	; 240
    1896:	4c 2b       	or	r20, r28
    1898:	5d 2b       	or	r21, r29
    189a:	43 83       	std	Z+3, r20	; 0x03
    189c:	54 83       	std	Z+4, r21	; 0x04
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <qtm_acquisition_process+0x2a4>
    18a0:	ff cf       	rjmp	.-2      	; 0x18a0 <qtm_acquisition_process+0x2a2>
    18a2:	df ef       	ldi	r29, 0xFF	; 255
    18a4:	ed 1a       	sub	r14, r29
    18a6:	fd 0a       	sbc	r15, r29
    18a8:	6b 5f       	subi	r22, 0xFB	; 251
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	0a 5f       	subi	r16, 0xFA	; 250
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	d3 ce       	rjmp	.-602    	; 0x1658 <qtm_acquisition_process+0x5a>
    18b2:	92 e0       	ldi	r25, 0x02	; 2
    18b4:	90 93 6f 3e 	sts	0x3E6F, r25	; 0x803e6f <touch_seq_lib_state>
    18b8:	0e c0       	rjmp	.+28     	; 0x18d6 <qtm_acquisition_process+0x2d8>
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	0c c0       	rjmp	.+24     	; 0x18d6 <qtm_acquisition_process+0x2d8>
    18be:	4f e0       	ldi	r20, 0x0F	; 15
    18c0:	2f e0       	ldi	r18, 0x0F	; 15
    18c2:	a2 2e       	mov	r10, r18
    18c4:	d7 cf       	rjmp	.-82     	; 0x1874 <qtm_acquisition_process+0x276>
    18c6:	4f e0       	ldi	r20, 0x0F	; 15
    18c8:	23 30       	cpi	r18, 0x03	; 3
    18ca:	31 05       	cpc	r19, r1
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <qtm_acquisition_process+0x2d2>
    18ce:	73 cf       	rjmp	.-282    	; 0x17b6 <qtm_acquisition_process+0x1b8>
    18d0:	d1 cf       	rjmp	.-94     	; 0x1874 <qtm_acquisition_process+0x276>
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	cf cf       	rjmp	.-98     	; 0x1874 <qtm_acquisition_process+0x276>
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	ef 90       	pop	r14
    18e2:	df 90       	pop	r13
    18e4:	cf 90       	pop	r12
    18e6:	bf 90       	pop	r11
    18e8:	af 90       	pop	r10
    18ea:	9f 90       	pop	r9
    18ec:	8f 90       	pop	r8
    18ee:	7f 90       	pop	r7
    18f0:	6f 90       	pop	r6
    18f2:	5f 90       	pop	r5
    18f4:	4f 90       	pop	r4
    18f6:	3f 90       	pop	r3
    18f8:	08 95       	ret

000018fa <qtm_ptc_init_acquisition_module>:
    18fa:	cf 93       	push	r28
    18fc:	dc 01       	movw	r26, r24
    18fe:	89 2b       	or	r24, r25
    1900:	79 f1       	breq	.+94     	; 0x1960 <qtm_ptc_init_acquisition_module+0x66>
    1902:	ed 91       	ld	r30, X+
    1904:	fc 91       	ld	r31, X
    1906:	11 97       	sbiw	r26, 0x01	; 1
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	26 17       	cp	r18, r22
    1918:	37 07       	cpc	r19, r23
    191a:	79 f0       	breq	.+30     	; 0x193a <qtm_ptc_init_acquisition_module+0x40>
    191c:	12 96       	adiw	r26, 0x02	; 2
    191e:	ed 91       	ld	r30, X+
    1920:	fc 91       	ld	r31, X
    1922:	13 97       	sbiw	r26, 0x03	; 3
    1924:	e4 0f       	add	r30, r20
    1926:	f5 1f       	adc	r31, r21
    1928:	c0 81       	ld	r28, Z
    192a:	81 81       	ldd	r24, Z+1	; 0x01
    192c:	8c 2b       	or	r24, r28
    192e:	98 2b       	or	r25, r24
    1930:	2f 5f       	subi	r18, 0xFF	; 255
    1932:	3f 4f       	sbci	r19, 0xFF	; 255
    1934:	4a 5f       	subi	r20, 0xFA	; 250
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	ee cf       	rjmp	.-36     	; 0x1916 <qtm_ptc_init_acquisition_module+0x1c>
    193a:	99 23       	and	r25, r25
    193c:	99 f0       	breq	.+38     	; 0x1964 <qtm_ptc_init_acquisition_module+0x6a>
    193e:	80 91 6f 3e 	lds	r24, 0x3E6F	; 0x803e6f <touch_seq_lib_state>
    1942:	81 11       	cpse	r24, r1
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <qtm_ptc_init_acquisition_module+0x58>
    1946:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <touch_seq_lib_state>
    1950:	05 c0       	rjmp	.+10     	; 0x195c <qtm_ptc_init_acquisition_module+0x62>
    1952:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1956:	98 2b       	or	r25, r24
    1958:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <qtm_ptc_init_acquisition_module+0x6c>
    1960:	8b e0       	ldi	r24, 0x0B	; 11
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <qtm_ptc_init_acquisition_module+0x6c>
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	cf 91       	pop	r28
    1968:	08 95       	ret

0000196a <qtm_ptc_qtlib_assign_signal_memory>:
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	31 f0       	breq	.+12     	; 0x197a <qtm_ptc_qtlib_assign_signal_memory+0x10>
    196e:	80 93 b0 3e 	sts	0x3EB0, r24	; 0x803eb0 <qtm_raw_data_measurements_ptr>
    1972:	90 93 b1 3e 	sts	0x3EB1, r25	; 0x803eb1 <qtm_raw_data_measurements_ptr+0x1>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	08 95       	ret
    197a:	8b e0       	ldi	r24, 0x0B	; 11
    197c:	08 95       	ret

0000197e <qtm_ptc_start_measurement_seq>:
    197e:	61 15       	cp	r22, r1
    1980:	71 05       	cpc	r23, r1
    1982:	91 f1       	breq	.+100    	; 0x19e8 <qtm_ptc_start_measurement_seq+0x6a>
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	81 f1       	breq	.+96     	; 0x19e8 <qtm_ptc_start_measurement_seq+0x6a>
    1988:	20 91 6f 3e 	lds	r18, 0x3E6F	; 0x803e6f <touch_seq_lib_state>
    198c:	22 23       	and	r18, r18
    198e:	71 f1       	breq	.+92     	; 0x19ec <qtm_ptc_start_measurement_seq+0x6e>
    1990:	24 30       	cpi	r18, 0x04	; 4
    1992:	71 f1       	breq	.+92     	; 0x19f0 <qtm_ptc_start_measurement_seq+0x72>
    1994:	80 93 ae 3e 	sts	0x3EAE, r24	; 0x803eae <qtm_acquisition_control_working_set_ptr>
    1998:	90 93 af 3e 	sts	0x3EAF, r25	; 0x803eaf <qtm_acquisition_control_working_set_ptr+0x1>
    199c:	60 93 6d 3e 	sts	0x3E6D, r22	; 0x803e6d <ptc_seq_measure_complete_pointer>
    19a0:	70 93 6e 3e 	sts	0x3E6E, r23	; 0x803e6e <ptc_seq_measure_complete_pointer+0x1>
    19a4:	20 ec       	ldi	r18, 0xC0	; 192
    19a6:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19aa:	dc 01       	movw	r26, r24
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	22 81       	ldd	r18, Z+2	; 0x02
    19b2:	20 34       	cpi	r18, 0x40	; 64
    19b4:	21 f4       	brne	.+8      	; 0x19be <qtm_ptc_start_measurement_seq+0x40>
    19b6:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19ba:	20 62       	ori	r18, 0x20	; 32
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <qtm_ptc_start_measurement_seq+0x4a>
    19be:	20 38       	cpi	r18, 0x80	; 128
    19c0:	41 f4       	brne	.+16     	; 0x19d2 <qtm_ptc_start_measurement_seq+0x54>
    19c2:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19c6:	28 62       	ori	r18, 0x28	; 40
    19c8:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19cc:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    19d0:	13 c0       	rjmp	.+38     	; 0x19f8 <qtm_ptc_start_measurement_seq+0x7a>
    19d2:	21 38       	cpi	r18, 0x81	; 129
    19d4:	79 f4       	brne	.+30     	; 0x19f4 <qtm_ptc_start_measurement_seq+0x76>
    19d6:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19da:	28 62       	ori	r18, 0x28	; 40
    19dc:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19e0:	26 e8       	ldi	r18, 0x86	; 134
    19e2:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <qtm_ptc_start_measurement_seq+0x7a>
    19e8:	8b e0       	ldi	r24, 0x0B	; 11
    19ea:	08 95       	ret
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	08 95       	ret
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	08 95       	ret
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	08 95       	ret
    19f8:	dc 01       	movw	r26, r24
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	84 81       	ldd	r24, Z+4	; 0x04
    1a00:	80 31       	cpi	r24, 0x10	; 16
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <qtm_ptc_start_measurement_seq+0x88>
    1a04:	80 e1       	ldi	r24, 0x10	; 16
    1a06:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
    1a10:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    1a14:	10 92 70 3e 	sts	0x3E70, r1	; 0x803e70 <current_measure_channel>
    1a18:	10 92 71 3e 	sts	0x3E71, r1	; 0x803e71 <current_measure_channel+0x1>
    1a1c:	39 dd       	rcall	.-1422   	; 0x1490 <select_next_channel_to_measure>
    1a1e:	81 11       	cpse	r24, r1
    1a20:	0a c0       	rjmp	.+20     	; 0x1a36 <qtm_ptc_start_measurement_seq+0xb8>
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <touch_seq_lib_state>
    1a28:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <current_measure_channel>
    1a2c:	90 91 71 3e 	lds	r25, 0x3E71	; 0x803e71 <current_measure_channel+0x1>
    1a30:	62 dd       	rcall	.-1340   	; 0x14f6 <qtm_measure_node>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	08 95       	ret
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <touch_seq_lib_state>
    1a3c:	08 95       	ret

00001a3e <qtm_enable_sensor_node>:
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	c9 f0       	breq	.+50     	; 0x1a74 <qtm_enable_sensor_node+0x36>
    1a42:	dc 01       	movw	r26, r24
    1a44:	ed 91       	ld	r30, X+
    1a46:	fc 91       	ld	r31, X
    1a48:	11 97       	sbiw	r26, 0x01	; 1
    1a4a:	20 81       	ld	r18, Z
    1a4c:	31 81       	ldd	r19, Z+1	; 0x01
    1a4e:	26 17       	cp	r18, r22
    1a50:	37 07       	cpc	r19, r23
    1a52:	90 f0       	brcs	.+36     	; 0x1a78 <qtm_enable_sensor_node+0x3a>
    1a54:	45 e0       	ldi	r20, 0x05	; 5
    1a56:	46 9f       	mul	r20, r22
    1a58:	90 01       	movw	r18, r0
    1a5a:	47 9f       	mul	r20, r23
    1a5c:	30 0d       	add	r19, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	14 96       	adiw	r26, 0x04	; 4
    1a62:	ed 91       	ld	r30, X+
    1a64:	fc 91       	ld	r31, X
    1a66:	15 97       	sbiw	r26, 0x05	; 5
    1a68:	e2 0f       	add	r30, r18
    1a6a:	f3 1f       	adc	r31, r19
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 83       	st	Z, r24
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	08 95       	ret
    1a74:	8b e0       	ldi	r24, 0x0B	; 11
    1a76:	08 95       	ret
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	08 95       	ret

00001a7c <qtm_calibrate_sensor_node>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	89 2b       	or	r24, r25
    1a80:	d1 f1       	breq	.+116    	; 0x1af6 <qtm_calibrate_sensor_node+0x7a>
    1a82:	a0 81       	ld	r26, Z
    1a84:	b1 81       	ldd	r27, Z+1	; 0x01
    1a86:	8d 91       	ld	r24, X+
    1a88:	9c 91       	ld	r25, X
    1a8a:	11 97       	sbiw	r26, 0x01	; 1
    1a8c:	86 17       	cp	r24, r22
    1a8e:	97 07       	cpc	r25, r23
    1a90:	a0 f1       	brcs	.+104    	; 0x1afa <qtm_calibrate_sensor_node+0x7e>
    1a92:	12 96       	adiw	r26, 0x02	; 2
    1a94:	9c 91       	ld	r25, X
    1a96:	04 80       	ldd	r0, Z+4	; 0x04
    1a98:	f5 81       	ldd	r31, Z+5	; 0x05
    1a9a:	e0 2d       	mov	r30, r0
    1a9c:	90 34       	cpi	r25, 0x40	; 64
    1a9e:	59 f4       	brne	.+22     	; 0x1ab6 <qtm_calibrate_sensor_node+0x3a>
    1aa0:	85 e0       	ldi	r24, 0x05	; 5
    1aa2:	86 9f       	mul	r24, r22
    1aa4:	d0 01       	movw	r26, r0
    1aa6:	87 9f       	mul	r24, r23
    1aa8:	b0 0d       	add	r27, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	ae 0f       	add	r26, r30
    1aae:	bf 1f       	adc	r27, r31
    1ab0:	84 e3       	ldi	r24, 0x34	; 52
    1ab2:	92 e0       	ldi	r25, 0x02	; 2
    1ab4:	0d c0       	rjmp	.+26     	; 0x1ad0 <qtm_calibrate_sensor_node+0x54>
    1ab6:	90 58       	subi	r25, 0x80	; 128
    1ab8:	92 30       	cpi	r25, 0x02	; 2
    1aba:	80 f4       	brcc	.+32     	; 0x1adc <qtm_calibrate_sensor_node+0x60>
    1abc:	85 e0       	ldi	r24, 0x05	; 5
    1abe:	86 9f       	mul	r24, r22
    1ac0:	d0 01       	movw	r26, r0
    1ac2:	87 9f       	mul	r24, r23
    1ac4:	b0 0d       	add	r27, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	ae 0f       	add	r26, r30
    1aca:	bf 1f       	adc	r27, r31
    1acc:	87 e6       	ldi	r24, 0x67	; 103
    1ace:	95 e0       	ldi	r25, 0x05	; 5
    1ad0:	13 96       	adiw	r26, 0x03	; 3
    1ad2:	8d 93       	st	X+, r24
    1ad4:	9c 93       	st	X, r25
    1ad6:	14 97       	sbiw	r26, 0x04	; 4
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <qtm_calibrate_sensor_node+0x62>
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	95 e0       	ldi	r25, 0x05	; 5
    1ae0:	96 9f       	mul	r25, r22
    1ae2:	90 01       	movw	r18, r0
    1ae4:	97 9f       	mul	r25, r23
    1ae6:	30 0d       	add	r19, r0
    1ae8:	11 24       	eor	r1, r1
    1aea:	e2 0f       	add	r30, r18
    1aec:	f3 1f       	adc	r31, r19
    1aee:	90 81       	ld	r25, Z
    1af0:	92 60       	ori	r25, 0x02	; 2
    1af2:	90 83       	st	Z, r25
    1af4:	08 95       	ret
    1af6:	8b e0       	ldi	r24, 0x0B	; 11
    1af8:	08 95       	ret
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	08 95       	ret

00001afe <qtm_t81x_ptc_handler_eoc>:
    1afe:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    1b02:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    1b06:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    1b0a:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <current_measure_channel>
    1b0e:	90 91 71 3e 	lds	r25, 0x3E71	; 0x803e71 <current_measure_channel+0x1>
    1b12:	9c 01       	movw	r18, r24
    1b14:	22 0f       	add	r18, r18
    1b16:	33 1f       	adc	r19, r19
    1b18:	e0 91 b0 3e 	lds	r30, 0x3EB0	; 0x803eb0 <qtm_raw_data_measurements_ptr>
    1b1c:	f0 91 b1 3e 	lds	r31, 0x3EB1	; 0x803eb1 <qtm_raw_data_measurements_ptr+0x1>
    1b20:	e2 0f       	add	r30, r18
    1b22:	f3 1f       	adc	r31, r19
    1b24:	40 83       	st	Z, r20
    1b26:	51 83       	std	Z+1, r21	; 0x01
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	80 93 70 3e 	sts	0x3E70, r24	; 0x803e70 <current_measure_channel>
    1b2e:	90 93 71 3e 	sts	0x3E71, r25	; 0x803e71 <current_measure_channel+0x1>
    1b32:	ae dc       	rcall	.-1700   	; 0x1490 <select_next_channel_to_measure>
    1b34:	81 11       	cpse	r24, r1
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <qtm_t81x_ptc_handler_eoc+0x4a>
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <touch_seq_lib_state>
    1b3e:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <current_measure_channel>
    1b42:	90 91 71 3e 	lds	r25, 0x3E71	; 0x803e71 <current_measure_channel+0x1>
    1b46:	d7 cc       	rjmp	.-1618   	; 0x14f6 <qtm_measure_node>
    1b48:	e0 91 6d 3e 	lds	r30, 0x3E6D	; 0x803e6d <ptc_seq_measure_complete_pointer>
    1b4c:	f0 91 6e 3e 	lds	r31, 0x3E6E	; 0x803e6e <ptc_seq_measure_complete_pointer+0x1>
    1b50:	09 94       	ijmp

00001b52 <__divmodhi4>:
    1b52:	97 fb       	bst	r25, 7
    1b54:	07 2e       	mov	r0, r23
    1b56:	16 f4       	brtc	.+4      	; 0x1b5c <__divmodhi4+0xa>
    1b58:	00 94       	com	r0
    1b5a:	06 d0       	rcall	.+12     	; 0x1b68 <__divmodhi4_neg1>
    1b5c:	77 fd       	sbrc	r23, 7
    1b5e:	08 d0       	rcall	.+16     	; 0x1b70 <__divmodhi4_neg2>
    1b60:	0b d0       	rcall	.+22     	; 0x1b78 <__udivmodhi4>
    1b62:	07 fc       	sbrc	r0, 7
    1b64:	05 d0       	rcall	.+10     	; 0x1b70 <__divmodhi4_neg2>
    1b66:	3e f4       	brtc	.+14     	; 0x1b76 <__divmodhi4_exit>

00001b68 <__divmodhi4_neg1>:
    1b68:	90 95       	com	r25
    1b6a:	81 95       	neg	r24
    1b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6e:	08 95       	ret

00001b70 <__divmodhi4_neg2>:
    1b70:	70 95       	com	r23
    1b72:	61 95       	neg	r22
    1b74:	7f 4f       	sbci	r23, 0xFF	; 255

00001b76 <__divmodhi4_exit>:
    1b76:	08 95       	ret

00001b78 <__udivmodhi4>:
    1b78:	aa 1b       	sub	r26, r26
    1b7a:	bb 1b       	sub	r27, r27
    1b7c:	51 e1       	ldi	r21, 0x11	; 17
    1b7e:	07 c0       	rjmp	.+14     	; 0x1b8e <__udivmodhi4_ep>

00001b80 <__udivmodhi4_loop>:
    1b80:	aa 1f       	adc	r26, r26
    1b82:	bb 1f       	adc	r27, r27
    1b84:	a6 17       	cp	r26, r22
    1b86:	b7 07       	cpc	r27, r23
    1b88:	10 f0       	brcs	.+4      	; 0x1b8e <__udivmodhi4_ep>
    1b8a:	a6 1b       	sub	r26, r22
    1b8c:	b7 0b       	sbc	r27, r23

00001b8e <__udivmodhi4_ep>:
    1b8e:	88 1f       	adc	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	5a 95       	dec	r21
    1b94:	a9 f7       	brne	.-22     	; 0x1b80 <__udivmodhi4_loop>
    1b96:	80 95       	com	r24
    1b98:	90 95       	com	r25
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	08 95       	ret

00001ba0 <_exit>:
    1ba0:	f8 94       	cli

00001ba2 <__stop_program>:
    1ba2:	ff cf       	rjmp	.-2      	; 0x1ba2 <__stop_program>
