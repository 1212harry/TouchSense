
Attiny814Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00803e00  00001c6c  00001d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c66  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000006  00009c66  00001c66  00001d1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000064  00803e5a  00803e5a  00001d7a  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001d7a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000320  00000000  00000000  00001de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005ea8  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026bd  00000000  00000000  00007fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a88  00000000  00000000  0000a66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000580  00000000  00000000  0000c0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002e81  00000000  00000000  0000c678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ee0  00000000  00000000  0000f4f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000250  00000000  00000000  000103d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	4e c0       	rjmp	.+156    	; 0xbe <__vector_16>
      22:	2a c4       	rjmp	.+2132   	; 0x878 <__vector_17>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	ec e6       	ldi	r30, 0x6C	; 108
      48:	fc e1       	ldi	r31, 0x1C	; 28
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	aa 35       	cpi	r26, 0x5A	; 90
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	aa e5       	ldi	r26, 0x5A	; 90
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ae 3b       	cpi	r26, 0xBE	; 190
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	30 d1       	rcall	.+608    	; 0x2c8 <main>
      68:	fc cd       	rjmp	.-1032   	; 0xfffffc62 <__eeprom_end+0xff7efc62>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	67 d4       	rcall	.+2254   	; 0x93c <system_init>

	touch_init();
      6e:	52 c3       	rjmp	.+1700   	; 0x714 <touch_init>

00000070 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	2f 93       	push	r18
      7c:	3f 93       	push	r19
      7e:	4f 93       	push	r20
      80:	5f 93       	push	r21
      82:	6f 93       	push	r22
      84:	7f 93       	push	r23
      86:	8f 93       	push	r24
      88:	9f 93       	push	r25
      8a:	af 93       	push	r26
      8c:	bf 93       	push	r27
      8e:	ef 93       	push	r30
      90:	ff 93       	push	r31
	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      92:	b2 d3       	rcall	.+1892   	; 0x7f8 <touch_timer_handler>
	RTC_CallBack();
      94:	80 d0       	rcall	.+256    	; 0x196 <RTC_CallBack>
	/* PIT interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      96:	81 e0       	ldi	r24, 0x01	; 1
      98:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
      9c:	ff 91       	pop	r31
      9e:	ef 91       	pop	r30
      a0:	bf 91       	pop	r27
      a2:	af 91       	pop	r26
      a4:	9f 91       	pop	r25
      a6:	8f 91       	pop	r24
      a8:	7f 91       	pop	r23
      aa:	6f 91       	pop	r22
      ac:	5f 91       	pop	r21
      ae:	4f 91       	pop	r20
      b0:	3f 91       	pop	r19
      b2:	2f 91       	pop	r18
      b4:	0f 90       	pop	r0
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	0f 90       	pop	r0
      ba:	1f 90       	pop	r1
      bc:	18 95       	reti

000000be <__vector_16>:

ISR(AC0_AC_vect)
{
      be:	1f 92       	push	r1
      c0:	0f 92       	push	r0
      c2:	0f b6       	in	r0, 0x3f	; 63
      c4:	0f 92       	push	r0
      c6:	11 24       	eor	r1, r1
      c8:	2f 93       	push	r18
      ca:	3f 93       	push	r19
      cc:	4f 93       	push	r20
      ce:	5f 93       	push	r21
      d0:	6f 93       	push	r22
      d2:	7f 93       	push	r23
      d4:	8f 93       	push	r24
      d6:	9f 93       	push	r25
      d8:	af 93       	push	r26
      da:	bf 93       	push	r27
      dc:	ef 93       	push	r30
      de:	ff 93       	push	r31
	/* Insert your AC interrupt handling code here */
	/* The interrupt flag has to be cleared manually */
	AC0.STATUS = AC_CMP_bm;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <__TEXT_REGION_LENGTH__+0x700677>
	LowBattery();
      e6:	4b d0       	rcall	.+150    	; 0x17e <LowBattery>
}
      e8:	ff 91       	pop	r31
      ea:	ef 91       	pop	r30
      ec:	bf 91       	pop	r27
      ee:	af 91       	pop	r26
      f0:	9f 91       	pop	r25
      f2:	8f 91       	pop	r24
      f4:	7f 91       	pop	r23
      f6:	6f 91       	pop	r22
      f8:	5f 91       	pop	r21
      fa:	4f 91       	pop	r20
      fc:	3f 91       	pop	r19
      fe:	2f 91       	pop	r18
     100:	0f 90       	pop	r0
     102:	0f be       	out	0x3f, r0	; 63
     104:	0f 90       	pop	r0
     106:	1f 90       	pop	r1
     108:	18 95       	reti

0000010a <TOUCH_GetTouchSignal>:
}

uint16_t TOUCH_GetTouchSignal(void)
{
	return TouchSignal;
}
     10a:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <TouchSignal>
     10e:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <TouchSignal+0x1>
     112:	08 95       	ret

00000114 <TOUCH_SetMeasureBusyFlag>:

void TOUCH_SetMeasureBusyFlag(void)
{
	measureBusyFlag = 1;
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <measureBusyFlag>
     11a:	08 95       	ret

0000011c <Radiotube_Handle>:
}

void Radiotube_Handle(void)
{
	if (RadiotubeState == OFF)
     11c:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <RadiotubeState>
     120:	81 30       	cpi	r24, 0x01	; 1
     122:	71 f4       	brne	.+28     	; 0x140 <Radiotube_Handle+0x24>
	{
		RadiotubeState = ON;
     124:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     128:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	2f e5       	ldi	r18, 0x5F	; 95
     12c:	3a ee       	ldi	r19, 0xEA	; 234
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	21 50       	subi	r18, 0x01	; 1
     132:	30 40       	sbci	r19, 0x00	; 0
     134:	90 40       	sbci	r25, 0x00	; 0
     136:	e1 f7       	brne	.-8      	; 0x130 <Radiotube_Handle+0x14>
     138:	00 c0       	rjmp	.+0      	; 0x13a <Radiotube_Handle+0x1e>
     13a:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     13c:	28 98       	cbi	0x05, 0	; 5
     13e:	0e c0       	rjmp	.+28     	; 0x15c <Radiotube_Handle+0x40>
		IO1_set_level(false);
		edgeDetectFreeze = 1;
	}
	else
	{
		RadiotubeState = OFF;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	80 93 03 3e 	sts	0x3E03, r24	; 0x803e03 <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     146:	29 9a       	sbi	0x05, 1	; 5
     148:	2f e5       	ldi	r18, 0x5F	; 95
     14a:	3a ee       	ldi	r19, 0xEA	; 234
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	21 50       	subi	r18, 0x01	; 1
     150:	30 40       	sbci	r19, 0x00	; 0
     152:	90 40       	sbci	r25, 0x00	; 0
     154:	e1 f7       	brne	.-8      	; 0x14e <Radiotube_Handle+0x32>
     156:	00 c0       	rjmp	.+0      	; 0x158 <Radiotube_Handle+0x3c>
     158:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     15a:	29 98       	cbi	0x05, 1	; 5
		IO2_set_level(true);
		_delay_ms(30);
		IO2_set_level(false);
		edgeDetectFreeze = 1;
     15c:	80 93 67 3e 	sts	0x3E67, r24	; 0x803e67 <edgeDetectFreeze>
     160:	08 95       	ret

00000162 <MCU_GoToSleep>:
}

void MCU_GoToSleep(int mode)
{
	// Set sleep mode to Power Down mode
	set_sleep_mode(mode);
     162:	e0 e5       	ldi	r30, 0x50	; 80
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	90 81       	ld	r25, Z
     168:	99 7f       	andi	r25, 0xF9	; 249
     16a:	89 2b       	or	r24, r25
     16c:	80 83       	st	Z, r24
	sleep_enable();
     16e:	80 81       	ld	r24, Z
     170:	81 60       	ori	r24, 0x01	; 1
     172:	80 83       	st	Z, r24
	sleep_cpu();
     174:	88 95       	sleep
	sleep_disable();
     176:	80 81       	ld	r24, Z
     178:	8e 7f       	andi	r24, 0xFE	; 254
     17a:	80 83       	st	Z, r24
     17c:	08 95       	ret

0000017e <LowBattery>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     17e:	28 9a       	sbi	0x05, 0	; 5
     180:	2f e5       	ldi	r18, 0x5F	; 95
     182:	8a ee       	ldi	r24, 0xEA	; 234
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	21 50       	subi	r18, 0x01	; 1
     188:	80 40       	sbci	r24, 0x00	; 0
     18a:	90 40       	sbci	r25, 0x00	; 0
     18c:	e1 f7       	brne	.-8      	; 0x186 <LowBattery+0x8>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <LowBattery+0x12>
     190:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     192:	28 98       	cbi	0x05, 0	; 5
     194:	ff cf       	rjmp	.-2      	; 0x194 <LowBattery+0x16>

00000196 <RTC_CallBack>:


void RTC_CallBack(void)
{
	/* count the time when the  finger on */
	if (SensorState == FINGER_OFF_DETECT)
     196:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <SensorState>
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	49 f4       	brne	.+18     	; 0x1b0 <RTC_CallBack+0x1a>
		fingerOnCnt++;
     19e:	80 91 6c 3e 	lds	r24, 0x3E6C	; 0x803e6c <fingerOnCnt>
     1a2:	90 91 6d 3e 	lds	r25, 0x3E6D	; 0x803e6d <fingerOnCnt+0x1>
     1a6:	01 96       	adiw	r24, 0x01	; 1
     1a8:	80 93 6c 3e 	sts	0x3E6C, r24	; 0x803e6c <fingerOnCnt>
     1ac:	90 93 6d 3e 	sts	0x3E6D, r25	; 0x803e6d <fingerOnCnt+0x1>
	
	/* freeze the edge detection for 500 ms after open the radiotube */
	if(edgeDetectFreeze == 1)
     1b0:	80 91 67 3e 	lds	r24, 0x3E67	; 0x803e67 <edgeDetectFreeze>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	49 f4       	brne	.+18     	; 0x1ca <RTC_CallBack+0x34>
		edgeFreezeCnt++;
     1b8:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <edgeFreezeCnt>
     1bc:	90 91 66 3e 	lds	r25, 0x3E66	; 0x803e66 <edgeFreezeCnt+0x1>
     1c0:	01 96       	adiw	r24, 0x01	; 1
     1c2:	80 93 65 3e 	sts	0x3E65, r24	; 0x803e65 <edgeFreezeCnt>
     1c6:	90 93 66 3e 	sts	0x3E66, r25	; 0x803e66 <edgeFreezeCnt+0x1>

	if (edgeFreezeCnt > RADIOTUBE_FREEZE_TIME_MS(500))
     1ca:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <edgeFreezeCnt>
     1ce:	90 91 66 3e 	lds	r25, 0x3E66	; 0x803e66 <edgeFreezeCnt+0x1>
     1d2:	40 97       	sbiw	r24, 0x10	; 16
     1d4:	30 f0       	brcs	.+12     	; 0x1e2 <RTC_CallBack+0x4c>
	{
		edgeFreezeCnt = 0;
     1d6:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <edgeFreezeCnt>
     1da:	10 92 66 3e 	sts	0x3E66, r1	; 0x803e66 <edgeFreezeCnt+0x1>
		edgeDetectFreeze = 0;
     1de:	10 92 67 3e 	sts	0x3E67, r1	; 0x803e67 <edgeDetectFreeze>
	}
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
     1e2:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <RadiotubeState>
     1e6:	81 11       	cpse	r24, r1
     1e8:	23 c0       	rjmp	.+70     	; 0x230 <RTC_CallBack+0x9a>
	{
		RadiotubeOnTime++;
     1ea:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <RadiotubeOnTime>
     1ee:	90 91 69 3e 	lds	r25, 0x3E69	; 0x803e69 <RadiotubeOnTime+0x1>
     1f2:	a0 91 6a 3e 	lds	r26, 0x3E6A	; 0x803e6a <RadiotubeOnTime+0x2>
     1f6:	b0 91 6b 3e 	lds	r27, 0x3E6B	; 0x803e6b <RadiotubeOnTime+0x3>
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	a1 1d       	adc	r26, r1
     1fe:	b1 1d       	adc	r27, r1
		if(RadiotubeOnTime > RADIOTUBE_AUTO_CLOSE_TIME_MIN(3))
     200:	8a 3f       	cpi	r24, 0xFA	; 250
     202:	25 e1       	ldi	r18, 0x15	; 21
     204:	92 07       	cpc	r25, r18
     206:	a1 05       	cpc	r26, r1
     208:	b1 05       	cpc	r27, r1
     20a:	48 f4       	brcc	.+18     	; 0x21e <RTC_CallBack+0x88>
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
	{
		RadiotubeOnTime++;
     20c:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <RadiotubeOnTime>
     210:	90 93 69 3e 	sts	0x3E69, r25	; 0x803e69 <RadiotubeOnTime+0x1>
     214:	a0 93 6a 3e 	sts	0x3E6A, r26	; 0x803e6a <RadiotubeOnTime+0x2>
     218:	b0 93 6b 3e 	sts	0x3E6B, r27	; 0x803e6b <RadiotubeOnTime+0x3>
     21c:	08 95       	ret
		if(RadiotubeOnTime > RADIOTUBE_AUTO_CLOSE_TIME_MIN(3))
		{
			RadiotubeOnTime = 0;
     21e:	10 92 68 3e 	sts	0x3E68, r1	; 0x803e68 <RadiotubeOnTime>
     222:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <RadiotubeOnTime+0x1>
     226:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <RadiotubeOnTime+0x2>
     22a:	10 92 6b 3e 	sts	0x3E6B, r1	; 0x803e6b <RadiotubeOnTime+0x3>
			Radiotube_Handle();
     22e:	76 cf       	rjmp	.-276    	; 0x11c <Radiotube_Handle>
     230:	08 95       	ret

00000232 <TOUCH_DeltaSmoothing>:

int16_t TOUCH_DeltaSmoothing(int16_t curDelta)
{
	int16_t tempDelta;
	
	tempDelta = curDelta - preDebugFilteredDeltaValue;
     232:	40 91 5f 3e 	lds	r20, 0x3E5F	; 0x803e5f <preDebugFilteredDeltaValue>
     236:	50 91 60 3e 	lds	r21, 0x3E60	; 0x803e60 <preDebugFilteredDeltaValue+0x1>
     23a:	9c 01       	movw	r18, r24
     23c:	24 1b       	sub	r18, r20
     23e:	35 0b       	sbc	r19, r21
	
	if (abs(tempDelta) >= STRONG_EDGE_THRESHOLD)
     240:	b9 01       	movw	r22, r18
     242:	37 ff       	sbrs	r19, 7
     244:	04 c0       	rjmp	.+8      	; 0x24e <TOUCH_DeltaSmoothing+0x1c>
     246:	66 27       	eor	r22, r22
     248:	77 27       	eor	r23, r23
     24a:	62 1b       	sub	r22, r18
     24c:	73 0b       	sbc	r23, r19
     24e:	e0 91 06 3e 	lds	r30, 0x3E06	; 0x803e06 <STRONG_EDGE_THRESHOLD>
     252:	f0 91 07 3e 	lds	r31, 0x3E07	; 0x803e07 <STRONG_EDGE_THRESHOLD+0x1>
     256:	6e 17       	cp	r22, r30
     258:	7f 07       	cpc	r23, r31
     25a:	68 f4       	brcc	.+26     	; 0x276 <TOUCH_DeltaSmoothing+0x44>
	{
		/* this is an strong edge */
		debugFilteredDeltaValue = curDelta;
	}
	else if (abs(tempDelta) >= WEAK_EDGE_THRESHOLD)
     25c:	e0 91 04 3e 	lds	r30, 0x3E04	; 0x803e04 <WEAK_EDGE_THRESHOLD>
     260:	f0 91 05 3e 	lds	r31, 0x3E05	; 0x803e05 <WEAK_EDGE_THRESHOLD+0x1>
     264:	6e 17       	cp	r22, r30
     266:	7f 07       	cpc	r23, r31
     268:	58 f0       	brcs	.+22     	; 0x280 <TOUCH_DeltaSmoothing+0x4e>
	{
		/* this is an weak edge */
		debugFilteredDeltaValue = (preDebugFilteredDeltaValue * 5 + curDelta * 5)/10;
     26a:	84 0f       	add	r24, r20
     26c:	95 1f       	adc	r25, r21
     26e:	97 fd       	sbrc	r25, 7
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	95 95       	asr	r25
     274:	87 95       	ror	r24
     276:	80 93 5d 3e 	sts	0x3E5D, r24	; 0x803e5d <debugFilteredDeltaValue>
     27a:	90 93 5e 3e 	sts	0x3E5E, r25	; 0x803e5e <debugFilteredDeltaValue+0x1>
     27e:	0f c0       	rjmp	.+30     	; 0x29e <TOUCH_DeltaSmoothing+0x6c>
	}
	else
	{
		/* this should be suppressed */
		debugFilteredDeltaValue = (preDebugFilteredDeltaValue * 9 + curDelta)/10;
     280:	e9 e0       	ldi	r30, 0x09	; 9
     282:	e4 9f       	mul	r30, r20
     284:	b0 01       	movw	r22, r0
     286:	e5 9f       	mul	r30, r21
     288:	70 0d       	add	r23, r0
     28a:	11 24       	eor	r1, r1
     28c:	86 0f       	add	r24, r22
     28e:	97 1f       	adc	r25, r23
     290:	6a e0       	ldi	r22, 0x0A	; 10
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	d3 dc       	rcall	.-1626   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     296:	60 93 5d 3e 	sts	0x3E5D, r22	; 0x803e5d <debugFilteredDeltaValue>
     29a:	70 93 5e 3e 	sts	0x3E5E, r23	; 0x803e5e <debugFilteredDeltaValue+0x1>
	}
	
	preDebugFilteredDeltaValue = debugFilteredDeltaValue;
     29e:	80 91 5d 3e 	lds	r24, 0x3E5D	; 0x803e5d <debugFilteredDeltaValue>
     2a2:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <debugFilteredDeltaValue+0x1>
     2a6:	80 93 5f 3e 	sts	0x3E5F, r24	; 0x803e5f <preDebugFilteredDeltaValue>
     2aa:	90 93 60 3e 	sts	0x3E60, r25	; 0x803e60 <preDebugFilteredDeltaValue+0x1>
	
	if (edgeDetectFreeze == 1)
     2ae:	80 91 67 3e 	lds	r24, 0x3E67	; 0x803e67 <edgeDetectFreeze>
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	11 f4       	brne	.+4      	; 0x2ba <TOUCH_DeltaSmoothing+0x88>
		tempDelta = 0;
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
		
	return abs(tempDelta);
     2ba:	c9 01       	movw	r24, r18
     2bc:	37 ff       	sbrs	r19, 7
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <TOUCH_DeltaSmoothing+0x94>
     2c0:	91 95       	neg	r25
     2c2:	81 95       	neg	r24
     2c4:	91 09       	sbc	r25, r1
}
     2c6:	08 95       	ret

000002c8 <main>:

int main(void)
{
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     2c8:	d1 de       	rcall	.-606    	; 0x6c <atmel_start_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     2ca:	29 9a       	sbi	0x05, 1	; 5
     2cc:	2f e5       	ldi	r18, 0x5F	; 95
     2ce:	8a ee       	ldi	r24, 0xEA	; 234
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	80 40       	sbci	r24, 0x00	; 0
     2d6:	90 40       	sbci	r25, 0x00	; 0
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0xa>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x14>
     2dc:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2de:	29 98       	cbi	0x05, 1	; 5
		TouchSignalGroupPtr = 0;
}

static void TOUCH_TouchSignal(void)
{
	TouchSignal = (TouchSignal * 9 + (TouchSignalGroup[0] + TouchSignalGroup[1]) / 2) / 10;
     2e0:	19 e0       	ldi	r17, 0x09	; 9
     2e2:	ca e0       	ldi	r28, 0x0A	; 10
     2e4:	d0 e0       	ldi	r29, 0x00	; 0
	STRONG_EDGE_THRESHOLD = TouchSignal * 7 / 10;
     2e6:	07 e0       	ldi	r16, 0x07	; 7
	//Radiotube_Test();
	
	/* Replace with your application code */
	while(1) 
	{
		wdt_reset();
     2e8:	a8 95       	wdr
{
	uint8_t keyStatus = 0;
	uint8_t edgeStatus = EDGE_NONE;
	
	///* Does acquisition and post-processing */
	touch_process();
     2ea:	54 d2       	rcall	.+1192   	; 0x794 <touch_process>
	
	if (measurement_done_touch == 0)
     2ec:	80 91 71 3e 	lds	r24, 0x3E71	; 0x803e71 <measurement_done_touch>
     2f0:	88 23       	and	r24, r24
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <main+0x2e>
     2f4:	3f c1       	rjmp	.+638    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
	int16_t curDelta;
	int16_t tempDelta;
	uint8_t edgeStatus = EDGE_NONE,i;
	int16_t edgeGroupSum = 0;
	
	curDelta = get_sensor_node_signal(0);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	88 d2       	rcall	.+1296   	; 0x80c <get_sensor_node_signal>
     2fc:	7c 01       	movw	r14, r24
	curDelta -= get_sensor_node_reference(0);
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	91 d2       	rcall	.+1314   	; 0x826 <get_sensor_node_reference>
     304:	a7 01       	movw	r20, r14
     306:	48 1b       	sub	r20, r24
     308:	59 0b       	sbc	r21, r25
	
	tempDelta = curDelta - preFilteredDeltaValue;
     30a:	20 91 61 3e 	lds	r18, 0x3E61	; 0x803e61 <preFilteredDeltaValue>
     30e:	30 91 62 3e 	lds	r19, 0x3E62	; 0x803e62 <preFilteredDeltaValue+0x1>
     312:	7a 01       	movw	r14, r20
     314:	e2 1a       	sub	r14, r18
     316:	f3 0a       	sbc	r15, r19
	
	if (abs(tempDelta) >= STRONG_EDGE_THRESHOLD)
     318:	b7 01       	movw	r22, r14
     31a:	f7 fe       	sbrs	r15, 7
     31c:	04 c0       	rjmp	.+8      	; 0x326 <main+0x5e>
     31e:	66 27       	eor	r22, r22
     320:	77 27       	eor	r23, r23
     322:	6e 19       	sub	r22, r14
     324:	7f 09       	sbc	r23, r15
     326:	a0 91 06 3e 	lds	r26, 0x3E06	; 0x803e06 <STRONG_EDGE_THRESHOLD>
     32a:	b0 91 07 3e 	lds	r27, 0x3E07	; 0x803e07 <STRONG_EDGE_THRESHOLD+0x1>
     32e:	6a 17       	cp	r22, r26
     330:	7b 07       	cpc	r23, r27
     332:	18 f1       	brcs	.+70     	; 0x37a <main+0xb2>
	{
		/* this is an strong edge */
		if(tempDelta > 0)
     334:	1e 14       	cp	r1, r14
     336:	1f 04       	cpc	r1, r15
     338:	14 f0       	brlt	.+4      	; 0x33e <main+0x76>
			edgeStatus = EDGE_RISING;
		else 
			edgeStatus = EDGE_FALLING;
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	01 c0       	rjmp	.+2      	; 0x340 <main+0x78>
	
	if (abs(tempDelta) >= STRONG_EDGE_THRESHOLD)
	{
		/* this is an strong edge */
		if(tempDelta > 0)
			edgeStatus = EDGE_RISING;
     33e:	91 e0       	ldi	r25, 0x01	; 1
		else 
			edgeStatus = EDGE_FALLING;
		
		filteredDeltaValue = curDelta;
     340:	40 93 63 3e 	sts	0x3E63, r20	; 0x803e63 <filteredDeltaValue>
     344:	50 93 64 3e 	sts	0x3E64, r21	; 0x803e64 <filteredDeltaValue+0x1>

static void TOUCH_ClearEdgeGroup(void)
{
	uint8_t i;
	
	edgeGroupPtr = 0;
     348:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <__data_end>
	for (i = 0; i < 4; i++)
		edgeGroup[edgeGroupPtr] = 0;
     34c:	10 92 7c 3e 	sts	0x3E7C, r1	; 0x803e7c <edgeGroup>
     350:	10 92 7d 3e 	sts	0x3E7D, r1	; 0x803e7d <edgeGroup+0x1>
uint16_t TouchSignalGroup[2];
uint8_t	TouchSignalGroupPtr = 0;

static void TOUCH_TouchSignalCollect(uint16_t signal)
{
	TouchSignalGroup[TouchSignalGroupPtr++] = signal;
     354:	e0 91 5b 3e 	lds	r30, 0x3E5B	; 0x803e5b <TouchSignalGroupPtr>
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	8e 0f       	add	r24, r30
     35c:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <TouchSignalGroupPtr>
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	ec 57       	subi	r30, 0x7C	; 124
     368:	f1 4c       	sbci	r31, 0xC1	; 193
     36a:	60 83       	st	Z, r22
     36c:	71 83       	std	Z+1, r23	; 0x01
	if (TouchSignalGroupPtr >= 2)
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	08 f4       	brcc	.+2      	; 0x374 <main+0xac>
     372:	82 c0       	rjmp	.+260    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		TouchSignalGroupPtr = 0;
     374:	10 92 5b 3e 	sts	0x3E5B, r1	; 0x803e5b <TouchSignalGroupPtr>
     378:	7f c0       	rjmp	.+254    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		
		filteredDeltaValue = curDelta;
		TOUCH_ClearEdgeGroup();
		TOUCH_TouchSignalCollect(abs(tempDelta));
	}
	else if (abs(tempDelta) >= WEAK_EDGE_THRESHOLD)
     37a:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <WEAK_EDGE_THRESHOLD>
     37e:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <WEAK_EDGE_THRESHOLD+0x1>
     382:	e0 91 5a 3e 	lds	r30, 0x3E5A	; 0x803e5a <__data_end>
     386:	68 17       	cp	r22, r24
     388:	79 07       	cpc	r23, r25
     38a:	08 f4       	brcc	.+2      	; 0x38e <main+0xc6>
     38c:	56 c0       	rjmp	.+172    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	{
		/* this is an weak edge */
		
		filteredDeltaValue = (preFilteredDeltaValue * 5 + curDelta * 5)/10;
     38e:	ca 01       	movw	r24, r20
     390:	82 0f       	add	r24, r18
     392:	93 1f       	adc	r25, r19
     394:	97 fd       	sbrc	r25, 7
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	95 95       	asr	r25
     39a:	87 95       	ror	r24
     39c:	80 93 63 3e 	sts	0x3E63, r24	; 0x803e63 <filteredDeltaValue>
     3a0:	90 93 64 3e 	sts	0x3E64, r25	; 0x803e64 <filteredDeltaValue+0x1>
		
		/* if the sum of continuous four edges exceed the 
			strong threshold, an effective status should
			be return.*/
		edgeGroup[edgeGroupPtr++] = tempDelta;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	8e 0f       	add	r24, r30
     3a8:	80 93 5a 3e 	sts	0x3E5A, r24	; 0x803e5a <__data_end>
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ee 0f       	add	r30, r30
     3b0:	ff 1f       	adc	r31, r31
     3b2:	e4 58       	subi	r30, 0x84	; 132
     3b4:	f1 4c       	sbci	r31, 0xC1	; 193
     3b6:	e0 82       	st	Z, r14
     3b8:	f1 82       	std	Z+1, r15	; 0x01
		if (edgeGroupPtr >= 4)
     3ba:	84 30       	cpi	r24, 0x04	; 4
     3bc:	10 f0       	brcs	.+4      	; 0x3c2 <main+0xfa>
			edgeGroupPtr = 0;
     3be:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <__data_end>
		
		for (i = 0; i < 4; i++)
			edgeGroupSum += edgeGroup[i];
     3c2:	20 91 7c 3e 	lds	r18, 0x3E7C	; 0x803e7c <edgeGroup>
     3c6:	30 91 7d 3e 	lds	r19, 0x3E7D	; 0x803e7d <edgeGroup+0x1>
     3ca:	80 91 7e 3e 	lds	r24, 0x3E7E	; 0x803e7e <edgeGroup+0x2>
     3ce:	90 91 7f 3e 	lds	r25, 0x3E7F	; 0x803e7f <edgeGroup+0x3>
     3d2:	82 0f       	add	r24, r18
     3d4:	93 1f       	adc	r25, r19
     3d6:	20 91 80 3e 	lds	r18, 0x3E80	; 0x803e80 <edgeGroup+0x4>
     3da:	30 91 81 3e 	lds	r19, 0x3E81	; 0x803e81 <edgeGroup+0x5>
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	20 91 82 3e 	lds	r18, 0x3E82	; 0x803e82 <edgeGroup+0x6>
     3e6:	30 91 83 3e 	lds	r19, 0x3E83	; 0x803e83 <edgeGroup+0x7>
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
			
		if (abs(edgeGroupSum) >= STRONG_EDGE_THRESHOLD)
     3ee:	9c 01       	movw	r18, r24
     3f0:	97 ff       	sbrs	r25, 7
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <main+0x134>
     3f4:	22 27       	eor	r18, r18
     3f6:	33 27       	eor	r19, r19
     3f8:	28 1b       	sub	r18, r24
     3fa:	39 0b       	sbc	r19, r25
     3fc:	2a 17       	cp	r18, r26
     3fe:	3b 07       	cpc	r19, r27
     400:	c0 f1       	brcs	.+112    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>

static void TOUCH_ClearEdgeGroup(void)
{
	uint8_t i;
	
	edgeGroupPtr = 0;
     402:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <__data_end>
	for (i = 0; i < 4; i++)
		edgeGroup[edgeGroupPtr] = 0;
     406:	10 92 7c 3e 	sts	0x3E7C, r1	; 0x803e7c <edgeGroup>
     40a:	10 92 7d 3e 	sts	0x3E7D, r1	; 0x803e7d <edgeGroup+0x1>
uint16_t TouchSignalGroup[2];
uint8_t	TouchSignalGroupPtr = 0;

static void TOUCH_TouchSignalCollect(uint16_t signal)
{
	TouchSignalGroup[TouchSignalGroupPtr++] = signal;
     40e:	e0 91 5b 3e 	lds	r30, 0x3E5B	; 0x803e5b <TouchSignalGroupPtr>
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	4e 0f       	add	r20, r30
     416:	40 93 5b 3e 	sts	0x3E5B, r20	; 0x803e5b <TouchSignalGroupPtr>
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	ec 57       	subi	r30, 0x7C	; 124
     422:	f1 4c       	sbci	r31, 0xC1	; 193
     424:	20 83       	st	Z, r18
     426:	31 83       	std	Z+1, r19	; 0x01
	if (TouchSignalGroupPtr >= 2)
     428:	42 30       	cpi	r20, 0x02	; 2
     42a:	10 f0       	brcs	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		TouchSignalGroupPtr = 0;
     42c:	10 92 5b 3e 	sts	0x3E5B, r1	; 0x803e5b <TouchSignalGroupPtr>
			
		if (abs(edgeGroupSum) >= STRONG_EDGE_THRESHOLD)
		{
			TOUCH_ClearEdgeGroup();
			TOUCH_TouchSignalCollect(abs(edgeGroupSum));
			if (edgeGroupSum > 0)
     430:	18 16       	cp	r1, r24
     432:	19 06       	cpc	r1, r25
     434:	04 f1       	brlt	.+64     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
				edgeStatus = EDGE_RISING; 
			else
				edgeStatus = EDGE_FALLING;
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	1f c0       	rjmp	.+62     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		}
	}
	else
	{
		/* this should be suppressed */
		filteredDeltaValue = (preFilteredDeltaValue * 9 + curDelta)/10;
     43a:	12 9f       	mul	r17, r18
     43c:	c0 01       	movw	r24, r0
     43e:	13 9f       	mul	r17, r19
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	84 0f       	add	r24, r20
     446:	95 1f       	adc	r25, r21
     448:	be 01       	movw	r22, r28
     44a:	f8 db       	rcall	.-2064   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
     44c:	60 93 63 3e 	sts	0x3E63, r22	; 0x803e63 <filteredDeltaValue>
     450:	70 93 64 3e 	sts	0x3E64, r23	; 0x803e64 <filteredDeltaValue+0x1>
		
		edgeGroup[edgeGroupPtr++] = 0;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	8e 0f       	add	r24, r30
     458:	80 93 5a 3e 	sts	0x3E5A, r24	; 0x803e5a <__data_end>
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	e4 58       	subi	r30, 0x84	; 132
     464:	f1 4c       	sbci	r31, 0xC1	; 193
     466:	10 82       	st	Z, r1
     468:	11 82       	std	Z+1, r1	; 0x01
		if (edgeGroupPtr >= 4)
     46a:	84 30       	cpi	r24, 0x04	; 4
     46c:	10 f0       	brcs	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			edgeGroupPtr = 0;
     46e:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <__data_end>

static uint8_t TOUCH_DeltaEdgeDetct(void)
{
	int16_t curDelta;
	int16_t tempDelta;
	uint8_t edgeStatus = EDGE_NONE,i;
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	01 c0       	rjmp	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		if (abs(edgeGroupSum) >= STRONG_EDGE_THRESHOLD)
		{
			TOUCH_ClearEdgeGroup();
			TOUCH_TouchSignalCollect(abs(edgeGroupSum));
			if (edgeGroupSum > 0)
				edgeStatus = EDGE_RISING; 
     476:	91 e0       	ldi	r25, 0x01	; 1
		edgeGroup[edgeGroupPtr++] = 0;
		if (edgeGroupPtr >= 4)
			edgeGroupPtr = 0;
	}
	
	preFilteredDeltaValue = filteredDeltaValue;
     478:	20 91 63 3e 	lds	r18, 0x3E63	; 0x803e63 <filteredDeltaValue>
     47c:	30 91 64 3e 	lds	r19, 0x3E64	; 0x803e64 <filteredDeltaValue+0x1>
     480:	20 93 61 3e 	sts	0x3E61, r18	; 0x803e61 <preFilteredDeltaValue>
     484:	30 93 62 3e 	sts	0x3E62, r19	; 0x803e62 <preFilteredDeltaValue+0x1>
	if (measurement_done_touch == 0)
		return keyStatus;
		
	edgeStatus = TOUCH_DeltaEdgeDetct();
	
	if (edgeDetectFreeze == 1)
     488:	80 91 67 3e 	lds	r24, 0x3E67	; 0x803e67 <edgeDetectFreeze>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	71 c0       	rjmp	.+226    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		return keyStatus;

	switch(SensorState)
     492:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <SensorState>
     496:	88 23       	and	r24, r24
     498:	19 f0       	breq	.+6      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	39 f0       	breq	.+14     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     49e:	62 c0       	rjmp	.+196    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
	{
		case FINGER_ON_DETECT:
			if (edgeStatus == EDGE_RISING)
     4a0:	91 30       	cpi	r25, 0x01	; 1
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a4:	5f c0       	rjmp	.+190    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
				SensorState = FINGER_OFF_DETECT;
     4a6:	90 93 6e 3e 	sts	0x3E6E, r25	; 0x803e6e <SensorState>
     4aa:	5c c0       	rjmp	.+184    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
		break;
		
		case FINGER_OFF_DETECT:
			/* state will roll back if rising edge appears. */
			if (edgeStatus == EDGE_RISING)
     4ac:	91 30       	cpi	r25, 0x01	; 1
     4ae:	29 f4       	brne	.+10     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				fingerOnCnt = 0;
     4b0:	10 92 6c 3e 	sts	0x3E6C, r1	; 0x803e6c <fingerOnCnt>
     4b4:	10 92 6d 3e 	sts	0x3E6D, r1	; 0x803e6d <fingerOnCnt+0x1>
     4b8:	55 c0       	rjmp	.+170    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			/* the time duration of effective touch should between 70ms to 1000ms */
			else if (fingerOnCnt >= FINGER_ON_MAXIMUM_TIME_MS(1000))
     4ba:	20 91 6c 3e 	lds	r18, 0x3E6C	; 0x803e6c <fingerOnCnt>
     4be:	30 91 6d 3e 	lds	r19, 0x3E6D	; 0x803e6d <fingerOnCnt+0x1>
     4c2:	2f 31       	cpi	r18, 0x1F	; 31
     4c4:	31 05       	cpc	r19, r1
     4c6:	38 f0       	brcs	.+14     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			{
				fingerOnCnt = 0;
     4c8:	10 92 6c 3e 	sts	0x3E6C, r1	; 0x803e6c <fingerOnCnt>
     4cc:	10 92 6d 3e 	sts	0x3E6D, r1	; 0x803e6d <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     4d0:	10 92 6e 3e 	sts	0x3E6E, r1	; 0x803e6e <SensorState>
     4d4:	47 c0       	rjmp	.+142    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			}
			else if (edgeStatus == EDGE_FALLING)
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	09 f0       	breq	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4da:	44 c0       	rjmp	.+136    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			{
				if (fingerOnCnt >= FINGER_ON_MINIMUM_TIME_MS(70))
     4dc:	80 91 6c 3e 	lds	r24, 0x3E6C	; 0x803e6c <fingerOnCnt>
     4e0:	90 91 6d 3e 	lds	r25, 0x3E6D	; 0x803e6d <fingerOnCnt+0x1>
     4e4:	02 97       	sbiw	r24, 0x02	; 2
     4e6:	b0 f1       	brcs	.+108    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		TouchSignalGroupPtr = 0;
}

static void TOUCH_TouchSignal(void)
{
	TouchSignal = (TouchSignal * 9 + (TouchSignalGroup[0] + TouchSignalGroup[1]) / 2) / 10;
     4e8:	20 91 84 3e 	lds	r18, 0x3E84	; 0x803e84 <TouchSignalGroup>
     4ec:	30 91 85 3e 	lds	r19, 0x3E85	; 0x803e85 <TouchSignalGroup+0x1>
     4f0:	80 91 86 3e 	lds	r24, 0x3E86	; 0x803e86 <TouchSignalGroup+0x2>
     4f4:	90 91 87 3e 	lds	r25, 0x3E87	; 0x803e87 <TouchSignalGroup+0x3>
     4f8:	82 0f       	add	r24, r18
     4fa:	93 1f       	adc	r25, r19
     4fc:	96 95       	lsr	r25
     4fe:	87 95       	ror	r24
     500:	40 91 00 3e 	lds	r20, 0x3E00	; 0x803e00 <TouchSignal>
     504:	50 91 01 3e 	lds	r21, 0x3E01	; 0x803e01 <TouchSignal+0x1>
     508:	14 9f       	mul	r17, r20
     50a:	90 01       	movw	r18, r0
     50c:	15 9f       	mul	r17, r21
     50e:	30 0d       	add	r19, r0
     510:	11 24       	eor	r1, r1
     512:	82 0f       	add	r24, r18
     514:	93 1f       	adc	r25, r19
     516:	be 01       	movw	r22, r28
     518:	7d db       	rcall	.-2310   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     51a:	9b 01       	movw	r18, r22
     51c:	60 93 00 3e 	sts	0x3E00, r22	; 0x803e00 <TouchSignal>
     520:	70 93 01 3e 	sts	0x3E01, r23	; 0x803e01 <TouchSignal+0x1>
	STRONG_EDGE_THRESHOLD = TouchSignal * 7 / 10;
     524:	06 9f       	mul	r16, r22
     526:	c0 01       	movw	r24, r0
     528:	07 9f       	mul	r16, r23
     52a:	90 0d       	add	r25, r0
     52c:	11 24       	eor	r1, r1
     52e:	be 01       	movw	r22, r28
     530:	71 db       	rcall	.-2334   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     532:	60 93 06 3e 	sts	0x3E06, r22	; 0x803e06 <STRONG_EDGE_THRESHOLD>
     536:	70 93 07 3e 	sts	0x3E07, r23	; 0x803e07 <STRONG_EDGE_THRESHOLD+0x1>
	WEAK_EDGE_THRESHOLD = TouchSignal * 4 / 10;
     53a:	c9 01       	movw	r24, r18
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	be 01       	movw	r22, r28
     546:	66 db       	rcall	.-2356   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     548:	60 93 04 3e 	sts	0x3E04, r22	; 0x803e04 <WEAK_EDGE_THRESHOLD>
     54c:	70 93 05 3e 	sts	0x3E05, r23	; 0x803e05 <WEAK_EDGE_THRESHOLD+0x1>
			}
			else if (edgeStatus == EDGE_FALLING)
			{
				if (fingerOnCnt >= FINGER_ON_MINIMUM_TIME_MS(70))
				{
					keyStatus = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	01 c0       	rjmp	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
	//return SNR;
//}

static uint8_t TOUCH_TouchDetect(void)
{
	uint8_t keyStatus = 0;
     554:	80 e0       	ldi	r24, 0x00	; 0
				{
					keyStatus = 1;
					TOUCH_TouchSignal();
				}
					
				fingerOnCnt = 0;
     556:	10 92 6c 3e 	sts	0x3E6C, r1	; 0x803e6c <fingerOnCnt>
     55a:	10 92 6d 3e 	sts	0x3E6D, r1	; 0x803e6d <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     55e:	10 92 6e 3e 	sts	0x3E6E, r1	; 0x803e6e <SensorState>
     562:	01 c0       	rjmp	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
	//return SNR;
//}

static uint8_t TOUCH_TouchDetect(void)
{
	uint8_t keyStatus = 0;
     564:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
	}
	
	/* one cycle of measurement is done */
	measurement_done_touch = 0;
     566:	10 92 71 3e 	sts	0x3E71, r1	; 0x803e71 <measurement_done_touch>
	measureBusyFlag = 0;
     56a:	10 92 5c 3e 	sts	0x3E5C, r1	; 0x803e5c <measureBusyFlag>
	/* Replace with your application code */
	while(1) 
	{
		wdt_reset();
		
		if(TOUCH_TouchDetect() == 1)
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	09 f4       	brne	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
			Radiotube_Handle();
     572:	d4 dd       	rcall	.-1112   	; 0x11c <Radiotube_Handle>
		
		if (measureBusyFlag == 0)
     574:	80 91 5c 3e 	lds	r24, 0x3E5C	; 0x803e5c <measureBusyFlag>
     578:	81 11       	cpse	r24, r1
     57a:	b6 ce       	rjmp	.-660    	; 0x2e8 <main+0x20>
			MCU_GoToSleep(SLEEP_MODE_IDLE);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	f0 dd       	rcall	.-1056   	; 0x162 <MCU_GoToSleep>
     582:	b2 ce       	rjmp	.-668    	; 0x2e8 <main+0x20>

00000584 <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     584:	08 95       	ret

00000586 <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     586:	cf 93       	push	r28
     588:	c8 2f       	mov	r28, r24
	while (!USART_is_tx_ready())
     58a:	27 d2       	rcall	.+1102   	; 0x9da <USART_is_tx_ready>
     58c:	88 23       	and	r24, r24
     58e:	e9 f3       	breq	.-6      	; 0x58a <datastreamer_transmit+0x4>
		;

	USART_write(data_byte);
     590:	8c 2f       	mov	r24, r28
     592:	31 d2       	rcall	.+1122   	; 0x9f6 <USART_write>

	while (USART_is_tx_busy())
     594:	28 d2       	rcall	.+1104   	; 0x9e6 <USART_is_tx_busy>
     596:	81 11       	cpse	r24, r1
     598:	fd cf       	rjmp	.-6      	; 0x594 <datastreamer_transmit+0xe>
		;
}
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <datastreamer_output+0xa>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
     5ac:	80 91 6f 3e 	lds	r24, 0x3E6F	; 0x803e6f <sequence.4391>
     5b0:	8f 70       	andi	r24, 0x0F	; 15
     5b2:	41 f0       	breq	.+16     	; 0x5c4 <datastreamer_output+0x26>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     5b4:	85 e5       	ldi	r24, 0x55	; 85
     5b6:	e7 df       	rcall	.-50     	; 0x586 <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     5b8:	80 91 6f 3e 	lds	r24, 0x3E6F	; 0x803e6f <sequence.4391>
     5bc:	e4 df       	rcall	.-56     	; 0x586 <datastreamer_transmit>

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     5be:	19 82       	std	Y+1, r1	; 0x01
     5c0:	1a 82       	std	Y+2, r1	; 0x02
     5c2:	49 c0       	rjmp	.+146    	; 0x656 <datastreamer_output+0xb8>
     5c4:	08 e0       	ldi	r16, 0x08	; 8
     5c6:	1e e3       	ldi	r17, 0x3E	; 62
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     5c8:	fe e3       	ldi	r31, 0x3E	; 62
     5ca:	0b 31       	cpi	r16, 0x1B	; 27
     5cc:	1f 07       	cpc	r17, r31
     5ce:	91 f3       	breq	.-28     	; 0x5b4 <datastreamer_output+0x16>
			datastreamer_transmit(data[i]);
     5d0:	f8 01       	movw	r30, r16
     5d2:	81 91       	ld	r24, Z+
     5d4:	8f 01       	movw	r16, r30
     5d6:	d7 df       	rcall	.-82     	; 0x586 <datastreamer_transmit>
     5d8:	f7 cf       	rjmp	.-18     	; 0x5c8 <datastreamer_output+0x2a>
	// Frame Start
	datastreamer_transmit(sequence);

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	9a 81       	ldd	r25, Y+2	; 0x02
     5de:	16 d1       	rcall	.+556    	; 0x80c <get_sensor_node_signal>
     5e0:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     5e2:	d1 df       	rcall	.-94     	; 0x586 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     5e4:	81 2f       	mov	r24, r17
     5e6:	cf df       	rcall	.-98     	; 0x586 <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	9a 81       	ldd	r25, Y+2	; 0x02
     5ec:	1c d1       	rcall	.+568    	; 0x826 <get_sensor_node_reference>
		u16temp_output = TOUCH_GetTouchSignal();
     5ee:	8d dd       	rcall	.-1254   	; 0x10a <TOUCH_GetTouchSignal>
     5f0:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     5f2:	c9 df       	rcall	.-110    	; 0x586 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     5f4:	81 2f       	mov	r24, r17
     5f6:	c7 df       	rcall	.-114    	; 0x586 <datastreamer_transmit>
		
		

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	9a 81       	ldd	r25, Y+2	; 0x02
     5fc:	07 d1       	rcall	.+526    	; 0x80c <get_sensor_node_signal>
     5fe:	8c 01       	movw	r16, r24
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	10 d1       	rcall	.+544    	; 0x826 <get_sensor_node_reference>
		
		/* delta smoothing */
		temp_int_calc = TOUCH_DeltaSmoothing(temp_int_calc);
     606:	98 01       	movw	r18, r16
     608:	28 1b       	sub	r18, r24
     60a:	39 0b       	sbc	r19, r25
     60c:	c9 01       	movw	r24, r18
     60e:	11 de       	rcall	.-990    	; 0x232 <TOUCH_DeltaSmoothing>
     610:	19 2f       	mov	r17, r25
		
		u16temp_output = (uint16_t)(temp_int_calc);
		datastreamer_transmit((uint8_t)u16temp_output);
     612:	b9 df       	rcall	.-142    	; 0x586 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     614:	81 2f       	mov	r24, r17
     616:	b7 df       	rcall	.-146    	; 0x586 <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	11 d1       	rcall	.+546    	; 0x840 <get_sensor_cc_val>
     61e:	19 2f       	mov	r17, r25
		//u16temp_output = TOUCH_SNR();
		
		datastreamer_transmit((uint8_t)u16temp_output);
     620:	b2 df       	rcall	.-156    	; 0x586 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     622:	81 2f       	mov	r24, r17
     624:	b0 df       	rcall	.-160    	; 0x586 <datastreamer_transmit>
		u8temp_output = NODE_PRSC(qtlib_acq_set1.qtm_acq_node_config[count_bytes_out].node_rsel_prsc);
		datastreamer_transmit(u8temp_output);
#endif
#endif
		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	17 d1       	rcall	.+558    	; 0x85a <get_sensor_state>
		if (0u != (u8temp_output & 0x80)) {
     62c:	87 ff       	sbrs	r24, 7
     62e:	19 c0       	rjmp	.+50     	; 0x662 <datastreamer_output+0xc4>
			datastreamer_transmit(0x01);
     630:	81 e0       	ldi	r24, 0x01	; 1
		} else {
			datastreamer_transmit(0x00);
     632:	a9 df       	rcall	.-174    	; 0x586 <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	fc 01       	movw	r30, r24
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	8e 0f       	add	r24, r30
     640:	9f 1f       	adc	r25, r31
     642:	fc 01       	movw	r30, r24
     644:	e5 5c       	subi	r30, 0xC5	; 197
     646:	f1 4c       	sbci	r31, 0xC1	; 193
     648:	80 81       	ld	r24, Z
     64a:	9d df       	rcall	.-198    	; 0x586 <datastreamer_transmit>
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	89 83       	std	Y+1, r24	; 0x01
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 81       	ldd	r24, Y+1	; 0x01
     658:	9a 81       	ldd	r25, Y+2	; 0x02
     65a:	89 2b       	or	r24, r25
     65c:	09 f4       	brne	.+2      	; 0x660 <datastreamer_output+0xc2>
     65e:	bd cf       	rjmp	.-134    	; 0x5da <datastreamer_output+0x3c>
     660:	02 c0       	rjmp	.+4      	; 0x666 <datastreamer_output+0xc8>
		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
		if (0u != (u8temp_output & 0x80)) {
			datastreamer_transmit(0x01);
		} else {
			datastreamer_transmit(0x00);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	e6 cf       	rjmp	.-52     	; 0x632 <datastreamer_output+0x94>
		datastreamer_transmit(qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->median_filter_freq[count]);
	}
#endif
		
	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     666:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <module_error_code>
     66a:	8d df       	rcall	.-230    	; 0x586 <datastreamer_transmit>
	
	/* Frame End */
	datastreamer_transmit(sequence++);
     66c:	80 91 6f 3e 	lds	r24, 0x3E6F	; 0x803e6f <sequence.4391>
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	98 0f       	add	r25, r24
     674:	90 93 6f 3e 	sts	0x3E6F, r25	; 0x803e6f <sequence.4391>
     678:	86 df       	rcall	.-244    	; 0x586 <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     67a:	8a ea       	ldi	r24, 0xAA	; 170
     67c:	84 df       	rcall	.-248    	; 0x586 <datastreamer_transmit>
}
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <qtm_measure_complete_callback>:
void calibrate_node(uint16_t sensor_node)
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
     68c:	e9 e9       	ldi	r30, 0x99	; 153
     68e:	fe e3       	ldi	r31, 0x3E	; 62
     690:	80 81       	ld	r24, Z
     692:	82 60       	ori	r24, 0x02	; 2
     694:	80 83       	st	Z, r24
     696:	08 95       	ret

00000698 <qtm_post_process_complete>:
     698:	e0 91 33 3e 	lds	r30, 0x3E33	; 0x803e33 <qtlib_key_set1>
     69c:	f0 91 34 3e 	lds	r31, 0x3E34	; 0x803e34 <qtlib_key_set1+0x1>
     6a0:	80 81       	ld	r24, Z
     6a2:	87 ff       	sbrs	r24, 7
     6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <qtm_post_process_complete+0x1e>
     6a6:	e0 91 97 3e 	lds	r30, 0x3E97	; 0x803e97 <p_qtm_control>
     6aa:	f0 91 98 3e 	lds	r31, 0x3E98	; 0x803e98 <p_qtm_control+0x1>
     6ae:	80 81       	ld	r24, Z
     6b0:	84 60       	ori	r24, 0x04	; 4
     6b2:	80 83       	st	Z, r24
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <qtm_post_process_complete+0x24>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	80 93 71 3e 	sts	0x3E71, r24	; 0x803e71 <measurement_done_touch>
     6bc:	70 cf       	rjmp	.-288    	; 0x59e <datastreamer_output>

000006be <qtm_error_callback>:
     6be:	87 ff       	sbrs	r24, 7
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <qtm_error_callback+0x8>
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <qtm_error_callback+0x16>
     6c6:	86 fd       	sbrc	r24, 6
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <qtm_error_callback+0x12>
     6ca:	10 92 70 3e 	sts	0x3E70, r1	; 0x803e70 <module_error_code>
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <qtm_error_callback+0x1a>
     6d0:	8f 70       	andi	r24, 0x0F	; 15
     6d2:	8e 5f       	subi	r24, 0xFE	; 254
     6d4:	80 93 70 3e 	sts	0x3E70, r24	; 0x803e70 <module_error_code>
     6d8:	62 cf       	rjmp	.-316    	; 0x59e <datastreamer_output>

000006da <init_complete_callback>:
     6da:	85 e9       	ldi	r24, 0x95	; 149
     6dc:	9e e3       	ldi	r25, 0x3E	; 62
     6de:	a6 d9       	rcall	.-3252   	; 0xfffffa2c <__eeprom_end+0xff7efa2c>
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	88 e4       	ldi	r24, 0x48	; 72
     6e6:	9e e3       	ldi	r25, 0x3E	; 62
     6e8:	0b da       	rcall	.-3050   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	88 e4       	ldi	r24, 0x48	; 72
     6f0:	9e e3       	ldi	r25, 0x3E	; 62
     6f2:	25 da       	rcall	.-2998   	; 0xfffffb3e <__eeprom_end+0xff7efb3e>
     6f4:	40 e9       	ldi	r20, 0x90	; 144
     6f6:	5e e3       	ldi	r21, 0x3E	; 62
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	83 e3       	ldi	r24, 0x33	; 51
     6fc:	9e e3       	ldi	r25, 0x3E	; 62
     6fe:	05 c2       	rjmp	.+1034   	; 0xb0a <qtm_init_sensor_key>

00000700 <Timer_set_period>:
     700:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
     704:	92 fd       	sbrc	r25, 2
     706:	fc cf       	rjmp	.-8      	; 0x700 <Timer_set_period>
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     70e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     712:	08 95       	ret

00000714 <touch_init>:
     714:	80 e2       	ldi	r24, 0x20	; 32
     716:	f4 df       	rcall	.-24     	; 0x700 <Timer_set_period>
     718:	e4 e1       	ldi	r30, 0x14	; 20
     71a:	f4 e0       	ldi	r31, 0x04	; 4
     71c:	80 81       	ld	r24, Z
     71e:	87 7f       	andi	r24, 0xF7	; 247
     720:	80 83       	st	Z, r24
     722:	e9 e9       	ldi	r30, 0x99	; 153
     724:	fe e3       	ldi	r31, 0x3E	; 62
     726:	10 82       	st	Z, r1
     728:	8f e2       	ldi	r24, 0x2F	; 47
     72a:	9e e3       	ldi	r25, 0x3E	; 62
     72c:	81 83       	std	Z+1, r24	; 0x01
     72e:	92 83       	std	Z+2, r25	; 0x02
     730:	8b e2       	ldi	r24, 0x2B	; 43
     732:	9e e3       	ldi	r25, 0x3E	; 62
     734:	83 83       	std	Z+3, r24	; 0x03
     736:	94 83       	std	Z+4, r25	; 0x04
     738:	83 e2       	ldi	r24, 0x23	; 35
     73a:	9e e3       	ldi	r25, 0x3E	; 62
     73c:	85 83       	std	Z+5, r24	; 0x05
     73e:	96 83       	std	Z+6, r25	; 0x06
     740:	87 e2       	ldi	r24, 0x27	; 39
     742:	9e e3       	ldi	r25, 0x3E	; 62
     744:	87 83       	std	Z+7, r24	; 0x07
     746:	90 87       	std	Z+8, r25	; 0x08
     748:	8b e1       	ldi	r24, 0x1B	; 27
     74a:	9e e3       	ldi	r25, 0x3E	; 62
     74c:	81 87       	std	Z+9, r24	; 0x09
     74e:	92 87       	std	Z+10, r25	; 0x0a
     750:	8f e1       	ldi	r24, 0x1F	; 31
     752:	9e e3       	ldi	r25, 0x3E	; 62
     754:	83 87       	std	Z+11, r24	; 0x0b
     756:	94 87       	std	Z+12, r25	; 0x0c
     758:	80 e6       	ldi	r24, 0x60	; 96
     75a:	9b e0       	ldi	r25, 0x0B	; 11
     75c:	85 87       	std	Z+13, r24	; 0x0d
     75e:	96 87       	std	Z+14, r25	; 0x0e
     760:	8d e6       	ldi	r24, 0x6D	; 109
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	87 87       	std	Z+15, r24	; 0x0f
     766:	90 8b       	std	Z+16, r25	; 0x10
     768:	8f e5       	ldi	r24, 0x5F	; 95
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	81 8b       	std	Z+17, r24	; 0x11
     76e:	92 8b       	std	Z+18, r25	; 0x12
     770:	86 e4       	ldi	r24, 0x46	; 70
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	83 8b       	std	Z+19, r24	; 0x13
     776:	94 8b       	std	Z+20, r25	; 0x14
     778:	15 8a       	std	Z+21, r1	; 0x15
     77a:	16 8a       	std	Z+22, r1	; 0x16
     77c:	8c e4       	ldi	r24, 0x4C	; 76
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	87 8b       	std	Z+23, r24	; 0x17
     782:	90 8f       	std	Z+24, r25	; 0x18
     784:	cf 01       	movw	r24, r30
     786:	a3 d5       	rcall	.+2886   	; 0x12ce <qtm_binding_layer_init>
     788:	9d d5       	rcall	.+2874   	; 0x12c4 <qmt_get_binding_layer_ptr>
     78a:	80 93 97 3e 	sts	0x3E97, r24	; 0x803e97 <p_qtm_control>
     78e:	90 93 98 3e 	sts	0x3E98, r25	; 0x803e98 <p_qtm_control+0x1>
     792:	f8 ce       	rjmp	.-528    	; 0x584 <datastreamer_init>

00000794 <touch_process>:
     794:	e0 91 97 3e 	lds	r30, 0x3E97	; 0x803e97 <p_qtm_control>
     798:	f0 91 98 3e 	lds	r31, 0x3E98	; 0x803e98 <p_qtm_control+0x1>
     79c:	80 81       	ld	r24, Z
     79e:	80 ff       	sbrs	r24, 0
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <touch_process+0x24>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	f2 d5       	rcall	.+3044   	; 0x138a <qtm_lib_start_acquisition>
     7a6:	81 11       	cpse	r24, r1
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <touch_process+0x24>
     7aa:	e0 91 97 3e 	lds	r30, 0x3E97	; 0x803e97 <p_qtm_control>
     7ae:	f0 91 98 3e 	lds	r31, 0x3E98	; 0x803e98 <p_qtm_control+0x1>
     7b2:	80 81       	ld	r24, Z
     7b4:	8e 7f       	andi	r24, 0xFE	; 254
     7b6:	80 83       	st	Z, r24
     7b8:	e0 91 97 3e 	lds	r30, 0x3E97	; 0x803e97 <p_qtm_control>
     7bc:	f0 91 98 3e 	lds	r31, 0x3E98	; 0x803e98 <p_qtm_control+0x1>
     7c0:	80 81       	ld	r24, Z
     7c2:	81 ff       	sbrs	r24, 1
     7c4:	0e c0       	rjmp	.+28     	; 0x7e2 <touch_process+0x4e>
     7c6:	30 d6       	rcall	.+3168   	; 0x1428 <qtm_lib_acq_process>
     7c8:	81 11       	cpse	r24, r1
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <touch_process+0x3c>
     7cc:	35 d6       	rcall	.+3178   	; 0x1438 <qtm_lib_post_process>
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <touch_process+0x40>
     7d0:	80 e8       	ldi	r24, 0x80	; 128
     7d2:	75 df       	rcall	.-278    	; 0x6be <qtm_error_callback>
     7d4:	e0 91 97 3e 	lds	r30, 0x3E97	; 0x803e97 <p_qtm_control>
     7d8:	f0 91 98 3e 	lds	r31, 0x3E98	; 0x803e98 <p_qtm_control+0x1>
     7dc:	80 81       	ld	r24, Z
     7de:	8d 7f       	andi	r24, 0xFD	; 253
     7e0:	80 83       	st	Z, r24
     7e2:	e0 91 97 3e 	lds	r30, 0x3E97	; 0x803e97 <p_qtm_control>
     7e6:	f0 91 98 3e 	lds	r31, 0x3E98	; 0x803e98 <p_qtm_control+0x1>
     7ea:	80 81       	ld	r24, Z
     7ec:	82 ff       	sbrs	r24, 2
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <touch_process+0x62>
     7f0:	8b 7f       	andi	r24, 0xFB	; 251
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	80 83       	st	Z, r24
     7f6:	08 95       	ret

000007f8 <touch_timer_handler>:
     7f8:	8d dc       	rcall	.-1766   	; 0x114 <TOUCH_SetMeasureBusyFlag>
     7fa:	e9 e9       	ldi	r30, 0x99	; 153
     7fc:	fe e3       	ldi	r31, 0x3E	; 62
     7fe:	80 81       	ld	r24, Z
     800:	81 60       	ori	r24, 0x01	; 1
     802:	80 83       	st	Z, r24
     804:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <measeurePeriod>
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	74 c1       	rjmp	.+744    	; 0xaf4 <qtm_update_qtlib_timer>

0000080c <get_sensor_node_signal>:
     80c:	25 e0       	ldi	r18, 0x05	; 5
     80e:	ac 01       	movw	r20, r24
     810:	24 9f       	mul	r18, r20
     812:	c0 01       	movw	r24, r0
     814:	25 9f       	mul	r18, r21
     816:	90 0d       	add	r25, r0
     818:	11 24       	eor	r1, r1
     81a:	fc 01       	movw	r30, r24
     81c:	e0 57       	subi	r30, 0x70	; 112
     81e:	f1 4c       	sbci	r31, 0xC1	; 193
     820:	81 81       	ldd	r24, Z+1	; 0x01
     822:	92 81       	ldd	r25, Z+2	; 0x02
     824:	08 95       	ret

00000826 <get_sensor_node_reference>:
     826:	26 e0       	ldi	r18, 0x06	; 6
     828:	ac 01       	movw	r20, r24
     82a:	24 9f       	mul	r18, r20
     82c:	c0 01       	movw	r24, r0
     82e:	25 9f       	mul	r18, r21
     830:	90 0d       	add	r25, r0
     832:	11 24       	eor	r1, r1
     834:	fc 01       	movw	r30, r24
     836:	ee 54       	subi	r30, 0x4E	; 78
     838:	f1 4c       	sbci	r31, 0xC1	; 193
     83a:	84 81       	ldd	r24, Z+4	; 0x04
     83c:	95 81       	ldd	r25, Z+5	; 0x05
     83e:	08 95       	ret

00000840 <get_sensor_cc_val>:
     840:	25 e0       	ldi	r18, 0x05	; 5
     842:	ac 01       	movw	r20, r24
     844:	24 9f       	mul	r18, r20
     846:	c0 01       	movw	r24, r0
     848:	25 9f       	mul	r18, r21
     84a:	90 0d       	add	r25, r0
     84c:	11 24       	eor	r1, r1
     84e:	fc 01       	movw	r30, r24
     850:	e0 57       	subi	r30, 0x70	; 112
     852:	f1 4c       	sbci	r31, 0xC1	; 193
     854:	83 81       	ldd	r24, Z+3	; 0x03
     856:	94 81       	ldd	r25, Z+4	; 0x04
     858:	08 95       	ret

0000085a <get_sensor_state>:
     85a:	26 e0       	ldi	r18, 0x06	; 6
     85c:	ac 01       	movw	r20, r24
     85e:	24 9f       	mul	r18, r20
     860:	c0 01       	movw	r24, r0
     862:	25 9f       	mul	r18, r21
     864:	90 0d       	add	r25, r0
     866:	11 24       	eor	r1, r1
     868:	e0 91 37 3e 	lds	r30, 0x3E37	; 0x803e37 <qtlib_key_set1+0x4>
     86c:	f0 91 38 3e 	lds	r31, 0x3E38	; 0x803e38 <qtlib_key_set1+0x5>
     870:	e8 0f       	add	r30, r24
     872:	f9 1f       	adc	r31, r25
     874:	80 81       	ld	r24, Z
     876:	08 95       	ret

00000878 <__vector_17>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	3f 93       	push	r19
     886:	4f 93       	push	r20
     888:	5f 93       	push	r21
     88a:	6f 93       	push	r22
     88c:	7f 93       	push	r23
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	af 93       	push	r26
     894:	bf 93       	push	r27
     896:	ef 93       	push	r30
     898:	ff 93       	push	r31
	qtm_t81x_ptc_handler_eoc();
     89a:	92 d9       	rcall	.-3292   	; 0xfffffbc0 <__eeprom_end+0xff7efbc0>
}
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	bf 91       	pop	r27
     8a2:	af 91       	pop	r26
     8a4:	9f 91       	pop	r25
     8a6:	8f 91       	pop	r24
     8a8:	7f 91       	pop	r23
     8aa:	6f 91       	pop	r22
     8ac:	5f 91       	pop	r21
     8ae:	4f 91       	pop	r20
     8b0:	3f 91       	pop	r19
     8b2:	2f 91       	pop	r18
     8b4:	0f 90       	pop	r0
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	0f 90       	pop	r0
     8ba:	1f 90       	pop	r1
     8bc:	18 95       	reti

000008be <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	08 95       	ret

000008c2 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     8c2:	42 e0       	ldi	r20, 0x02	; 2
     8c4:	68 ed       	ldi	r22, 0xD8	; 216
     8c6:	88 e7       	ldi	r24, 0x78	; 120
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	64 d0       	rcall	.+200    	; 0x994 <protected_write_io>
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	68 ed       	ldi	r22, 0xD8	; 216
     8d0:	81 e6       	ldi	r24, 0x61	; 97
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	5f d0       	rcall	.+190    	; 0x994 <protected_write_io>
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	68 ed       	ldi	r22, 0xD8	; 216
     8da:	80 e6       	ldi	r24, 0x60	; 96
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	5a d0       	rcall	.+180    	; 0x994 <protected_write_io>
	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLA),
	             CLKCTRL_CLKSEL_OSC20M_gc /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */
	                 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	/* wait for system oscillator changing to finish */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
     8e0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x700063>
     8e4:	80 fd       	sbrc	r24, 0
     8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <CLKCTRL_init+0x1e>
	}

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	08 95       	ret

000008ec <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     8ec:	78 94       	sei

	return 0;
}
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 95       	ret

000008f2 <mcu_init>:
	// Disable digital input buffer
	PA7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PA7_set_pull_mode(PORT_PULL_OFF);

	AC_0_init();
     8f2:	e0 e1       	ldi	r30, 0x10	; 16
     8f4:	f4 e0       	ldi	r31, 0x04	; 4
     8f6:	80 81       	ld	r24, Z
     8f8:	88 60       	ori	r24, 0x08	; 8
     8fa:	81 93       	st	Z+, r24
     8fc:	e8 31       	cpi	r30, 0x18	; 24
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	f8 07       	cpc	r31, r24
     902:	c9 f7       	brne	.-14     	; 0x8f6 <mcu_init+0x4>
     904:	e0 e3       	ldi	r30, 0x30	; 48
     906:	f4 e0       	ldi	r31, 0x04	; 4
     908:	80 81       	ld	r24, Z
     90a:	88 60       	ori	r24, 0x08	; 8
     90c:	81 93       	st	Z+, r24
     90e:	e8 33       	cpi	r30, 0x38	; 56
     910:	84 e0       	ldi	r24, 0x04	; 4
     912:	f8 07       	cpc	r31, r24
     914:	c9 f7       	brne	.-14     	; 0x908 <mcu_init+0x16>
     916:	e0 e5       	ldi	r30, 0x50	; 80
     918:	f4 e0       	ldi	r31, 0x04	; 4
     91a:	80 81       	ld	r24, Z
     91c:	88 60       	ori	r24, 0x08	; 8
     91e:	81 93       	st	Z+, r24
     920:	e8 35       	cpi	r30, 0x58	; 88
     922:	84 e0       	ldi	r24, 0x04	; 4
     924:	f8 07       	cpc	r31, r24
     926:	c9 f7       	brne	.-14     	; 0x91a <mcu_init+0x28>
     928:	08 95       	ret

0000092a <USART_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     92a:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     92c:	e3 e3       	ldi	r30, 0x33	; 51
     92e:	f4 e0       	ldi	r31, 0x04	; 4
     930:	80 81       	ld	r24, Z
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     936:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     938:	2a 98       	cbi	0x05, 2	; 5
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);

	USART_init();
     93a:	45 c0       	rjmp	.+138    	; 0x9c6 <USART_init>

0000093c <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     93c:	da df       	rcall	.-76     	; 0x8f2 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     93e:	00 98       	cbi	0x00, 0	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     940:	e0 e1       	ldi	r30, 0x10	; 16
     942:	f4 e0       	ldi	r31, 0x04	; 4
     944:	80 81       	ld	r24, Z
     946:	88 60       	ori	r24, 0x08	; 8
     948:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     94a:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     94c:	e2 e1       	ldi	r30, 0x12	; 18
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	80 81       	ld	r24, Z
     952:	88 60       	ori	r24, 0x08	; 8
     954:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     956:	03 98       	cbi	0x00, 3	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     958:	e3 e1       	ldi	r30, 0x13	; 19
     95a:	f4 e0       	ldi	r31, 0x04	; 4
     95c:	80 81       	ld	r24, Z
     95e:	88 60       	ori	r24, 0x08	; 8
     960:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     962:	05 98       	cbi	0x00, 5	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     964:	e5 e1       	ldi	r30, 0x15	; 21
     966:	f4 e0       	ldi	r31, 0x04	; 4
     968:	80 81       	ld	r24, Z
     96a:	88 60       	ori	r24, 0x08	; 8
     96c:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     96e:	06 98       	cbi	0x00, 6	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     970:	e6 e1       	ldi	r30, 0x16	; 22
     972:	f4 e0       	ldi	r31, 0x04	; 4
     974:	80 81       	ld	r24, Z
     976:	88 60       	ori	r24, 0x08	; 8
     978:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     97a:	20 9a       	sbi	0x04, 0	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     97c:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     97e:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     980:	29 98       	cbi	0x05, 1	; 5
	    //// <id> pad_pull_config
	    //// <PORT_PULL_OFF"> Off
	    //// <PORT_PULL_UP"> Pull-up
	    //PORT_PULL_UP);

	CLKCTRL_init();
     982:	9f df       	rcall	.-194    	; 0x8c2 <CLKCTRL_init>

	RTC_init(1);
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0a d0       	rcall	.+20     	; 0x99c <RTC_init>
	
	VREF_0_init();
     988:	3d d0       	rcall	.+122    	; 0xa04 <VREF_0_init>
	
	USART_initialization();
     98a:	cf df       	rcall	.-98     	; 0x92a <USART_initialization>
	
	//AC_0_initialization();

	WDT_0_init();
     98c:	43 d0       	rcall	.+134    	; 0xa14 <WDT_0_init>

	CPUINT_init();
     98e:	ae df       	rcall	.-164    	; 0x8ec <CPUINT_init>

	SLPCTRL_init();
     990:	15 d0       	rcall	.+42     	; 0x9bc <SLPCTRL_init>

	BOD_init();
     992:	95 cf       	rjmp	.-214    	; 0x8be <BOD_init>

00000994 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     994:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     996:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     998:	40 83       	st	Z, r20
	ret                             // Return to caller
     99a:	08 95       	ret

0000099c <RTC_init>:
int8_t RTC_init(uint8_t mode)
{
	//while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
	//}
	
	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     99c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__TEXT_REGION_LENGTH__+0x700151>
     9a0:	81 11       	cpse	r24, r1
     9a2:	fc cf       	rjmp	.-8      	; 0x99c <RTC_init>
	//| 1 << RTC_RTCEN_bp     /* Enable: enabled */
	//| 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz divided by 32 */
     9a4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	//RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
	//| 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	 RTC.PITCTRLA = RTC_PERIOD_CYC1024_gc /* Off */
     9a8:	89 e4       	ldi	r24, 0x49	; 73
     9aa:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__TEXT_REGION_LENGTH__+0x700150>
			 | 1 << RTC_PITEN_bp; /* Enable: disabled */

	 RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */
     9ae:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__TEXT_REGION_LENGTH__+0x700155>

	 RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: disabled */
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__TEXT_REGION_LENGTH__+0x700152>

	return 0;
}
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret

000009bc <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	                | SLPCTRL_SMODE_STDBY_gc; /* Power-down Mode */

	return 0;
}
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	08 95       	ret

000009c6 <USART_init>:
uint8_t USART_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     9c6:	e0 e0       	ldi	r30, 0x00	; 0
     9c8:	f8 e0       	ldi	r31, 0x08	; 8
     9ca:	8b e5       	ldi	r24, 0x5B	; 91
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	80 87       	std	Z+8, r24	; 0x08
     9d0:	91 87       	std	Z+9, r25	; 0x09
     9d2:	80 e4       	ldi	r24, 0x40	; 64
     9d4:	86 83       	std	Z+6, r24	; 0x06
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret

000009da <USART_is_tx_ready>:
     9da:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     9de:	85 fb       	bst	r24, 5
     9e0:	88 27       	eor	r24, r24
     9e2:	80 f9       	bld	r24, 0
     9e4:	08 95       	ret

000009e6 <USART_is_tx_busy>:
     9e6:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     9ea:	86 fb       	bst	r24, 6
     9ec:	88 27       	eor	r24, r24
     9ee:	80 f9       	bld	r24, 0
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	89 27       	eor	r24, r25
     9f4:	08 95       	ret

000009f6 <USART_write>:
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     9f6:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     9fa:	95 ff       	sbrs	r25, 5
     9fc:	fc cf       	rjmp	.-8      	; 0x9f6 <USART_write>
		;
	USART0.TXDATAL = data;
     9fe:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     a02:	08 95       	ret

00000a04 <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF_CTRLA = VREF_ADC0REFSEL_0V55_gc   /* Voltage reference at 0.55V */
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	             | VREF_DAC0REFSEL_1V5_gc; /* Voltage reference at 1.5V */

	VREF_CTRLB = 0 << VREF_ADC0REFEN_bp    /* ADC0 reference enable: disabled */
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	             | 1 << VREF_DAC0REFEN_bp; /* DAC0/AC0 reference enable: enabled */

	return 0;
}
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret

00000a14 <WDT_0_init>:
     a14:	48 e0       	ldi	r20, 0x08	; 8
     a16:	68 ed       	ldi	r22, 0xD8	; 216
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	bb df       	rcall	.-138    	; 0x994 <protected_write_io>
	ccp_write_io((void *)&(WDT.CTRLA),
	             WDT_PERIOD_1KCLK_gc /* 128 cycles (128) */
	                 | WDT_WINDOW_OFF_gc /* Window mode off */);

	return 0;
}
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	08 95       	ret

00000a22 <check_for_aks_block>:
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
     a32:	ae 81       	ldd	r26, Y+6	; 0x06
     a34:	bf 81       	ldd	r27, Y+7	; 0x07
     a36:	eb 01       	movw	r28, r22
     a38:	cc 0f       	add	r28, r28
     a3a:	dd 1f       	adc	r29, r29
     a3c:	c6 0f       	add	r28, r22
     a3e:	d7 1f       	adc	r29, r23
     a40:	ca 0f       	add	r28, r26
     a42:	db 1f       	adc	r29, r27
     a44:	fa 80       	ldd	r15, Y+2	; 0x02
     a46:	fc 01       	movw	r30, r24
     a48:	44 81       	ldd	r20, Z+4	; 0x04
     a4a:	55 81       	ldd	r21, Z+5	; 0x05
     a4c:	e6 e0       	ldi	r30, 0x06	; 6
     a4e:	e6 9f       	mul	r30, r22
     a50:	90 01       	movw	r18, r0
     a52:	e7 9f       	mul	r30, r23
     a54:	30 0d       	add	r19, r0
     a56:	11 24       	eor	r1, r1
     a58:	8a 01       	movw	r16, r20
     a5a:	02 0f       	add	r16, r18
     a5c:	13 1f       	adc	r17, r19
     a5e:	f8 01       	movw	r30, r16
     a60:	22 81       	ldd	r18, Z+2	; 0x02
     a62:	33 81       	ldd	r19, Z+3	; 0x03
     a64:	f9 01       	movw	r30, r18
     a66:	21 81       	ldd	r18, Z+1	; 0x01
     a68:	32 81       	ldd	r19, Z+2	; 0x02
     a6a:	f8 01       	movw	r30, r16
     a6c:	04 81       	ldd	r16, Z+4	; 0x04
     a6e:	15 81       	ldd	r17, Z+5	; 0x05
     a70:	20 1b       	sub	r18, r16
     a72:	31 0b       	sbc	r19, r17
     a74:	e8 81       	ld	r30, Y
     a76:	2e 1b       	sub	r18, r30
     a78:	31 09       	sbc	r19, r1
     a7a:	ec 01       	movw	r28, r24
     a7c:	ea 81       	ldd	r30, Y+2	; 0x02
     a7e:	fb 81       	ldd	r31, Y+3	; 0x03
     a80:	00 81       	ld	r16, Z
     a82:	11 81       	ldd	r17, Z+1	; 0x01
     a84:	fa 01       	movw	r30, r20
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	40 17       	cp	r20, r16
     a8c:	51 07       	cpc	r21, r17
     a8e:	39 f1       	breq	.+78     	; 0xade <check_for_aks_block+0xbc>
     a90:	46 17       	cp	r20, r22
     a92:	57 07       	cpc	r21, r23
     a94:	f9 f0       	breq	.+62     	; 0xad4 <check_for_aks_block+0xb2>
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	8c 91       	ld	r24, X
     a9a:	12 97       	sbiw	r26, 0x02	; 2
     a9c:	f8 12       	cpse	r15, r24
     a9e:	1a c0       	rjmp	.+52     	; 0xad4 <check_for_aks_block+0xb2>
     aa0:	80 81       	ld	r24, Z
     aa2:	85 58       	subi	r24, 0x85	; 133
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	e8 f0       	brcs	.+58     	; 0xae2 <check_for_aks_block+0xc0>
     aa8:	c4 80       	ldd	r12, Z+4	; 0x04
     aaa:	d5 80       	ldd	r13, Z+5	; 0x05
     aac:	82 81       	ldd	r24, Z+2	; 0x02
     aae:	93 81       	ldd	r25, Z+3	; 0x03
     ab0:	ec 01       	movw	r28, r24
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	c8 16       	cp	r12, r24
     ab8:	d9 06       	cpc	r13, r25
     aba:	60 f4       	brcc	.+24     	; 0xad4 <check_for_aks_block+0xb2>
     abc:	8c 19       	sub	r24, r12
     abe:	9d 09       	sbc	r25, r13
     ac0:	cc 91       	ld	r28, X
     ac2:	d0 e0       	ldi	r29, 0x00	; 0
     ac4:	c8 17       	cp	r28, r24
     ac6:	d9 07       	cpc	r29, r25
     ac8:	28 f4       	brcc	.+10     	; 0xad4 <check_for_aks_block+0xb2>
     aca:	8c 1b       	sub	r24, r28
     acc:	9d 0b       	sbc	r25, r29
     ace:	28 17       	cp	r18, r24
     ad0:	39 07       	cpc	r19, r25
     ad2:	38 f0       	brcs	.+14     	; 0xae2 <check_for_aks_block+0xc0>
     ad4:	4f 5f       	subi	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	13 96       	adiw	r26, 0x03	; 3
     ada:	36 96       	adiw	r30, 0x06	; 6
     adc:	d6 cf       	rjmp	.-84     	; 0xa8a <check_for_aks_block+0x68>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <check_for_aks_block+0xc2>
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	08 95       	ret

00000af4 <qtm_update_qtlib_timer>:
     af4:	20 91 72 3e 	lds	r18, 0x3E72	; 0x803e72 <qtm_local_ms_timecount>
     af8:	30 91 73 3e 	lds	r19, 0x3E73	; 0x803e73 <qtm_local_ms_timecount+0x1>
     afc:	82 0f       	add	r24, r18
     afe:	93 1f       	adc	r25, r19
     b00:	80 93 72 3e 	sts	0x3E72, r24	; 0x803e72 <qtm_local_ms_timecount>
     b04:	90 93 73 3e 	sts	0x3E73, r25	; 0x803e73 <qtm_local_ms_timecount+0x1>
     b08:	08 95       	ret

00000b0a <qtm_init_sensor_key>:
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	d9 f0       	breq	.+54     	; 0xb44 <qtm_init_sensor_key+0x3a>
     b0e:	41 15       	cp	r20, r1
     b10:	51 05       	cpc	r21, r1
     b12:	c1 f0       	breq	.+48     	; 0xb44 <qtm_init_sensor_key+0x3a>
     b14:	26 e0       	ldi	r18, 0x06	; 6
     b16:	62 9f       	mul	r22, r18
     b18:	b0 01       	movw	r22, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	dc 01       	movw	r26, r24
     b1e:	14 96       	adiw	r26, 0x04	; 4
     b20:	ed 91       	ld	r30, X+
     b22:	fc 91       	ld	r31, X
     b24:	15 97       	sbiw	r26, 0x05	; 5
     b26:	e6 0f       	add	r30, r22
     b28:	f7 1f       	adc	r31, r23
     b2a:	21 e0       	ldi	r18, 0x01	; 1
     b2c:	20 83       	st	Z, r18
     b2e:	14 96       	adiw	r26, 0x04	; 4
     b30:	8d 91       	ld	r24, X+
     b32:	9c 91       	ld	r25, X
     b34:	15 97       	sbiw	r26, 0x05	; 5
     b36:	fc 01       	movw	r30, r24
     b38:	e6 0f       	add	r30, r22
     b3a:	f7 1f       	adc	r31, r23
     b3c:	42 83       	std	Z+2, r20	; 0x02
     b3e:	53 83       	std	Z+3, r21	; 0x03
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	08 95       	ret
     b44:	8b e0       	ldi	r24, 0x0B	; 11
     b46:	08 95       	ret

00000b48 <qtm_key_sensors_process>:
     b48:	2f 92       	push	r2
     b4a:	3f 92       	push	r3
     b4c:	4f 92       	push	r4
     b4e:	5f 92       	push	r5
     b50:	6f 92       	push	r6
     b52:	7f 92       	push	r7
     b54:	8f 92       	push	r8
     b56:	9f 92       	push	r9
     b58:	af 92       	push	r10
     b5a:	bf 92       	push	r11
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	09 f4       	brne	.+2      	; 0xb72 <qtm_key_sensors_process+0x2a>
     b70:	7b c3       	rjmp	.+1782   	; 0x1268 <qtm_key_sensors_process+0x720>
     b72:	ec 01       	movw	r28, r24
     b74:	a1 2c       	mov	r10, r1
     b76:	b1 2c       	mov	r11, r1
     b78:	81 2c       	mov	r8, r1
     b7a:	91 2c       	mov	r9, r1
     b7c:	21 2c       	mov	r2, r1
     b7e:	d1 2c       	mov	r13, r1
     b80:	33 e0       	ldi	r19, 0x03	; 3
     b82:	c3 2e       	mov	r12, r19
     b84:	45 e8       	ldi	r20, 0x85	; 133
     b86:	64 2e       	mov	r6, r20
     b88:	56 e8       	ldi	r21, 0x86	; 134
     b8a:	75 2e       	mov	r7, r21
     b8c:	67 e0       	ldi	r22, 0x07	; 7
     b8e:	36 2e       	mov	r3, r22
     b90:	72 e0       	ldi	r23, 0x02	; 2
     b92:	47 2e       	mov	r4, r23
     b94:	e8 e0       	ldi	r30, 0x08	; 8
     b96:	5e 2e       	mov	r5, r30
     b98:	ea 81       	ldd	r30, Y+2	; 0x02
     b9a:	fb 81       	ldd	r31, Y+3	; 0x03
     b9c:	80 81       	ld	r24, Z
     b9e:	91 81       	ldd	r25, Z+1	; 0x01
     ba0:	88 16       	cp	r8, r24
     ba2:	99 06       	cpc	r9, r25
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <qtm_key_sensors_process+0x60>
     ba6:	a3 c1       	rjmp	.+838    	; 0xeee <qtm_key_sensors_process+0x3a6>
     ba8:	75 01       	movw	r14, r10
     baa:	ee 0c       	add	r14, r14
     bac:	ff 1c       	adc	r15, r15
     bae:	0c 81       	ldd	r16, Y+4	; 0x04
     bb0:	1d 81       	ldd	r17, Y+5	; 0x05
     bb2:	0e 0d       	add	r16, r14
     bb4:	1f 1d       	adc	r17, r15
     bb6:	d8 01       	movw	r26, r16
     bb8:	8c 91       	ld	r24, X
     bba:	84 30       	cpi	r24, 0x04	; 4
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <qtm_key_sensors_process+0x78>
     bbe:	a1 c0       	rjmp	.+322    	; 0xd02 <qtm_key_sensors_process+0x1ba>
     bc0:	38 f4       	brcc	.+14     	; 0xbd0 <qtm_key_sensors_process+0x88>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	01 f1       	breq	.+64     	; 0xc06 <qtm_key_sensors_process+0xbe>
     bc6:	08 f0       	brcs	.+2      	; 0xbca <qtm_key_sensors_process+0x82>
     bc8:	49 c0       	rjmp	.+146    	; 0xc5c <qtm_key_sensors_process+0x114>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	59 f0       	breq	.+22     	; 0xbe4 <qtm_key_sensors_process+0x9c>
     bce:	88 c1       	rjmp	.+784    	; 0xee0 <qtm_key_sensors_process+0x398>
     bd0:	85 38       	cpi	r24, 0x85	; 133
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <qtm_key_sensors_process+0x8e>
     bd4:	c0 c0       	rjmp	.+384    	; 0xd56 <qtm_key_sensors_process+0x20e>
     bd6:	86 38       	cpi	r24, 0x86	; 134
     bd8:	09 f4       	brne	.+2      	; 0xbdc <qtm_key_sensors_process+0x94>
     bda:	f4 c0       	rjmp	.+488    	; 0xdc4 <qtm_key_sensors_process+0x27c>
     bdc:	87 30       	cpi	r24, 0x07	; 7
     bde:	09 f0       	breq	.+2      	; 0xbe2 <qtm_key_sensors_process+0x9a>
     be0:	7f c1       	rjmp	.+766    	; 0xee0 <qtm_key_sensors_process+0x398>
     be2:	35 c1       	rjmp	.+618    	; 0xe4e <qtm_key_sensors_process+0x306>
     be4:	d8 01       	movw	r26, r16
     be6:	12 96       	adiw	r26, 0x02	; 2
     be8:	ed 91       	ld	r30, X+
     bea:	fc 91       	ld	r31, X
     bec:	13 97       	sbiw	r26, 0x03	; 3
     bee:	80 81       	ld	r24, Z
     bf0:	8e 71       	andi	r24, 0x1E	; 30
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <qtm_key_sensors_process+0xae>
     bf4:	67 c1       	rjmp	.+718    	; 0xec4 <qtm_key_sensors_process+0x37c>
     bf6:	4c 92       	st	X, r4
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	9d 81       	ldd	r25, Y+5	; 0x05
     bfc:	fc 01       	movw	r30, r24
     bfe:	ee 0d       	add	r30, r14
     c00:	ff 1d       	adc	r31, r15
     c02:	51 82       	std	Z+1, r5	; 0x01
     c04:	5f c1       	rjmp	.+702    	; 0xec4 <qtm_key_sensors_process+0x37c>
     c06:	f8 01       	movw	r30, r16
     c08:	21 81       	ldd	r18, Z+1	; 0x01
     c0a:	22 23       	and	r18, r18
     c0c:	29 f1       	breq	.+74     	; 0xc58 <qtm_key_sensors_process+0x110>
     c0e:	02 80       	ldd	r0, Z+2	; 0x02
     c10:	f3 81       	ldd	r31, Z+3	; 0x03
     c12:	e0 2d       	mov	r30, r0
     c14:	25 30       	cpi	r18, 0x05	; 5
     c16:	20 f0       	brcs	.+8      	; 0xc20 <qtm_key_sensors_process+0xd8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	92 81       	ldd	r25, Z+2	; 0x02
     c1c:	d8 01       	movw	r26, r16
     c1e:	0e c0       	rjmp	.+28     	; 0xc3c <qtm_key_sensors_process+0xf4>
     c20:	d8 01       	movw	r26, r16
     c22:	14 96       	adiw	r26, 0x04	; 4
     c24:	8d 91       	ld	r24, X+
     c26:	9c 91       	ld	r25, X
     c28:	15 97       	sbiw	r26, 0x05	; 5
     c2a:	41 81       	ldd	r20, Z+1	; 0x01
     c2c:	52 81       	ldd	r21, Z+2	; 0x02
     c2e:	84 17       	cp	r24, r20
     c30:	95 07       	cpc	r25, r21
     c32:	69 f0       	breq	.+26     	; 0xc4e <qtm_key_sensors_process+0x106>
     c34:	48 17       	cp	r20, r24
     c36:	59 07       	cpc	r21, r25
     c38:	30 f4       	brcc	.+12     	; 0xc46 <qtm_key_sensors_process+0xfe>
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	14 96       	adiw	r26, 0x04	; 4
     c3e:	8d 93       	st	X+, r24
     c40:	9c 93       	st	X, r25
     c42:	15 97       	sbiw	r26, 0x05	; 5
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <qtm_key_sensors_process+0x106>
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	f8 01       	movw	r30, r16
     c4a:	84 83       	std	Z+4, r24	; 0x04
     c4c:	95 83       	std	Z+5, r25	; 0x05
     c4e:	21 50       	subi	r18, 0x01	; 1
     c50:	d8 01       	movw	r26, r16
     c52:	11 96       	adiw	r26, 0x01	; 1
     c54:	2c 93       	st	X, r18
     c56:	36 c1       	rjmp	.+620    	; 0xec4 <qtm_key_sensors_process+0x37c>
     c58:	f8 01       	movw	r30, r16
     c5a:	2f c1       	rjmp	.+606    	; 0xeba <qtm_key_sensors_process+0x372>
     c5c:	d8 01       	movw	r26, r16
     c5e:	14 96       	adiw	r26, 0x04	; 4
     c60:	2d 91       	ld	r18, X+
     c62:	3c 91       	ld	r19, X
     c64:	15 97       	sbiw	r26, 0x05	; 5
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	8d 91       	ld	r24, X+
     c6a:	9c 91       	ld	r25, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	dc 01       	movw	r26, r24
     c70:	11 96       	adiw	r26, 0x01	; 1
     c72:	4d 91       	ld	r20, X+
     c74:	5c 91       	ld	r21, X
     c76:	12 97       	sbiw	r26, 0x02	; 2
     c78:	24 17       	cp	r18, r20
     c7a:	35 07       	cpc	r19, r21
     c7c:	09 f4       	brne	.+2      	; 0xc80 <qtm_key_sensors_process+0x138>
     c7e:	30 c1       	rjmp	.+608    	; 0xee0 <qtm_key_sensors_process+0x398>
     c80:	8e 81       	ldd	r24, Y+6	; 0x06
     c82:	9f 81       	ldd	r25, Y+7	; 0x07
     c84:	42 17       	cp	r20, r18
     c86:	53 07       	cpc	r21, r19
     c88:	e0 f4       	brcc	.+56     	; 0xcc2 <qtm_key_sensors_process+0x17a>
     c8a:	24 1b       	sub	r18, r20
     c8c:	35 0b       	sbc	r19, r21
     c8e:	dc 01       	movw	r26, r24
     c90:	aa 0d       	add	r26, r10
     c92:	bb 1d       	adc	r27, r11
     c94:	8c 91       	ld	r24, X
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	05 80       	ldd	r0, Z+5	; 0x05
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <qtm_key_sensors_process+0x158>
     c9c:	95 95       	asr	r25
     c9e:	87 95       	ror	r24
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <qtm_key_sensors_process+0x154>
     ca4:	99 27       	eor	r25, r25
     ca6:	28 17       	cp	r18, r24
     ca8:	39 07       	cpc	r19, r25
     caa:	08 f4       	brcc	.+2      	; 0xcae <qtm_key_sensors_process+0x166>
     cac:	19 c1       	rjmp	.+562    	; 0xee0 <qtm_key_sensors_process+0x398>
     cae:	84 81       	ldd	r24, Z+4	; 0x04
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <qtm_key_sensors_process+0x16e>
     cb4:	15 c1       	rjmp	.+554    	; 0xee0 <qtm_key_sensors_process+0x398>
     cb6:	f8 01       	movw	r30, r16
     cb8:	30 82       	st	Z, r3
     cba:	ea 81       	ldd	r30, Y+2	; 0x02
     cbc:	fb 81       	ldd	r31, Y+3	; 0x03
     cbe:	24 81       	ldd	r18, Z+4	; 0x04
     cc0:	19 c0       	rjmp	.+50     	; 0xcf4 <qtm_key_sensors_process+0x1ac>
     cc2:	fc 01       	movw	r30, r24
     cc4:	ea 0d       	add	r30, r10
     cc6:	fb 1d       	adc	r31, r11
     cc8:	42 1b       	sub	r20, r18
     cca:	53 0b       	sbc	r21, r19
     ccc:	80 81       	ld	r24, Z
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	48 17       	cp	r20, r24
     cd2:	59 07       	cpc	r21, r25
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <qtm_key_sensors_process+0x190>
     cd6:	04 c1       	rjmp	.+520    	; 0xee0 <qtm_key_sensors_process+0x398>
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	88 23       	and	r24, r24
     cdc:	29 f0       	breq	.+10     	; 0xce8 <qtm_key_sensors_process+0x1a0>
     cde:	b4 01       	movw	r22, r8
     ce0:	ce 01       	movw	r24, r28
     ce2:	9f de       	rcall	.-706    	; 0xa22 <check_for_aks_block>
     ce4:	81 11       	cpse	r24, r1
     ce6:	fc c0       	rjmp	.+504    	; 0xee0 <qtm_key_sensors_process+0x398>
     ce8:	e4 e0       	ldi	r30, 0x04	; 4
     cea:	d8 01       	movw	r26, r16
     cec:	ec 93       	st	X, r30
     cee:	ea 81       	ldd	r30, Y+2	; 0x02
     cf0:	fb 81       	ldd	r31, Y+3	; 0x03
     cf2:	22 81       	ldd	r18, Z+2	; 0x02
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	9d 81       	ldd	r25, Y+5	; 0x05
     cf8:	fc 01       	movw	r30, r24
     cfa:	ee 0d       	add	r30, r14
     cfc:	ff 1d       	adc	r31, r15
     cfe:	21 83       	std	Z+1, r18	; 0x01
     d00:	e1 c0       	rjmp	.+450    	; 0xec4 <qtm_key_sensors_process+0x37c>
     d02:	d8 01       	movw	r26, r16
     d04:	14 96       	adiw	r26, 0x04	; 4
     d06:	2d 91       	ld	r18, X+
     d08:	3c 91       	ld	r19, X
     d0a:	15 97       	sbiw	r26, 0x05	; 5
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	ed 91       	ld	r30, X+
     d10:	fc 91       	ld	r31, X
     d12:	13 97       	sbiw	r26, 0x03	; 3
     d14:	81 81       	ldd	r24, Z+1	; 0x01
     d16:	92 81       	ldd	r25, Z+2	; 0x02
     d18:	82 17       	cp	r24, r18
     d1a:	93 07       	cpc	r25, r19
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <qtm_key_sensors_process+0x1d8>
     d1e:	d6 c0       	rjmp	.+428    	; 0xecc <qtm_key_sensors_process+0x384>
     d20:	ee 81       	ldd	r30, Y+6	; 0x06
     d22:	ff 81       	ldd	r31, Y+7	; 0x07
     d24:	ea 0d       	add	r30, r10
     d26:	fb 1d       	adc	r31, r11
     d28:	82 1b       	sub	r24, r18
     d2a:	93 0b       	sbc	r25, r19
     d2c:	20 81       	ld	r18, Z
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	08 f0       	brcs	.+2      	; 0xd38 <qtm_key_sensors_process+0x1f0>
     d36:	ae c0       	rjmp	.+348    	; 0xe94 <qtm_key_sensors_process+0x34c>
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	88 23       	and	r24, r24
     d3c:	29 f0       	breq	.+10     	; 0xd48 <qtm_key_sensors_process+0x200>
     d3e:	b4 01       	movw	r22, r8
     d40:	ce 01       	movw	r24, r28
     d42:	6f de       	rcall	.-802    	; 0xa22 <check_for_aks_block>
     d44:	81 11       	cpse	r24, r1
     d46:	cc c0       	rjmp	.+408    	; 0xee0 <qtm_key_sensors_process+0x398>
     d48:	f8 01       	movw	r30, r16
     d4a:	81 81       	ldd	r24, Z+1	; 0x01
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <qtm_key_sensors_process+0x20a>
     d50:	67 c0       	rjmp	.+206    	; 0xe20 <qtm_key_sensors_process+0x2d8>
     d52:	81 50       	subi	r24, 0x01	; 1
     d54:	b6 c0       	rjmp	.+364    	; 0xec2 <qtm_key_sensors_process+0x37a>
     d56:	a8 81       	ld	r26, Y
     d58:	b9 81       	ldd	r27, Y+1	; 0x01
     d5a:	80 85       	ldd	r24, Z+8	; 0x08
     d5c:	13 96       	adiw	r26, 0x03	; 3
     d5e:	8c 93       	st	X, r24
     d60:	ec 81       	ldd	r30, Y+4	; 0x04
     d62:	fd 81       	ldd	r31, Y+5	; 0x05
     d64:	ee 0d       	add	r30, r14
     d66:	ff 1d       	adc	r31, r15
     d68:	44 81       	ldd	r20, Z+4	; 0x04
     d6a:	55 81       	ldd	r21, Z+5	; 0x05
     d6c:	a2 81       	ldd	r26, Z+2	; 0x02
     d6e:	b3 81       	ldd	r27, Z+3	; 0x03
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	12 97       	sbiw	r26, 0x02	; 2
     d78:	84 17       	cp	r24, r20
     d7a:	95 07       	cpc	r25, r21
     d7c:	c0 f0       	brcs	.+48     	; 0xdae <qtm_key_sensors_process+0x266>
     d7e:	ae 81       	ldd	r26, Y+6	; 0x06
     d80:	bf 81       	ldd	r27, Y+7	; 0x07
     d82:	aa 0d       	add	r26, r10
     d84:	bb 1d       	adc	r27, r11
     d86:	6c 91       	ld	r22, X
     d88:	26 2f       	mov	r18, r22
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	11 96       	adiw	r26, 0x01	; 1
     d8e:	7c 91       	ld	r23, X
     d90:	7f 5f       	subi	r23, 0xFF	; 255
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <qtm_key_sensors_process+0x250>
     d94:	35 95       	asr	r19
     d96:	27 95       	ror	r18
     d98:	7a 95       	dec	r23
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <qtm_key_sensors_process+0x24c>
     d9c:	84 1b       	sub	r24, r20
     d9e:	95 0b       	sbc	r25, r21
     da0:	62 1b       	sub	r22, r18
     da2:	26 2f       	mov	r18, r22
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	28 17       	cp	r18, r24
     da8:	39 07       	cpc	r19, r25
     daa:	08 f4       	brcc	.+2      	; 0xdae <qtm_key_sensors_process+0x266>
     dac:	97 c0       	rjmp	.+302    	; 0xedc <qtm_key_sensors_process+0x394>
     dae:	70 82       	st	Z, r7
     db0:	ea 81       	ldd	r30, Y+2	; 0x02
     db2:	fb 81       	ldd	r31, Y+3	; 0x03
     db4:	22 81       	ldd	r18, Z+2	; 0x02
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	9d 81       	ldd	r25, Y+5	; 0x05
     dba:	fc 01       	movw	r30, r24
     dbc:	ee 0d       	add	r30, r14
     dbe:	ff 1d       	adc	r31, r15
     dc0:	21 83       	std	Z+1, r18	; 0x01
     dc2:	42 c0       	rjmp	.+132    	; 0xe48 <qtm_key_sensors_process+0x300>
     dc4:	d8 01       	movw	r26, r16
     dc6:	14 96       	adiw	r26, 0x04	; 4
     dc8:	6d 91       	ld	r22, X+
     dca:	7c 91       	ld	r23, X
     dcc:	15 97       	sbiw	r26, 0x05	; 5
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	ed 91       	ld	r30, X+
     dd2:	fc 91       	ld	r31, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	21 81       	ldd	r18, Z+1	; 0x01
     dd8:	32 81       	ldd	r19, Z+2	; 0x02
     dda:	26 17       	cp	r18, r22
     ddc:	37 07       	cpc	r19, r23
     dde:	58 f4       	brcc	.+22     	; 0xdf6 <qtm_key_sensors_process+0x2ae>
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	8c 91       	ld	r24, X
     de4:	11 97       	sbiw	r26, 0x01	; 1
     de6:	81 11       	cpse	r24, r1
     de8:	02 c0       	rjmp	.+4      	; 0xdee <qtm_key_sensors_process+0x2a6>
     dea:	cc 92       	st	X, r12
     dec:	77 c0       	rjmp	.+238    	; 0xedc <qtm_key_sensors_process+0x394>
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	f8 01       	movw	r30, r16
     df2:	81 83       	std	Z+1, r24	; 0x01
     df4:	73 c0       	rjmp	.+230    	; 0xedc <qtm_key_sensors_process+0x394>
     df6:	ee 81       	ldd	r30, Y+6	; 0x06
     df8:	ff 81       	ldd	r31, Y+7	; 0x07
     dfa:	ea 0d       	add	r30, r10
     dfc:	fb 1d       	adc	r31, r11
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	9f 5f       	subi	r25, 0xFF	; 255
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <qtm_key_sensors_process+0x2c6>
     e0a:	55 95       	asr	r21
     e0c:	47 95       	ror	r20
     e0e:	9a 95       	dec	r25
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <qtm_key_sensors_process+0x2c2>
     e12:	26 1b       	sub	r18, r22
     e14:	37 0b       	sbc	r19, r23
     e16:	84 1b       	sub	r24, r20
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	82 17       	cp	r24, r18
     e1c:	93 07       	cpc	r25, r19
     e1e:	60 f4       	brcc	.+24     	; 0xe38 <qtm_key_sensors_process+0x2f0>
     e20:	d8 01       	movw	r26, r16
     e22:	6c 92       	st	X, r6
     e24:	ea 81       	ldd	r30, Y+2	; 0x02
     e26:	fb 81       	ldd	r31, Y+3	; 0x03
     e28:	23 81       	ldd	r18, Z+3	; 0x03
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	fc 01       	movw	r30, r24
     e30:	ee 0d       	add	r30, r14
     e32:	ff 1d       	adc	r31, r15
     e34:	21 83       	std	Z+1, r18	; 0x01
     e36:	52 c0       	rjmp	.+164    	; 0xedc <qtm_key_sensors_process+0x394>
     e38:	f8 01       	movw	r30, r16
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	81 11       	cpse	r24, r1
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <qtm_key_sensors_process+0x2fc>
     e40:	c0 82       	st	Z, r12
     e42:	4c c0       	rjmp	.+152    	; 0xedc <qtm_key_sensors_process+0x394>
     e44:	81 50       	subi	r24, 0x01	; 1
     e46:	81 83       	std	Z+1, r24	; 0x01
     e48:	22 24       	eor	r2, r2
     e4a:	23 94       	inc	r2
     e4c:	3b c0       	rjmp	.+118    	; 0xec4 <qtm_key_sensors_process+0x37c>
     e4e:	d8 01       	movw	r26, r16
     e50:	14 96       	adiw	r26, 0x04	; 4
     e52:	2d 91       	ld	r18, X+
     e54:	3c 91       	ld	r19, X
     e56:	15 97       	sbiw	r26, 0x05	; 5
     e58:	12 96       	adiw	r26, 0x02	; 2
     e5a:	8d 91       	ld	r24, X+
     e5c:	9c 91       	ld	r25, X
     e5e:	13 97       	sbiw	r26, 0x03	; 3
     e60:	dc 01       	movw	r26, r24
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	8d 91       	ld	r24, X+
     e66:	9c 91       	ld	r25, X
     e68:	12 97       	sbiw	r26, 0x02	; 2
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	68 f5       	brcc	.+90     	; 0xeca <qtm_key_sensors_process+0x382>
     e70:	28 1b       	sub	r18, r24
     e72:	39 0b       	sbc	r19, r25
     e74:	ae 81       	ldd	r26, Y+6	; 0x06
     e76:	bf 81       	ldd	r27, Y+7	; 0x07
     e78:	aa 0d       	add	r26, r10
     e7a:	bb 1d       	adc	r27, r11
     e7c:	8c 91       	ld	r24, X
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	05 80       	ldd	r0, Z+5	; 0x05
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <qtm_key_sensors_process+0x340>
     e84:	95 95       	asr	r25
     e86:	87 95       	ror	r24
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <qtm_key_sensors_process+0x33c>
     e8c:	99 27       	eor	r25, r25
     e8e:	28 17       	cp	r18, r24
     e90:	39 07       	cpc	r19, r25
     e92:	18 f4       	brcc	.+6      	; 0xe9a <qtm_key_sensors_process+0x352>
     e94:	f8 01       	movw	r30, r16
     e96:	c0 82       	st	Z, r12
     e98:	1a c0       	rjmp	.+52     	; 0xece <qtm_key_sensors_process+0x386>
     e9a:	d8 01       	movw	r26, r16
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	8c 91       	ld	r24, X
     ea0:	11 97       	sbiw	r26, 0x01	; 1
     ea2:	81 11       	cpse	r24, r1
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <qtm_key_sensors_process+0x376>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	8c 93       	st	X, r24
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	fc 01       	movw	r30, r24
     eb0:	ee 0d       	add	r30, r14
     eb2:	ff 1d       	adc	r31, r15
     eb4:	02 80       	ldd	r0, Z+2	; 0x02
     eb6:	f3 81       	ldd	r31, Z+3	; 0x03
     eb8:	e0 2d       	mov	r30, r0
     eba:	c0 82       	st	Z, r12
     ebc:	11 c0       	rjmp	.+34     	; 0xee0 <qtm_key_sensors_process+0x398>
     ebe:	81 50       	subi	r24, 0x01	; 1
     ec0:	f8 01       	movw	r30, r16
     ec2:	81 83       	std	Z+1, r24	; 0x01
     ec4:	dd 24       	eor	r13, r13
     ec6:	d3 94       	inc	r13
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <qtm_key_sensors_process+0x398>
     eca:	d8 01       	movw	r26, r16
     ecc:	cc 92       	st	X, r12
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	fc 01       	movw	r30, r24
     ed4:	ee 0d       	add	r30, r14
     ed6:	ff 1d       	adc	r31, r15
     ed8:	11 82       	std	Z+1, r1	; 0x01
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <qtm_key_sensors_process+0x398>
     edc:	22 24       	eor	r2, r2
     ede:	23 94       	inc	r2
     ee0:	bf ef       	ldi	r27, 0xFF	; 255
     ee2:	8b 1a       	sub	r8, r27
     ee4:	9b 0a       	sbc	r9, r27
     ee6:	e3 e0       	ldi	r30, 0x03	; 3
     ee8:	ae 0e       	add	r10, r30
     eea:	b1 1c       	adc	r11, r1
     eec:	55 ce       	rjmp	.-854    	; 0xb98 <qtm_key_sensors_process+0x50>
     eee:	e8 81       	ld	r30, Y
     ef0:	f9 81       	ldd	r31, Y+1	; 0x01
     ef2:	80 81       	ld	r24, Z
     ef4:	87 ff       	sbrs	r24, 7
     ef6:	23 c0       	rjmp	.+70     	; 0xf3e <qtm_key_sensors_process+0x3f6>
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	ea 81       	ldd	r30, Y+2	; 0x02
     f02:	fb 81       	ldd	r31, Y+3	; 0x03
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	28 17       	cp	r18, r24
     f0a:	39 07       	cpc	r19, r25
     f0c:	98 f4       	brcc	.+38     	; 0xf34 <qtm_key_sensors_process+0x3ec>
     f0e:	ec 81       	ldd	r30, Y+4	; 0x04
     f10:	fd 81       	ldd	r31, Y+5	; 0x05
     f12:	e4 0f       	add	r30, r20
     f14:	f5 1f       	adc	r31, r21
     f16:	a2 81       	ldd	r26, Z+2	; 0x02
     f18:	b3 81       	ldd	r27, Z+3	; 0x03
     f1a:	8c 91       	ld	r24, X
     f1c:	80 fd       	sbrc	r24, 0
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <qtm_key_sensors_process+0x3e2>
     f20:	90 81       	ld	r25, Z
     f22:	97 7f       	andi	r25, 0xF7	; 247
     f24:	11 f0       	breq	.+4      	; 0xf2a <qtm_key_sensors_process+0x3e2>
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	8c 93       	st	X, r24
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	4a 5f       	subi	r20, 0xFA	; 250
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	e6 cf       	rjmp	.-52     	; 0xf00 <qtm_key_sensors_process+0x3b8>
     f34:	e8 81       	ld	r30, Y
     f36:	f9 81       	ldd	r31, Y+1	; 0x01
     f38:	80 81       	ld	r24, Z
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	80 83       	st	Z, r24
     f3e:	d1 10       	cpse	r13, r1
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <qtm_key_sensors_process+0x408>
     f42:	e8 81       	ld	r30, Y
     f44:	f9 81       	ldd	r31, Y+1	; 0x01
     f46:	21 10       	cpse	r2, r1
     f48:	6f c0       	rjmp	.+222    	; 0x1028 <qtm_key_sensors_process+0x4e0>
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	6e c0       	rjmp	.+220    	; 0x102c <qtm_key_sensors_process+0x4e4>
     f50:	ea 81       	ldd	r30, Y+2	; 0x02
     f52:	fb 81       	ldd	r31, Y+3	; 0x03
     f54:	81 85       	ldd	r24, Z+9	; 0x09
     f56:	88 23       	and	r24, r24
     f58:	a1 f3       	breq	.-24     	; 0xf42 <qtm_key_sensors_process+0x3fa>
     f5a:	e8 81       	ld	r30, Y
     f5c:	f9 81       	ldd	r31, Y+1	; 0x01
     f5e:	80 81       	ld	r24, Z
     f60:	80 68       	ori	r24, 0x80	; 128
     f62:	80 83       	st	Z, r24
     f64:	ea 81       	ldd	r30, Y+2	; 0x02
     f66:	fb 81       	ldd	r31, Y+3	; 0x03
     f68:	81 85       	ldd	r24, Z+9	; 0x09
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	51 f7       	brne	.-44     	; 0xf42 <qtm_key_sensors_process+0x3fa>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	d9 2e       	mov	r13, r25
     f7a:	ea 81       	ldd	r30, Y+2	; 0x02
     f7c:	fb 81       	ldd	r31, Y+3	; 0x03
     f7e:	60 81       	ld	r22, Z
     f80:	71 81       	ldd	r23, Z+1	; 0x01
     f82:	26 17       	cp	r18, r22
     f84:	37 07       	cpc	r19, r23
     f86:	e8 f6       	brcc	.-70     	; 0xf42 <qtm_key_sensors_process+0x3fa>
     f88:	0c 81       	ldd	r16, Y+4	; 0x04
     f8a:	1d 81       	ldd	r17, Y+5	; 0x05
     f8c:	fa 01       	movw	r30, r20
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	e0 0f       	add	r30, r16
     f94:	f1 1f       	adc	r31, r17
     f96:	80 81       	ld	r24, Z
     f98:	98 2f       	mov	r25, r24
     f9a:	97 7f       	andi	r25, 0xF7	; 247
     f9c:	a1 f1       	breq	.+104    	; 0x1006 <qtm_key_sensors_process+0x4be>
     f9e:	85 38       	cpi	r24, 0x85	; 133
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <qtm_key_sensors_process+0x45e>
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	b1 f5       	brne	.+108    	; 0x1012 <qtm_key_sensors_process+0x4ca>
     fa6:	ee 80       	ldd	r14, Y+6	; 0x06
     fa8:	ff 80       	ldd	r15, Y+7	; 0x07
     faa:	d7 01       	movw	r26, r14
     fac:	a4 0f       	add	r26, r20
     fae:	b5 1f       	adc	r27, r21
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	bc 90       	ld	r11, X
     fb4:	bb 20       	and	r11, r11
     fb6:	39 f1       	breq	.+78     	; 0x1006 <qtm_key_sensors_process+0x4be>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	c1 2c       	mov	r12, r1
     fbe:	86 17       	cp	r24, r22
     fc0:	97 07       	cpc	r25, r23
     fc2:	f8 f4       	brcc	.+62     	; 0x1002 <qtm_key_sensors_process+0x4ba>
     fc4:	28 17       	cp	r18, r24
     fc6:	39 07       	cpc	r19, r25
     fc8:	d1 f0       	breq	.+52     	; 0xffe <qtm_key_sensors_process+0x4b6>
     fca:	d8 9e       	mul	r13, r24
     fcc:	d0 01       	movw	r26, r0
     fce:	d9 9e       	mul	r13, r25
     fd0:	b0 0d       	add	r27, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	a0 0f       	add	r26, r16
     fd6:	b1 1f       	adc	r27, r17
     fd8:	ac 91       	ld	r26, X
     fda:	a4 30       	cpi	r26, 0x04	; 4
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <qtm_key_sensors_process+0x49a>
     fde:	a6 38       	cpi	r26, 0x86	; 134
     fe0:	71 f4       	brne	.+28     	; 0xffe <qtm_key_sensors_process+0x4b6>
     fe2:	dc 01       	movw	r26, r24
     fe4:	aa 0f       	add	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	a8 0f       	add	r26, r24
     fea:	b9 1f       	adc	r27, r25
     fec:	ae 0d       	add	r26, r14
     fee:	bf 1d       	adc	r27, r15
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	ac 91       	ld	r26, X
     ff4:	ba 12       	cpse	r11, r26
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <qtm_key_sensors_process+0x4b6>
     ff8:	cb 01       	movw	r24, r22
     ffa:	cc 24       	eor	r12, r12
     ffc:	c3 94       	inc	r12
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	de cf       	rjmp	.-68     	; 0xfbe <qtm_key_sensors_process+0x476>
    1002:	c1 10       	cpse	r12, r1
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <qtm_key_sensors_process+0x4ca>
    1006:	02 80       	ldd	r0, Z+2	; 0x02
    1008:	f3 81       	ldd	r31, Z+3	; 0x03
    100a:	e0 2d       	mov	r30, r0
    100c:	80 81       	ld	r24, Z
    100e:	8e 7f       	andi	r24, 0xFE	; 254
    1010:	05 c0       	rjmp	.+10     	; 0x101c <qtm_key_sensors_process+0x4d4>
    1012:	02 80       	ldd	r0, Z+2	; 0x02
    1014:	f3 81       	ldd	r31, Z+3	; 0x03
    1016:	e0 2d       	mov	r30, r0
    1018:	80 81       	ld	r24, Z
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	80 83       	st	Z, r24
    101e:	2f 5f       	subi	r18, 0xFF	; 255
    1020:	3f 4f       	sbci	r19, 0xFF	; 255
    1022:	4d 5f       	subi	r20, 0xFD	; 253
    1024:	5f 4f       	sbci	r21, 0xFF	; 255
    1026:	a9 cf       	rjmp	.-174    	; 0xf7a <qtm_key_sensors_process+0x432>
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	80 83       	st	Z, r24
    102e:	80 91 72 3e 	lds	r24, 0x3E72	; 0x803e72 <qtm_local_ms_timecount>
    1032:	90 91 73 3e 	lds	r25, 0x3E73	; 0x803e73 <qtm_local_ms_timecount+0x1>
    1036:	e8 81       	ld	r30, Y
    1038:	f9 81       	ldd	r31, Y+1	; 0x01
    103a:	21 81       	ldd	r18, Z+1	; 0x01
    103c:	32 81       	ldd	r19, Z+2	; 0x02
    103e:	a9 01       	movw	r20, r18
    1040:	48 53       	subi	r20, 0x38	; 56
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	48 17       	cp	r20, r24
    1046:	59 07       	cpc	r21, r25
    1048:	38 f4       	brcc	.+14     	; 0x1058 <qtm_key_sensors_process+0x510>
    104a:	82 1b       	sub	r24, r18
    104c:	93 0b       	sbc	r25, r19
    104e:	aa 24       	eor	r10, r10
    1050:	a3 94       	inc	r10
    1052:	a3 e0       	ldi	r26, 0x03	; 3
    1054:	ba 2e       	mov	r11, r26
    1056:	44 c0       	rjmp	.+136    	; 0x10e0 <qtm_key_sensors_process+0x598>
    1058:	82 17       	cp	r24, r18
    105a:	93 07       	cpc	r25, r19
    105c:	10 f0       	brcs	.+4      	; 0x1062 <qtm_key_sensors_process+0x51a>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	04 c1       	rjmp	.+520    	; 0x126a <qtm_key_sensors_process+0x722>
    1062:	82 1b       	sub	r24, r18
    1064:	93 0b       	sbc	r25, r19
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	89 3c       	cpi	r24, 0xC9	; 201
    106a:	91 05       	cpc	r25, r1
    106c:	c0 f3       	brcs	.-16     	; 0x105e <qtm_key_sensors_process+0x516>
    106e:	ef cf       	rjmp	.-34     	; 0x104e <qtm_key_sensors_process+0x506>
    1070:	88 5c       	subi	r24, 0xC8	; 200
    1072:	91 09       	sbc	r25, r1
    1074:	e8 81       	ld	r30, Y
    1076:	f9 81       	ldd	r31, Y+1	; 0x01
    1078:	21 81       	ldd	r18, Z+1	; 0x01
    107a:	32 81       	ldd	r19, Z+2	; 0x02
    107c:	28 53       	subi	r18, 0x38	; 56
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	21 83       	std	Z+1, r18	; 0x01
    1082:	32 83       	std	Z+2, r19	; 0x02
    1084:	23 81       	ldd	r18, Z+3	; 0x03
    1086:	21 11       	cpse	r18, r1
    1088:	96 c0       	rjmp	.+300    	; 0x11b6 <qtm_key_sensors_process+0x66e>
    108a:	24 81       	ldd	r18, Z+4	; 0x04
    108c:	22 23       	and	r18, r18
    108e:	11 f0       	breq	.+4      	; 0x1094 <qtm_key_sensors_process+0x54c>
    1090:	21 50       	subi	r18, 0x01	; 1
    1092:	24 83       	std	Z+4, r18	; 0x04
    1094:	e8 81       	ld	r30, Y
    1096:	f9 81       	ldd	r31, Y+1	; 0x01
    1098:	25 81       	ldd	r18, Z+5	; 0x05
    109a:	22 23       	and	r18, r18
    109c:	11 f0       	breq	.+4      	; 0x10a2 <qtm_key_sensors_process+0x55a>
    109e:	21 50       	subi	r18, 0x01	; 1
    10a0:	25 83       	std	Z+5, r18	; 0x05
    10a2:	8a 80       	ldd	r8, Y+2	; 0x02
    10a4:	9b 80       	ldd	r9, Y+3	; 0x03
    10a6:	d4 01       	movw	r26, r8
    10a8:	16 96       	adiw	r26, 0x06	; 6
    10aa:	2c 91       	ld	r18, X
    10ac:	16 97       	sbiw	r26, 0x06	; 6
    10ae:	21 11       	cpse	r18, r1
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <qtm_key_sensors_process+0x5a0>
    10b2:	8a 80       	ldd	r8, Y+2	; 0x02
    10b4:	9b 80       	ldd	r9, Y+3	; 0x03
    10b6:	f4 01       	movw	r30, r8
    10b8:	27 81       	ldd	r18, Z+7	; 0x07
    10ba:	21 11       	cpse	r18, r1
    10bc:	48 c0       	rjmp	.+144    	; 0x114e <qtm_key_sensors_process+0x606>
    10be:	ea 81       	ldd	r30, Y+2	; 0x02
    10c0:	fb 81       	ldd	r31, Y+3	; 0x03
    10c2:	23 81       	ldd	r18, Z+3	; 0x03
    10c4:	22 23       	and	r18, r18
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <qtm_key_sensors_process+0x598>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ea 81       	ldd	r30, Y+2	; 0x02
    10d2:	fb 81       	ldd	r31, Y+3	; 0x03
    10d4:	40 81       	ld	r20, Z
    10d6:	51 81       	ldd	r21, Z+1	; 0x01
    10d8:	a4 17       	cp	r26, r20
    10da:	b5 07       	cpc	r27, r21
    10dc:	08 f4       	brcc	.+2      	; 0x10e0 <qtm_key_sensors_process+0x598>
    10de:	6e c0       	rjmp	.+220    	; 0x11bc <qtm_key_sensors_process+0x674>
    10e0:	89 3c       	cpi	r24, 0xC9	; 201
    10e2:	91 05       	cpc	r25, r1
    10e4:	28 f6       	brcc	.-118    	; 0x1070 <qtm_key_sensors_process+0x528>
    10e6:	bb cf       	rjmp	.-138    	; 0x105e <qtm_key_sensors_process+0x516>
    10e8:	08 81       	ld	r16, Y
    10ea:	19 81       	ldd	r17, Y+1	; 0x01
    10ec:	f8 01       	movw	r30, r16
    10ee:	24 81       	ldd	r18, Z+4	; 0x04
    10f0:	21 11       	cpse	r18, r1
    10f2:	df cf       	rjmp	.-66     	; 0x10b2 <qtm_key_sensors_process+0x56a>
    10f4:	ed 90       	ld	r14, X+
    10f6:	fc 90       	ld	r15, X
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	4e 15       	cp	r20, r14
    1102:	5f 05       	cpc	r21, r15
    1104:	f1 f0       	breq	.+60     	; 0x1142 <qtm_key_sensors_process+0x5fa>
    1106:	ec 81       	ldd	r30, Y+4	; 0x04
    1108:	fd 81       	ldd	r31, Y+5	; 0x05
    110a:	e6 0f       	add	r30, r22
    110c:	f7 1f       	adc	r31, r23
    110e:	20 81       	ld	r18, Z
    1110:	23 30       	cpi	r18, 0x03	; 3
    1112:	11 f0       	breq	.+4      	; 0x1118 <qtm_key_sensors_process+0x5d0>
    1114:	28 30       	cpi	r18, 0x08	; 8
    1116:	81 f4       	brne	.+32     	; 0x1138 <qtm_key_sensors_process+0x5f0>
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	c2 80       	ldd	r12, Z+2	; 0x02
    111e:	d3 80       	ldd	r13, Z+3	; 0x03
    1120:	d6 01       	movw	r26, r12
    1122:	11 96       	adiw	r26, 0x01	; 1
    1124:	cd 90       	ld	r12, X+
    1126:	dc 90       	ld	r13, X
    1128:	12 97       	sbiw	r26, 0x02	; 2
    112a:	2c 15       	cp	r18, r12
    112c:	3d 05       	cpc	r19, r13
    112e:	20 f4       	brcc	.+8      	; 0x1138 <qtm_key_sensors_process+0x5f0>
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	24 83       	std	Z+4, r18	; 0x04
    1136:	35 83       	std	Z+5, r19	; 0x05
    1138:	4f 5f       	subi	r20, 0xFF	; 255
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	6a 5f       	subi	r22, 0xFA	; 250
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	df cf       	rjmp	.-66     	; 0x1100 <qtm_key_sensors_process+0x5b8>
    1142:	f4 01       	movw	r30, r8
    1144:	26 81       	ldd	r18, Z+6	; 0x06
    1146:	d8 01       	movw	r26, r16
    1148:	14 96       	adiw	r26, 0x04	; 4
    114a:	2c 93       	st	X, r18
    114c:	b2 cf       	rjmp	.-156    	; 0x10b2 <qtm_key_sensors_process+0x56a>
    114e:	08 81       	ld	r16, Y
    1150:	19 81       	ldd	r17, Y+1	; 0x01
    1152:	d8 01       	movw	r26, r16
    1154:	15 96       	adiw	r26, 0x05	; 5
    1156:	2c 91       	ld	r18, X
    1158:	21 11       	cpse	r18, r1
    115a:	b1 cf       	rjmp	.-158    	; 0x10be <qtm_key_sensors_process+0x576>
    115c:	e0 80       	ld	r14, Z
    115e:	f1 80       	ldd	r15, Z+1	; 0x01
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	4e 15       	cp	r20, r14
    116a:	5f 05       	cpc	r21, r15
    116c:	f1 f0       	breq	.+60     	; 0x11aa <qtm_key_sensors_process+0x662>
    116e:	ec 81       	ldd	r30, Y+4	; 0x04
    1170:	fd 81       	ldd	r31, Y+5	; 0x05
    1172:	e6 0f       	add	r30, r22
    1174:	f7 1f       	adc	r31, r23
    1176:	20 81       	ld	r18, Z
    1178:	23 30       	cpi	r18, 0x03	; 3
    117a:	11 f0       	breq	.+4      	; 0x1180 <qtm_key_sensors_process+0x638>
    117c:	28 30       	cpi	r18, 0x08	; 8
    117e:	81 f4       	brne	.+32     	; 0x11a0 <qtm_key_sensors_process+0x658>
    1180:	24 81       	ldd	r18, Z+4	; 0x04
    1182:	35 81       	ldd	r19, Z+5	; 0x05
    1184:	c2 80       	ldd	r12, Z+2	; 0x02
    1186:	d3 80       	ldd	r13, Z+3	; 0x03
    1188:	d6 01       	movw	r26, r12
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	cd 90       	ld	r12, X+
    118e:	dc 90       	ld	r13, X
    1190:	12 97       	sbiw	r26, 0x02	; 2
    1192:	c2 16       	cp	r12, r18
    1194:	d3 06       	cpc	r13, r19
    1196:	20 f4       	brcc	.+8      	; 0x11a0 <qtm_key_sensors_process+0x658>
    1198:	21 50       	subi	r18, 0x01	; 1
    119a:	31 09       	sbc	r19, r1
    119c:	24 83       	std	Z+4, r18	; 0x04
    119e:	35 83       	std	Z+5, r19	; 0x05
    11a0:	4f 5f       	subi	r20, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	6a 5f       	subi	r22, 0xFA	; 250
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	df cf       	rjmp	.-66     	; 0x1168 <qtm_key_sensors_process+0x620>
    11aa:	f4 01       	movw	r30, r8
    11ac:	27 81       	ldd	r18, Z+7	; 0x07
    11ae:	d8 01       	movw	r26, r16
    11b0:	15 96       	adiw	r26, 0x05	; 5
    11b2:	2c 93       	st	X, r18
    11b4:	84 cf       	rjmp	.-248    	; 0x10be <qtm_key_sensors_process+0x576>
    11b6:	21 50       	subi	r18, 0x01	; 1
    11b8:	23 83       	std	Z+3, r18	; 0x03
    11ba:	81 cf       	rjmp	.-254    	; 0x10be <qtm_key_sensors_process+0x576>
    11bc:	a9 01       	movw	r20, r18
    11be:	44 0f       	add	r20, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	ec 81       	ldd	r30, Y+4	; 0x04
    11c4:	fd 81       	ldd	r31, Y+5	; 0x05
    11c6:	e4 0f       	add	r30, r20
    11c8:	f5 1f       	adc	r31, r21
    11ca:	60 81       	ld	r22, Z
    11cc:	65 38       	cpi	r22, 0x85	; 133
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <qtm_key_sensors_process+0x68a>
    11d0:	47 c0       	rjmp	.+142    	; 0x1260 <qtm_key_sensors_process+0x718>
    11d2:	61 81       	ldd	r22, Z+1	; 0x01
    11d4:	66 23       	and	r22, r22
    11d6:	19 f0       	breq	.+6      	; 0x11de <qtm_key_sensors_process+0x696>
    11d8:	61 50       	subi	r22, 0x01	; 1
    11da:	61 83       	std	Z+1, r22	; 0x01
    11dc:	41 c0       	rjmp	.+130    	; 0x1260 <qtm_key_sensors_process+0x718>
    11de:	a0 82       	st	Z, r10
    11e0:	6c 81       	ldd	r22, Y+4	; 0x04
    11e2:	7d 81       	ldd	r23, Y+5	; 0x05
    11e4:	fb 01       	movw	r30, r22
    11e6:	e4 0f       	add	r30, r20
    11e8:	f5 1f       	adc	r31, r21
    11ea:	02 80       	ldd	r0, Z+2	; 0x02
    11ec:	f3 81       	ldd	r31, Z+3	; 0x03
    11ee:	e0 2d       	mov	r30, r0
    11f0:	b0 82       	st	Z, r11
    11f2:	ee 81       	ldd	r30, Y+6	; 0x06
    11f4:	ff 81       	ldd	r31, Y+7	; 0x07
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	d2 80       	ldd	r13, Z+2	; 0x02
    11fc:	dd 20       	and	r13, r13
    11fe:	81 f1       	breq	.+96     	; 0x1260 <qtm_key_sensors_process+0x718>
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	00 e0       	ldi	r16, 0x00	; 0
    1206:	10 e0       	ldi	r17, 0x00	; 0
    1208:	ea 81       	ldd	r30, Y+2	; 0x02
    120a:	fb 81       	ldd	r31, Y+3	; 0x03
    120c:	60 81       	ld	r22, Z
    120e:	71 81       	ldd	r23, Z+1	; 0x01
    1210:	06 17       	cp	r16, r22
    1212:	17 07       	cpc	r17, r23
    1214:	28 f5       	brcc	.+74     	; 0x1260 <qtm_key_sensors_process+0x718>
    1216:	ee 81       	ldd	r30, Y+6	; 0x06
    1218:	ff 81       	ldd	r31, Y+7	; 0x07
    121a:	e4 0f       	add	r30, r20
    121c:	f5 1f       	adc	r31, r21
    121e:	62 81       	ldd	r22, Z+2	; 0x02
    1220:	d6 12       	cpse	r13, r22
    1222:	19 c0       	rjmp	.+50     	; 0x1256 <qtm_key_sensors_process+0x70e>
    1224:	ba 01       	movw	r22, r20
    1226:	66 0f       	add	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	ec 81       	ldd	r30, Y+4	; 0x04
    122c:	fd 81       	ldd	r31, Y+5	; 0x05
    122e:	4f 01       	movw	r8, r30
    1230:	86 0e       	add	r8, r22
    1232:	97 1e       	adc	r9, r23
    1234:	f4 01       	movw	r30, r8
    1236:	e2 80       	ldd	r14, Z+2	; 0x02
    1238:	f3 80       	ldd	r15, Z+3	; 0x03
    123a:	f7 01       	movw	r30, r14
    123c:	f0 80       	ld	r15, Z
    123e:	f0 fe       	sbrs	r15, 0
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <qtm_key_sensors_process+0x70e>
    1242:	f4 01       	movw	r30, r8
    1244:	a0 82       	st	Z, r10
    1246:	ec 81       	ldd	r30, Y+4	; 0x04
    1248:	fd 81       	ldd	r31, Y+5	; 0x05
    124a:	e6 0f       	add	r30, r22
    124c:	f7 1f       	adc	r31, r23
    124e:	02 80       	ldd	r0, Z+2	; 0x02
    1250:	f3 81       	ldd	r31, Z+3	; 0x03
    1252:	e0 2d       	mov	r30, r0
    1254:	b0 82       	st	Z, r11
    1256:	0f 5f       	subi	r16, 0xFF	; 255
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	4d 5f       	subi	r20, 0xFD	; 253
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	d4 cf       	rjmp	.-88     	; 0x1208 <qtm_key_sensors_process+0x6c0>
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	2d 5f       	subi	r18, 0xFD	; 253
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	34 cf       	rjmp	.-408    	; 0x10d0 <qtm_key_sensors_process+0x588>
    1268:	8b e0       	ldi	r24, 0x0B	; 11
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	7f 90       	pop	r7
    1284:	6f 90       	pop	r6
    1286:	5f 90       	pop	r5
    1288:	4f 90       	pop	r4
    128a:	3f 90       	pop	r3
    128c:	2f 90       	pop	r2
    128e:	08 95       	ret

00001290 <qtm_error_handler>:
    1290:	95 e0       	ldi	r25, 0x05	; 5
    1292:	90 93 76 3e 	sts	0x3E76, r25	; 0x803e76 <qtm_state>
    1296:	e0 91 b8 3e 	lds	r30, 0x3EB8	; 0x803eb8 <qtm>
    129a:	f0 91 b9 3e 	lds	r31, 0x3EB9	; 0x803eb9 <qtm+0x1>
    129e:	01 88       	ldd	r0, Z+17	; 0x11
    12a0:	f2 89       	ldd	r31, Z+18	; 0x12
    12a2:	e0 2d       	mov	r30, r0
    12a4:	30 97       	sbiw	r30, 0x00	; 0
    12a6:	09 f0       	breq	.+2      	; 0x12aa <qtm_error_handler+0x1a>
    12a8:	09 94       	ijmp
    12aa:	ff cf       	rjmp	.-2      	; 0x12aa <qtm_error_handler+0x1a>

000012ac <generic_callback_function>:
    12ac:	e0 91 b8 3e 	lds	r30, 0x3EB8	; 0x803eb8 <qtm>
    12b0:	f0 91 b9 3e 	lds	r31, 0x3EB9	; 0x803eb9 <qtm+0x1>
    12b4:	03 88       	ldd	r0, Z+19	; 0x13
    12b6:	f4 89       	ldd	r31, Z+20	; 0x14
    12b8:	e0 2d       	mov	r30, r0
    12ba:	30 97       	sbiw	r30, 0x00	; 0
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <generic_callback_function+0x14>
    12be:	09 94       	ijmp
    12c0:	80 e4       	ldi	r24, 0x40	; 64
    12c2:	e6 cf       	rjmp	.-52     	; 0x1290 <qtm_error_handler>

000012c4 <qmt_get_binding_layer_ptr>:
    12c4:	80 91 b8 3e 	lds	r24, 0x3EB8	; 0x803eb8 <qtm>
    12c8:	90 91 b9 3e 	lds	r25, 0x3EB9	; 0x803eb9 <qtm+0x1>
    12cc:	08 95       	ret

000012ce <qtm_binding_layer_init>:
    12ce:	cf 93       	push	r28
    12d0:	80 93 b8 3e 	sts	0x3EB8, r24	; 0x803eb8 <qtm>
    12d4:	90 93 b9 3e 	sts	0x3EB9, r25	; 0x803eb9 <qtm+0x1>
    12d8:	80 91 76 3e 	lds	r24, 0x3E76	; 0x803e76 <qtm_state>
    12dc:	85 30       	cpi	r24, 0x05	; 5
    12de:	39 f0       	breq	.+14     	; 0x12ee <qtm_binding_layer_init+0x20>
    12e0:	82 30       	cpi	r24, 0x02	; 2
    12e2:	28 f0       	brcs	.+10     	; 0x12ee <qtm_binding_layer_init+0x20>
    12e4:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    12e8:	88 23       	and	r24, r24
    12ea:	71 f1       	breq	.+92     	; 0x1348 <qtm_binding_layer_init+0x7a>
    12ec:	40 c0       	rjmp	.+128    	; 0x136e <qtm_binding_layer_init+0xa0>
    12ee:	10 92 74 3e 	sts	0x3E74, r1	; 0x803e74 <errors>
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
    12f4:	a0 91 b8 3e 	lds	r26, 0x3EB8	; 0x803eb8 <qtm>
    12f8:	b0 91 b9 3e 	lds	r27, 0x3EB9	; 0x803eb9 <qtm+0x1>
    12fc:	8c 2f       	mov	r24, r28
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	ed 91       	ld	r30, X+
    1308:	fc 91       	ld	r31, X
    130a:	12 97       	sbiw	r26, 0x02	; 2
    130c:	e8 0f       	add	r30, r24
    130e:	f9 1f       	adc	r31, r25
    1310:	01 90       	ld	r0, Z+
    1312:	f0 81       	ld	r31, Z
    1314:	e0 2d       	mov	r30, r0
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	29 f3       	breq	.-54     	; 0x12e4 <qtm_binding_layer_init+0x16>
    131a:	17 96       	adiw	r26, 0x07	; 7
    131c:	2d 91       	ld	r18, X+
    131e:	3c 91       	ld	r19, X
    1320:	18 97       	sbiw	r26, 0x08	; 8
    1322:	d9 01       	movw	r26, r18
    1324:	a8 0f       	add	r26, r24
    1326:	b9 1f       	adc	r27, r25
    1328:	8d 91       	ld	r24, X+
    132a:	9c 91       	ld	r25, X
    132c:	09 95       	icall
    132e:	88 23       	and	r24, r24
    1330:	29 f0       	breq	.+10     	; 0x133c <qtm_binding_layer_init+0x6e>
    1332:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 74 3e 	sts	0x3E74, r24	; 0x803e74 <errors>
    133c:	cf 5f       	subi	r28, 0xFF	; 255
    133e:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    1342:	88 23       	and	r24, r24
    1344:	b9 f2       	breq	.-82     	; 0x12f4 <qtm_binding_layer_init+0x26>
    1346:	ce cf       	rjmp	.-100    	; 0x12e4 <qtm_binding_layer_init+0x16>
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    134e:	e0 91 b8 3e 	lds	r30, 0x3EB8	; 0x803eb8 <qtm>
    1352:	f0 91 b9 3e 	lds	r31, 0x3EB9	; 0x803eb9 <qtm+0x1>
    1356:	07 84       	ldd	r0, Z+15	; 0x0f
    1358:	f0 89       	ldd	r31, Z+16	; 0x10
    135a:	e0 2d       	mov	r30, r0
    135c:	30 97       	sbiw	r30, 0x00	; 0
    135e:	11 f0       	breq	.+4      	; 0x1364 <qtm_binding_layer_init+0x96>
    1360:	09 95       	icall
    1362:	08 c0       	rjmp	.+16     	; 0x1374 <qtm_binding_layer_init+0xa6>
    1364:	85 e0       	ldi	r24, 0x05	; 5
    1366:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <qtm_binding_layer_init+0xa2>
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	80 93 74 3e 	sts	0x3E74, r24	; 0x803e74 <errors>
    1374:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    1378:	88 23       	and	r24, r24
    137a:	29 f0       	breq	.+10     	; 0x1386 <qtm_binding_layer_init+0xb8>
    137c:	10 92 74 3e 	sts	0x3E74, r1	; 0x803e74 <errors>
    1380:	80 e8       	ldi	r24, 0x80	; 128
    1382:	cf 91       	pop	r28
    1384:	85 cf       	rjmp	.-246    	; 0x1290 <qtm_error_handler>
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <qtm_lib_start_acquisition>:
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	18 2f       	mov	r17, r24
    1392:	a0 91 b8 3e 	lds	r26, 0x3EB8	; 0x803eb8 <qtm>
    1396:	b0 91 b9 3e 	lds	r27, 0x3EB9	; 0x803eb9 <qtm+0x1>
    139a:	15 96       	adiw	r26, 0x05	; 5
    139c:	2d 91       	ld	r18, X+
    139e:	3c 91       	ld	r19, X
    13a0:	16 97       	sbiw	r26, 0x06	; 6
    13a2:	d0 e0       	ldi	r29, 0x00	; 0
    13a4:	f9 01       	movw	r30, r18
    13a6:	ed 0f       	add	r30, r29
    13a8:	f1 1d       	adc	r31, r1
    13aa:	ed 0f       	add	r30, r29
    13ac:	f1 1d       	adc	r31, r1
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	89 2b       	or	r24, r25
    13b4:	11 f0       	breq	.+4      	; 0x13ba <qtm_lib_start_acquisition+0x30>
    13b6:	df 5f       	subi	r29, 0xFF	; 255
    13b8:	f5 cf       	rjmp	.-22     	; 0x13a4 <qtm_lib_start_acquisition+0x1a>
    13ba:	53 96       	adiw	r26, 0x13	; 19
    13bc:	8d 91       	ld	r24, X+
    13be:	9c 91       	ld	r25, X
    13c0:	54 97       	sbiw	r26, 0x14	; 20
    13c2:	89 2b       	or	r24, r25
    13c4:	49 f1       	breq	.+82     	; 0x1418 <qtm_lib_start_acquisition+0x8e>
    13c6:	81 2f       	mov	r24, r17
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	f9 01       	movw	r30, r18
    13d0:	e8 0f       	add	r30, r24
    13d2:	f9 1f       	adc	r31, r25
    13d4:	01 90       	ld	r0, Z+
    13d6:	f0 81       	ld	r31, Z
    13d8:	e0 2d       	mov	r30, r0
    13da:	30 97       	sbiw	r30, 0x00	; 0
    13dc:	e9 f0       	breq	.+58     	; 0x1418 <qtm_lib_start_acquisition+0x8e>
    13de:	1b 96       	adiw	r26, 0x0b	; 11
    13e0:	2d 91       	ld	r18, X+
    13e2:	3c 91       	ld	r19, X
    13e4:	1c 97       	sbiw	r26, 0x0c	; 12
    13e6:	d9 01       	movw	r26, r18
    13e8:	a8 0f       	add	r26, r24
    13ea:	b9 1f       	adc	r27, r25
    13ec:	8d 91       	ld	r24, X+
    13ee:	9c 91       	ld	r25, X
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	91 f0       	breq	.+36     	; 0x1418 <qtm_lib_start_acquisition+0x8e>
    13f4:	66 e5       	ldi	r22, 0x56	; 86
    13f6:	79 e0       	ldi	r23, 0x09	; 9
    13f8:	09 95       	icall
    13fa:	c8 2f       	mov	r28, r24
    13fc:	81 11       	cpse	r24, r1
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <qtm_lib_start_acquisition+0x82>
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    1406:	10 92 75 3e 	sts	0x3E75, r1	; 0x803e75 <current_process_id>
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <qtm_lib_start_acquisition+0x88>
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    1412:	1d 17       	cp	r17, r29
    1414:	20 f0       	brcs	.+8      	; 0x141e <qtm_lib_start_acquisition+0x94>
    1416:	01 c0       	rjmp	.+2      	; 0x141a <qtm_lib_start_acquisition+0x90>
    1418:	c2 e0       	ldi	r28, 0x02	; 2
    141a:	82 e8       	ldi	r24, 0x82	; 130
    141c:	39 df       	rcall	.-398    	; 0x1290 <qtm_error_handler>
    141e:	8c 2f       	mov	r24, r28
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	08 95       	ret

00001428 <qtm_lib_acq_process>:
    1428:	e0 91 b8 3e 	lds	r30, 0x3EB8	; 0x803eb8 <qtm>
    142c:	f0 91 b9 3e 	lds	r31, 0x3EB9	; 0x803eb9 <qtm+0x1>
    1430:	05 84       	ldd	r0, Z+13	; 0x0d
    1432:	f6 85       	ldd	r31, Z+14	; 0x0e
    1434:	e0 2d       	mov	r30, r0
    1436:	09 94       	ijmp

00001438 <qtm_lib_post_process>:
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	1f 92       	push	r1
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	19 82       	std	Y+1, r1	; 0x01
    1446:	e0 91 b8 3e 	lds	r30, 0x3EB8	; 0x803eb8 <qtm>
    144a:	f0 91 b9 3e 	lds	r31, 0x3EB9	; 0x803eb9 <qtm+0x1>
    144e:	05 88       	ldd	r0, Z+21	; 0x15
    1450:	f6 89       	ldd	r31, Z+22	; 0x16
    1452:	e0 2d       	mov	r30, r0
    1454:	30 97       	sbiw	r30, 0x00	; 0
    1456:	49 f0       	breq	.+18     	; 0x146a <qtm_lib_post_process+0x32>
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    145e:	ce 01       	movw	r24, r28
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	09 95       	icall
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    146a:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    146e:	81 11       	cpse	r24, r1
    1470:	2c c0       	rjmp	.+88     	; 0x14ca <qtm_lib_post_process+0x92>
    1472:	19 81       	ldd	r17, Y+1	; 0x01
    1474:	11 11       	cpse	r17, r1
    1476:	29 c0       	rjmp	.+82     	; 0x14ca <qtm_lib_post_process+0x92>
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    147e:	a0 91 b8 3e 	lds	r26, 0x3EB8	; 0x803eb8 <qtm>
    1482:	b0 91 b9 3e 	lds	r27, 0x3EB9	; 0x803eb9 <qtm+0x1>
    1486:	80 91 75 3e 	lds	r24, 0x3E75	; 0x803e75 <current_process_id>
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	13 96       	adiw	r26, 0x03	; 3
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	14 97       	sbiw	r26, 0x04	; 4
    1498:	e8 0f       	add	r30, r24
    149a:	f9 1f       	adc	r31, r25
    149c:	01 90       	ld	r0, Z+
    149e:	f0 81       	ld	r31, Z
    14a0:	e0 2d       	mov	r30, r0
    14a2:	19 96       	adiw	r26, 0x09	; 9
    14a4:	2d 91       	ld	r18, X+
    14a6:	3c 91       	ld	r19, X
    14a8:	1a 97       	sbiw	r26, 0x0a	; 10
    14aa:	30 97       	sbiw	r30, 0x00	; 0
    14ac:	81 f0       	breq	.+32     	; 0x14ce <qtm_lib_post_process+0x96>
    14ae:	d9 01       	movw	r26, r18
    14b0:	a8 0f       	add	r26, r24
    14b2:	b9 1f       	adc	r27, r25
    14b4:	8d 91       	ld	r24, X+
    14b6:	9c 91       	ld	r25, X
    14b8:	09 95       	icall
    14ba:	81 11       	cpse	r24, r1
    14bc:	3d c0       	rjmp	.+122    	; 0x1538 <qtm_lib_post_process+0x100>
    14be:	80 91 75 3e 	lds	r24, 0x3E75	; 0x803e75 <current_process_id>
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	80 93 75 3e 	sts	0x3E75, r24	; 0x803e75 <current_process_id>
    14c8:	da cf       	rjmp	.-76     	; 0x147e <qtm_lib_post_process+0x46>
    14ca:	10 e0       	ldi	r17, 0x00	; 0
    14cc:	3c c0       	rjmp	.+120    	; 0x1546 <qtm_lib_post_process+0x10e>
    14ce:	10 92 75 3e 	sts	0x3E75, r1	; 0x803e75 <current_process_id>
    14d2:	f9 01       	movw	r30, r18
    14d4:	e1 0f       	add	r30, r17
    14d6:	f1 1d       	adc	r31, r1
    14d8:	e1 0f       	add	r30, r17
    14da:	f1 1d       	adc	r31, r1
    14dc:	01 90       	ld	r0, Z+
    14de:	f0 81       	ld	r31, Z
    14e0:	e0 2d       	mov	r30, r0
    14e2:	30 97       	sbiw	r30, 0x00	; 0
    14e4:	59 f0       	breq	.+22     	; 0x14fc <qtm_lib_post_process+0xc4>
    14e6:	01 90       	ld	r0, Z+
    14e8:	f0 81       	ld	r31, Z
    14ea:	e0 2d       	mov	r30, r0
    14ec:	80 81       	ld	r24, Z
    14ee:	87 ff       	sbrs	r24, 7
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <qtm_lib_post_process+0xc0>
    14f2:	9c 91       	ld	r25, X
    14f4:	94 60       	ori	r25, 0x04	; 4
    14f6:	9c 93       	st	X, r25
    14f8:	1f 5f       	subi	r17, 0xFF	; 255
    14fa:	eb cf       	rjmp	.-42     	; 0x14d2 <qtm_lib_post_process+0x9a>
    14fc:	10 93 75 3e 	sts	0x3E75, r17	; 0x803e75 <current_process_id>
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	80 93 76 3e 	sts	0x3E76, r24	; 0x803e76 <qtm_state>
    1506:	57 96       	adiw	r26, 0x17	; 23
    1508:	ed 91       	ld	r30, X+
    150a:	fc 91       	ld	r31, X
    150c:	58 97       	sbiw	r26, 0x18	; 24
    150e:	30 97       	sbiw	r30, 0x00	; 0
    1510:	11 f0       	breq	.+4      	; 0x1516 <qtm_lib_post_process+0xde>
    1512:	09 95       	icall
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <qtm_lib_post_process+0xe8>
    1516:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	80 93 74 3e 	sts	0x3E74, r24	; 0x803e74 <errors>
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    1526:	88 23       	and	r24, r24
    1528:	71 f0       	breq	.+28     	; 0x1546 <qtm_lib_post_process+0x10e>
    152a:	10 92 74 3e 	sts	0x3E74, r1	; 0x803e74 <errors>
    152e:	80 91 75 3e 	lds	r24, 0x3E75	; 0x803e75 <current_process_id>
    1532:	80 64       	ori	r24, 0x40	; 64
    1534:	ad de       	rcall	.-678    	; 0x1290 <qtm_error_handler>
    1536:	07 c0       	rjmp	.+14     	; 0x1546 <qtm_lib_post_process+0x10e>
    1538:	80 91 74 3e 	lds	r24, 0x3E74	; 0x803e74 <errors>
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	80 93 74 3e 	sts	0x3E74, r24	; 0x803e74 <errors>
    1542:	13 e0       	ldi	r17, 0x03	; 3
    1544:	ee cf       	rjmp	.-36     	; 0x1522 <qtm_lib_post_process+0xea>
    1546:	81 2f       	mov	r24, r17
    1548:	0f 90       	pop	r0
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	08 95       	ret

00001552 <select_next_channel_to_measure>:
    1552:	80 91 7a 3e 	lds	r24, 0x3E7A	; 0x803e7a <current_measure_channel>
    1556:	90 91 7b 3e 	lds	r25, 0x3E7B	; 0x803e7b <current_measure_channel+0x1>
    155a:	a0 91 ba 3e 	lds	r26, 0x3EBA	; 0x803eba <qtm_acquisition_control_working_set_ptr>
    155e:	b0 91 bb 3e 	lds	r27, 0x3EBB	; 0x803ebb <qtm_acquisition_control_working_set_ptr+0x1>
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	11 97       	sbiw	r26, 0x01	; 1
    1568:	40 81       	ld	r20, Z
    156a:	51 81       	ldd	r21, Z+1	; 0x01
    156c:	25 e0       	ldi	r18, 0x05	; 5
    156e:	28 9f       	mul	r18, r24
    1570:	b0 01       	movw	r22, r0
    1572:	29 9f       	mul	r18, r25
    1574:	70 0d       	add	r23, r0
    1576:	11 24       	eor	r1, r1
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	84 17       	cp	r24, r20
    157e:	95 07       	cpc	r25, r21
    1580:	a8 f4       	brcc	.+42     	; 0x15ac <select_next_channel_to_measure+0x5a>
    1582:	14 96       	adiw	r26, 0x04	; 4
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	15 97       	sbiw	r26, 0x05	; 5
    158a:	e2 0f       	add	r30, r18
    158c:	f3 1f       	adc	r31, r19
    158e:	e6 0f       	add	r30, r22
    1590:	f7 1f       	adc	r31, r23
    1592:	e0 81       	ld	r30, Z
    1594:	2b 5f       	subi	r18, 0xFB	; 251
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	e0 fd       	sbrc	r30, 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <select_next_channel_to_measure+0x4e>
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	ee cf       	rjmp	.-36     	; 0x157c <select_next_channel_to_measure+0x2a>
    15a0:	80 93 7a 3e 	sts	0x3E7A, r24	; 0x803e7a <current_measure_channel>
    15a4:	90 93 7b 3e 	sts	0x3E7B, r25	; 0x803e7b <current_measure_channel+0x1>
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	08 95       	ret
    15ac:	10 92 7a 3e 	sts	0x3E7A, r1	; 0x803e7a <current_measure_channel>
    15b0:	10 92 7b 3e 	sts	0x3E7B, r1	; 0x803e7b <current_measure_channel+0x1>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	08 95       	ret

000015b8 <qtm_measure_node>:
    15b8:	bc 01       	movw	r22, r24
    15ba:	e0 91 ba 3e 	lds	r30, 0x3EBA	; 0x803eba <qtm_acquisition_control_working_set_ptr>
    15be:	f0 91 bb 3e 	lds	r31, 0x3EBB	; 0x803ebb <qtm_acquisition_control_working_set_ptr+0x1>
    15c2:	86 e0       	ldi	r24, 0x06	; 6
    15c4:	86 9f       	mul	r24, r22
    15c6:	90 01       	movw	r18, r0
    15c8:	87 9f       	mul	r24, r23
    15ca:	30 0d       	add	r19, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	a2 81       	ldd	r26, Z+2	; 0x02
    15d0:	b3 81       	ldd	r27, Z+3	; 0x03
    15d2:	a2 0f       	add	r26, r18
    15d4:	b3 1f       	adc	r27, r19
    15d6:	11 96       	adiw	r26, 0x01	; 1
    15d8:	8c 91       	ld	r24, X
    15da:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
    15de:	a2 81       	ldd	r26, Z+2	; 0x02
    15e0:	b3 81       	ldd	r27, Z+3	; 0x03
    15e2:	a2 0f       	add	r26, r18
    15e4:	b3 1f       	adc	r27, r19
    15e6:	8c 91       	ld	r24, X
    15e8:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    15ec:	95 e0       	ldi	r25, 0x05	; 5
    15ee:	96 9f       	mul	r25, r22
    15f0:	a0 01       	movw	r20, r0
    15f2:	97 9f       	mul	r25, r23
    15f4:	50 0d       	add	r21, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	a4 81       	ldd	r26, Z+4	; 0x04
    15fa:	b5 81       	ldd	r27, Z+5	; 0x05
    15fc:	a4 0f       	add	r26, r20
    15fe:	b5 1f       	adc	r27, r21
    1600:	13 96       	adiw	r26, 0x03	; 3
    1602:	8c 91       	ld	r24, X
    1604:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <__TEXT_REGION_LENGTH__+0x70061a>
    1608:	a4 81       	ldd	r26, Z+4	; 0x04
    160a:	b5 81       	ldd	r27, Z+5	; 0x05
    160c:	a4 0f       	add	r26, r20
    160e:	b5 1f       	adc	r27, r21
    1610:	14 96       	adiw	r26, 0x04	; 4
    1612:	8c 91       	ld	r24, X
    1614:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <__TEXT_REGION_LENGTH__+0x70061b>
    1618:	a4 81       	ldd	r26, Z+4	; 0x04
    161a:	b5 81       	ldd	r27, Z+5	; 0x05
    161c:	a4 0f       	add	r26, r20
    161e:	b5 1f       	adc	r27, r21
    1620:	8c 91       	ld	r24, X
    1622:	81 fd       	sbrc	r24, 1
    1624:	9c 93       	st	X, r25
    1626:	84 81       	ldd	r24, Z+4	; 0x04
    1628:	95 81       	ldd	r25, Z+5	; 0x05
    162a:	dc 01       	movw	r26, r24
    162c:	a4 0f       	add	r26, r20
    162e:	b5 1f       	adc	r27, r21
    1630:	8c 91       	ld	r24, X
    1632:	8c 71       	andi	r24, 0x1C	; 28
    1634:	69 f4       	brne	.+26     	; 0x1650 <qtm_measure_node+0x98>
    1636:	a2 81       	ldd	r26, Z+2	; 0x02
    1638:	b3 81       	ldd	r27, Z+3	; 0x03
    163a:	a2 0f       	add	r26, r18
    163c:	b3 1f       	adc	r27, r19
    163e:	14 96       	adiw	r26, 0x04	; 4
    1640:	ac 91       	ld	r26, X
    1642:	a2 95       	swap	r26
    1644:	af 70       	andi	r26, 0x0F	; 15
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	aa 59       	subi	r26, 0x9A	; 154
    164a:	b3 46       	sbci	r27, 0x63	; 99
    164c:	8c 91       	ld	r24, X
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <qtm_measure_node+0x9a>
    1650:	8f e3       	ldi	r24, 0x3F	; 63
    1652:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <__TEXT_REGION_LENGTH__+0x70061c>
    1656:	a2 81       	ldd	r26, Z+2	; 0x02
    1658:	b3 81       	ldd	r27, Z+3	; 0x03
    165a:	a2 0f       	add	r26, r18
    165c:	b3 1f       	adc	r27, r19
    165e:	12 96       	adiw	r26, 0x02	; 2
    1660:	8c 91       	ld	r24, X
    1662:	8b 31       	cpi	r24, 0x1B	; 27
    1664:	10 f4       	brcc	.+4      	; 0x166a <qtm_measure_node+0xb2>
    1666:	8c 5f       	subi	r24, 0xFC	; 252
    1668:	01 c0       	rjmp	.+2      	; 0x166c <qtm_measure_node+0xb4>
    166a:	8f e1       	ldi	r24, 0x1F	; 31
    166c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1670:	a2 81       	ldd	r26, Z+2	; 0x02
    1672:	b3 81       	ldd	r27, Z+3	; 0x03
    1674:	a2 0f       	add	r26, r18
    1676:	b3 1f       	adc	r27, r19
    1678:	15 96       	adiw	r26, 0x05	; 5
    167a:	8c 91       	ld	r24, X
    167c:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    1680:	a2 81       	ldd	r26, Z+2	; 0x02
    1682:	b3 81       	ldd	r27, Z+3	; 0x03
    1684:	a2 0f       	add	r26, r18
    1686:	b3 1f       	adc	r27, r19
    1688:	13 96       	adiw	r26, 0x03	; 3
    168a:	8c 91       	ld	r24, X
    168c:	82 95       	swap	r24
    168e:	8f 70       	andi	r24, 0x0F	; 15
    1690:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <__TEXT_REGION_LENGTH__+0x700619>
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	fc 01       	movw	r30, r24
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	83 81       	ldd	r24, Z+3	; 0x03
    16a0:	8f 70       	andi	r24, 0x0F	; 15
    16a2:	80 61       	ori	r24, 0x10	; 16
    16a4:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    16a8:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    16ac:	83 60       	ori	r24, 0x03	; 3
    16ae:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    16b2:	81 e8       	ldi	r24, 0x81	; 129
    16b4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    16be:	08 95       	ret

000016c0 <qtm_acquisition_process>:
    16c0:	3f 92       	push	r3
    16c2:	4f 92       	push	r4
    16c4:	5f 92       	push	r5
    16c6:	6f 92       	push	r6
    16c8:	7f 92       	push	r7
    16ca:	8f 92       	push	r8
    16cc:	9f 92       	push	r9
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	80 91 79 3e 	lds	r24, 0x3E79	; 0x803e79 <touch_seq_lib_state>
    16e6:	88 23       	and	r24, r24
    16e8:	09 f4       	brne	.+2      	; 0x16ec <qtm_acquisition_process+0x2c>
    16ea:	48 c1       	rjmp	.+656    	; 0x197c <qtm_acquisition_process+0x2bc>
    16ec:	a0 91 ba 3e 	lds	r26, 0x3EBA	; 0x803eba <qtm_acquisition_control_working_set_ptr>
    16f0:	b0 91 bb 3e 	lds	r27, 0x3EBB	; 0x803ebb <qtm_acquisition_control_working_set_ptr+0x1>
    16f4:	c0 90 bc 3e 	lds	r12, 0x3EBC	; 0x803ebc <qtm_raw_data_measurements_ptr>
    16f8:	d0 90 bd 3e 	lds	r13, 0x3EBD	; 0x803ebd <qtm_raw_data_measurements_ptr+0x1>
    16fc:	00 e0       	ldi	r16, 0x00	; 0
    16fe:	10 e0       	ldi	r17, 0x00	; 0
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	e1 2c       	mov	r14, r1
    1706:	f1 2c       	mov	r15, r1
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	33 24       	eor	r3, r3
    170c:	33 94       	inc	r3
    170e:	d1 e8       	ldi	r29, 0x81	; 129
    1710:	4d 2e       	mov	r4, r29
    1712:	88 24       	eor	r8, r8
    1714:	8a 94       	dec	r8
    1716:	99 24       	eor	r9, r9
    1718:	93 94       	inc	r9
    171a:	6d 90       	ld	r6, X+
    171c:	7c 90       	ld	r7, X
    171e:	11 97       	sbiw	r26, 0x01	; 1
    1720:	f3 01       	movw	r30, r6
    1722:	20 81       	ld	r18, Z
    1724:	31 81       	ldd	r19, Z+1	; 0x01
    1726:	e2 16       	cp	r14, r18
    1728:	f3 06       	cpc	r15, r19
    172a:	08 f0       	brcs	.+2      	; 0x172e <qtm_acquisition_process+0x6e>
    172c:	23 c1       	rjmp	.+582    	; 0x1974 <qtm_acquisition_process+0x2b4>
    172e:	e6 01       	movw	r28, r12
    1730:	29 91       	ld	r18, Y+
    1732:	39 91       	ld	r19, Y+
    1734:	6e 01       	movw	r12, r28
    1736:	14 96       	adiw	r26, 0x04	; 4
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	15 97       	sbiw	r26, 0x05	; 5
    173e:	e6 0f       	add	r30, r22
    1740:	f7 1f       	adc	r31, r23
    1742:	40 81       	ld	r20, Z
    1744:	4c 71       	andi	r20, 0x1C	; 28
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	56 95       	lsr	r21
    174a:	47 95       	ror	r20
    174c:	56 95       	lsr	r21
    174e:	47 95       	ror	r20
    1750:	41 15       	cp	r20, r1
    1752:	51 05       	cpc	r21, r1
    1754:	21 f0       	breq	.+8      	; 0x175e <qtm_acquisition_process+0x9e>
    1756:	41 30       	cpi	r20, 0x01	; 1
    1758:	51 05       	cpc	r21, r1
    175a:	b9 f0       	breq	.+46     	; 0x178a <qtm_acquisition_process+0xca>
    175c:	02 c1       	rjmp	.+516    	; 0x1962 <qtm_acquisition_process+0x2a2>
    175e:	12 96       	adiw	r26, 0x02	; 2
    1760:	cd 91       	ld	r28, X+
    1762:	dc 91       	ld	r29, X
    1764:	13 97       	sbiw	r26, 0x03	; 3
    1766:	c0 0f       	add	r28, r16
    1768:	d1 1f       	adc	r29, r17
    176a:	4c 81       	ldd	r20, Y+4	; 0x04
    176c:	4f 70       	andi	r20, 0x0F	; 15
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	49 17       	cp	r20, r25
    1772:	10 f4       	brcc	.+4      	; 0x1778 <qtm_acquisition_process+0xb8>
    1774:	94 1b       	sub	r25, r20
    1776:	01 c0       	rjmp	.+2      	; 0x177a <qtm_acquisition_process+0xba>
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <qtm_acquisition_process+0xc0>
    177c:	36 95       	lsr	r19
    177e:	27 95       	ror	r18
    1780:	9a 95       	dec	r25
    1782:	e2 f7       	brpl	.-8      	; 0x177c <qtm_acquisition_process+0xbc>
    1784:	21 83       	std	Z+1, r18	; 0x01
    1786:	32 83       	std	Z+2, r19	; 0x02
    1788:	ed c0       	rjmp	.+474    	; 0x1964 <qtm_acquisition_process+0x2a4>
    178a:	12 96       	adiw	r26, 0x02	; 2
    178c:	4d 91       	ld	r20, X+
    178e:	5c 91       	ld	r21, X
    1790:	13 97       	sbiw	r26, 0x03	; 3
    1792:	40 0f       	add	r20, r16
    1794:	51 1f       	adc	r21, r17
    1796:	ea 01       	movw	r28, r20
    1798:	0d 80       	ldd	r0, Y+5	; 0x05
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <qtm_acquisition_process+0xe0>
    179c:	36 95       	lsr	r19
    179e:	27 95       	ror	r18
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <qtm_acquisition_process+0xdc>
    17a4:	21 83       	std	Z+1, r18	; 0x01
    17a6:	32 83       	std	Z+2, r19	; 0x02
    17a8:	a3 80       	ldd	r10, Z+3	; 0x03
    17aa:	b4 80       	ldd	r11, Z+4	; 0x04
    17ac:	21 15       	cp	r18, r1
    17ae:	d2 e0       	ldi	r29, 0x02	; 2
    17b0:	3d 07       	cpc	r19, r29
    17b2:	20 f0       	brcs	.+8      	; 0x17bc <qtm_acquisition_process+0xfc>
    17b4:	2f 5f       	subi	r18, 0xFF	; 255
    17b6:	31 40       	sbci	r19, 0x01	; 1
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <qtm_acquisition_process+0x106>
    17bc:	a4 01       	movw	r20, r8
    17be:	42 1b       	sub	r20, r18
    17c0:	53 0b       	sbc	r21, r19
    17c2:	9a 01       	movw	r18, r20
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	e3 01       	movw	r28, r6
    17c8:	5a 80       	ldd	r5, Y+2	; 0x02
    17ca:	d0 e4       	ldi	r29, 0x40	; 64
    17cc:	5d 12       	cpse	r5, r29
    17ce:	05 c0       	rjmp	.+10     	; 0x17da <qtm_acquisition_process+0x11a>
    17d0:	36 95       	lsr	r19
    17d2:	27 95       	ror	r18
    17d4:	99 23       	and	r25, r25
    17d6:	19 f0       	breq	.+6      	; 0x17de <qtm_acquisition_process+0x11e>
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <qtm_acquisition_process+0x12c>
    17da:	99 23       	and	r25, r25
    17dc:	39 f0       	breq	.+14     	; 0x17ec <qtm_acquisition_process+0x12c>
    17de:	4f ef       	ldi	r20, 0xFF	; 255
    17e0:	a4 16       	cp	r10, r20
    17e2:	b4 06       	cpc	r11, r20
    17e4:	31 f4       	brne	.+12     	; 0x17f2 <qtm_acquisition_process+0x132>
    17e6:	40 82       	st	Z, r4
    17e8:	8e e0       	ldi	r24, 0x0E	; 14
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <qtm_acquisition_process+0x13a>
    17ec:	77 24       	eor	r7, r7
    17ee:	73 94       	inc	r7
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <qtm_acquisition_process+0x134>
    17f2:	71 2c       	mov	r7, r1
    17f4:	2a 30       	cpi	r18, 0x0A	; 10
    17f6:	31 05       	cpc	r19, r1
    17f8:	90 f4       	brcc	.+36     	; 0x181e <qtm_acquisition_process+0x15e>
    17fa:	14 96       	adiw	r26, 0x04	; 4
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	15 97       	sbiw	r26, 0x05	; 5
    1802:	e6 0f       	add	r30, r22
    1804:	f7 1f       	adc	r31, r23
    1806:	90 81       	ld	r25, Z
    1808:	97 ff       	sbrs	r25, 7
    180a:	30 82       	st	Z, r3
    180c:	14 96       	adiw	r26, 0x04	; 4
    180e:	ed 91       	ld	r30, X+
    1810:	fc 91       	ld	r31, X
    1812:	15 97       	sbiw	r26, 0x05	; 5
    1814:	e6 0f       	add	r30, r22
    1816:	f7 1f       	adc	r31, r23
    1818:	a3 82       	std	Z+3, r10	; 0x03
    181a:	b4 82       	std	Z+4, r11	; 0x04
    181c:	a3 c0       	rjmp	.+326    	; 0x1964 <qtm_acquisition_process+0x2a4>
    181e:	e5 01       	movw	r28, r10
    1820:	cd 2f       	mov	r28, r29
    1822:	dd 27       	eor	r29, r29
    1824:	c2 95       	swap	r28
    1826:	cf 70       	andi	r28, 0x0F	; 15
    1828:	9c 2f       	mov	r25, r28
    182a:	a5 01       	movw	r20, r10
    182c:	44 27       	eor	r20, r20
    182e:	5f 70       	andi	r21, 0x0F	; 15
    1830:	65 2e       	mov	r6, r21
    1832:	a5 01       	movw	r20, r10
    1834:	40 7f       	andi	r20, 0xF0	; 240
    1836:	55 27       	eor	r21, r21
    1838:	52 95       	swap	r21
    183a:	42 95       	swap	r20
    183c:	4f 70       	andi	r20, 0x0F	; 15
    183e:	45 27       	eor	r20, r21
    1840:	5f 70       	andi	r21, 0x0F	; 15
    1842:	45 27       	eor	r20, r21
    1844:	5a 2d       	mov	r21, r10
    1846:	5f 70       	andi	r21, 0x0F	; 15
    1848:	a5 2e       	mov	r10, r21
    184a:	c4 30       	cpi	r28, 0x04	; 4
    184c:	30 f0       	brcs	.+12     	; 0x185a <qtm_acquisition_process+0x19a>
    184e:	93 70       	andi	r25, 0x03	; 3
    1850:	d6 95       	lsr	r29
    1852:	c7 95       	ror	r28
    1854:	d6 95       	lsr	r29
    1856:	c7 95       	ror	r28
    1858:	9c 0f       	add	r25, r28
    185a:	71 10       	cpse	r7, r1
    185c:	3c c0       	rjmp	.+120    	; 0x18d6 <qtm_acquisition_process+0x216>
    185e:	50 e8       	ldi	r21, 0x80	; 128
    1860:	55 0d       	add	r21, r5
    1862:	52 30       	cpi	r21, 0x02	; 2
    1864:	10 f4       	brcc	.+4      	; 0x186a <qtm_acquisition_process+0x1aa>
    1866:	56 e0       	ldi	r21, 0x06	; 6
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <qtm_acquisition_process+0x1b8>
    186a:	53 e0       	ldi	r21, 0x03	; 3
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <qtm_acquisition_process+0x1b8>
    186e:	95 17       	cp	r25, r21
    1870:	68 f4       	brcc	.+26     	; 0x188c <qtm_acquisition_process+0x1cc>
    1872:	9f 5f       	subi	r25, 0xFF	; 255
    1874:	2f 5c       	subi	r18, 0xCF	; 207
    1876:	31 09       	sbc	r19, r1
    1878:	20 3d       	cpi	r18, 0xD0	; 208
    187a:	31 05       	cpc	r19, r1
    187c:	c0 f7       	brcc	.-16     	; 0x186e <qtm_acquisition_process+0x1ae>
    187e:	06 c0       	rjmp	.+12     	; 0x188c <qtm_acquisition_process+0x1cc>
    1880:	cf e0       	ldi	r28, 0x0F	; 15
    1882:	6c 16       	cp	r6, r28
    1884:	49 f0       	breq	.+18     	; 0x1898 <qtm_acquisition_process+0x1d8>
    1886:	63 94       	inc	r6
    1888:	25 51       	subi	r18, 0x15	; 21
    188a:	31 09       	sbc	r19, r1
    188c:	26 31       	cpi	r18, 0x16	; 22
    188e:	31 05       	cpc	r19, r1
    1890:	b8 f7       	brcc	.-18     	; 0x1880 <qtm_acquisition_process+0x1c0>
    1892:	df e0       	ldi	r29, 0x0F	; 15
    1894:	6d 12       	cpse	r6, r29
    1896:	0e c0       	rjmp	.+28     	; 0x18b4 <qtm_acquisition_process+0x1f4>
    1898:	95 17       	cp	r25, r21
    189a:	20 f4       	brcc	.+8      	; 0x18a4 <qtm_acquisition_process+0x1e4>
    189c:	9f 5f       	subi	r25, 0xFF	; 255
    189e:	d5 e0       	ldi	r29, 0x05	; 5
    18a0:	6d 2e       	mov	r6, r29
    18a2:	08 c0       	rjmp	.+16     	; 0x18b4 <qtm_acquisition_process+0x1f4>
    18a4:	cf e0       	ldi	r28, 0x0F	; 15
    18a6:	6c 2e       	mov	r6, r28
    18a8:	05 c0       	rjmp	.+10     	; 0x18b4 <qtm_acquisition_process+0x1f4>
    18aa:	4f 30       	cpi	r20, 0x0F	; 15
    18ac:	49 f0       	breq	.+18     	; 0x18c0 <qtm_acquisition_process+0x200>
    18ae:	4f 5f       	subi	r20, 0xFF	; 255
    18b0:	22 50       	subi	r18, 0x02	; 2
    18b2:	31 09       	sbc	r19, r1
    18b4:	23 30       	cpi	r18, 0x03	; 3
    18b6:	31 05       	cpc	r19, r1
    18b8:	c0 f7       	brcc	.-16     	; 0x18aa <qtm_acquisition_process+0x1ea>
    18ba:	4f 30       	cpi	r20, 0x0F	; 15
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <qtm_acquisition_process+0x200>
    18be:	65 c0       	rjmp	.+202    	; 0x198a <qtm_acquisition_process+0x2ca>
    18c0:	4f e0       	ldi	r20, 0x0F	; 15
    18c2:	64 16       	cp	r6, r20
    18c4:	81 f1       	breq	.+96     	; 0x1926 <qtm_acquisition_process+0x266>
    18c6:	63 94       	inc	r6
    18c8:	45 e0       	ldi	r20, 0x05	; 5
    18ca:	5f c0       	rjmp	.+190    	; 0x198a <qtm_acquisition_process+0x2ca>
    18cc:	99 23       	and	r25, r25
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <qtm_acquisition_process+0x228>
    18d0:	91 50       	subi	r25, 0x01	; 1
    18d2:	2f 5c       	subi	r18, 0xCF	; 207
    18d4:	31 09       	sbc	r19, r1
    18d6:	20 3d       	cpi	r18, 0xD0	; 208
    18d8:	31 05       	cpc	r19, r1
    18da:	c0 f7       	brcc	.-16     	; 0x18cc <qtm_acquisition_process+0x20c>
    18dc:	05 c0       	rjmp	.+10     	; 0x18e8 <qtm_acquisition_process+0x228>
    18de:	66 20       	and	r6, r6
    18e0:	41 f0       	breq	.+16     	; 0x18f2 <qtm_acquisition_process+0x232>
    18e2:	6a 94       	dec	r6
    18e4:	25 51       	subi	r18, 0x15	; 21
    18e6:	31 09       	sbc	r19, r1
    18e8:	26 31       	cpi	r18, 0x16	; 22
    18ea:	31 05       	cpc	r19, r1
    18ec:	c0 f7       	brcc	.-16     	; 0x18de <qtm_acquisition_process+0x21e>
    18ee:	61 10       	cpse	r6, r1
    18f0:	0d c0       	rjmp	.+26     	; 0x190c <qtm_acquisition_process+0x24c>
    18f2:	99 23       	and	r25, r25
    18f4:	21 f0       	breq	.+8      	; 0x18fe <qtm_acquisition_process+0x23e>
    18f6:	91 50       	subi	r25, 0x01	; 1
    18f8:	5a e0       	ldi	r21, 0x0A	; 10
    18fa:	65 2e       	mov	r6, r21
    18fc:	07 c0       	rjmp	.+14     	; 0x190c <qtm_acquisition_process+0x24c>
    18fe:	61 2c       	mov	r6, r1
    1900:	05 c0       	rjmp	.+10     	; 0x190c <qtm_acquisition_process+0x24c>
    1902:	44 23       	and	r20, r20
    1904:	41 f0       	breq	.+16     	; 0x1916 <qtm_acquisition_process+0x256>
    1906:	41 50       	subi	r20, 0x01	; 1
    1908:	22 50       	subi	r18, 0x02	; 2
    190a:	31 09       	sbc	r19, r1
    190c:	23 30       	cpi	r18, 0x03	; 3
    190e:	31 05       	cpc	r19, r1
    1910:	c0 f7       	brcc	.-16     	; 0x1902 <qtm_acquisition_process+0x242>
    1912:	41 11       	cpse	r20, r1
    1914:	10 c0       	rjmp	.+32     	; 0x1936 <qtm_acquisition_process+0x276>
    1916:	66 20       	and	r6, r6
    1918:	e9 f1       	breq	.+122    	; 0x1994 <qtm_acquisition_process+0x2d4>
    191a:	6a 94       	dec	r6
    191c:	4a e0       	ldi	r20, 0x0A	; 10
    191e:	23 30       	cpi	r18, 0x03	; 3
    1920:	31 05       	cpc	r19, r1
    1922:	c8 f6       	brcc	.-78     	; 0x18d6 <qtm_acquisition_process+0x216>
    1924:	08 c0       	rjmp	.+16     	; 0x1936 <qtm_acquisition_process+0x276>
    1926:	59 13       	cpse	r21, r25
    1928:	2f c0       	rjmp	.+94     	; 0x1988 <qtm_acquisition_process+0x2c8>
    192a:	23 30       	cpi	r18, 0x03	; 3
    192c:	31 05       	cpc	r19, r1
    192e:	40 f1       	brcs	.+80     	; 0x1980 <qtm_acquisition_process+0x2c0>
    1930:	4f e0       	ldi	r20, 0x0F	; 15
    1932:	a4 2e       	mov	r10, r20
    1934:	4f e0       	ldi	r20, 0x0F	; 15
    1936:	94 30       	cpi	r25, 0x04	; 4
    1938:	18 f0       	brcs	.+6      	; 0x1940 <qtm_acquisition_process+0x280>
    193a:	99 0f       	add	r25, r25
    193c:	99 0f       	add	r25, r25
    193e:	99 50       	subi	r25, 0x09	; 9
    1940:	c0 e1       	ldi	r28, 0x10	; 16
    1942:	4c 9f       	mul	r20, r28
    1944:	a0 01       	movw	r20, r0
    1946:	11 24       	eor	r1, r1
    1948:	56 29       	or	r21, r6
    194a:	4a 29       	or	r20, r10
    194c:	c9 2f       	mov	r28, r25
    194e:	d0 e0       	ldi	r29, 0x00	; 0
    1950:	dc 2f       	mov	r29, r28
    1952:	cc 27       	eor	r28, r28
    1954:	d2 95       	swap	r29
    1956:	d0 7f       	andi	r29, 0xF0	; 240
    1958:	4c 2b       	or	r20, r28
    195a:	5d 2b       	or	r21, r29
    195c:	43 83       	std	Z+3, r20	; 0x03
    195e:	54 83       	std	Z+4, r21	; 0x04
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <qtm_acquisition_process+0x2a4>
    1962:	ff cf       	rjmp	.-2      	; 0x1962 <qtm_acquisition_process+0x2a2>
    1964:	df ef       	ldi	r29, 0xFF	; 255
    1966:	ed 1a       	sub	r14, r29
    1968:	fd 0a       	sbc	r15, r29
    196a:	6b 5f       	subi	r22, 0xFB	; 251
    196c:	7f 4f       	sbci	r23, 0xFF	; 255
    196e:	0a 5f       	subi	r16, 0xFA	; 250
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	d3 ce       	rjmp	.-602    	; 0x171a <qtm_acquisition_process+0x5a>
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	90 93 79 3e 	sts	0x3E79, r25	; 0x803e79 <touch_seq_lib_state>
    197a:	0e c0       	rjmp	.+28     	; 0x1998 <qtm_acquisition_process+0x2d8>
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	0c c0       	rjmp	.+24     	; 0x1998 <qtm_acquisition_process+0x2d8>
    1980:	4f e0       	ldi	r20, 0x0F	; 15
    1982:	2f e0       	ldi	r18, 0x0F	; 15
    1984:	a2 2e       	mov	r10, r18
    1986:	d7 cf       	rjmp	.-82     	; 0x1936 <qtm_acquisition_process+0x276>
    1988:	4f e0       	ldi	r20, 0x0F	; 15
    198a:	23 30       	cpi	r18, 0x03	; 3
    198c:	31 05       	cpc	r19, r1
    198e:	08 f0       	brcs	.+2      	; 0x1992 <qtm_acquisition_process+0x2d2>
    1990:	73 cf       	rjmp	.-282    	; 0x1878 <qtm_acquisition_process+0x1b8>
    1992:	d1 cf       	rjmp	.-94     	; 0x1936 <qtm_acquisition_process+0x276>
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	cf cf       	rjmp	.-98     	; 0x1936 <qtm_acquisition_process+0x276>
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	df 90       	pop	r13
    19a6:	cf 90       	pop	r12
    19a8:	bf 90       	pop	r11
    19aa:	af 90       	pop	r10
    19ac:	9f 90       	pop	r9
    19ae:	8f 90       	pop	r8
    19b0:	7f 90       	pop	r7
    19b2:	6f 90       	pop	r6
    19b4:	5f 90       	pop	r5
    19b6:	4f 90       	pop	r4
    19b8:	3f 90       	pop	r3
    19ba:	08 95       	ret

000019bc <qtm_ptc_init_acquisition_module>:
    19bc:	cf 93       	push	r28
    19be:	dc 01       	movw	r26, r24
    19c0:	89 2b       	or	r24, r25
    19c2:	79 f1       	breq	.+94     	; 0x1a22 <qtm_ptc_init_acquisition_module+0x66>
    19c4:	ed 91       	ld	r30, X+
    19c6:	fc 91       	ld	r31, X
    19c8:	11 97       	sbiw	r26, 0x01	; 1
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	26 17       	cp	r18, r22
    19da:	37 07       	cpc	r19, r23
    19dc:	79 f0       	breq	.+30     	; 0x19fc <qtm_ptc_init_acquisition_module+0x40>
    19de:	12 96       	adiw	r26, 0x02	; 2
    19e0:	ed 91       	ld	r30, X+
    19e2:	fc 91       	ld	r31, X
    19e4:	13 97       	sbiw	r26, 0x03	; 3
    19e6:	e4 0f       	add	r30, r20
    19e8:	f5 1f       	adc	r31, r21
    19ea:	c0 81       	ld	r28, Z
    19ec:	81 81       	ldd	r24, Z+1	; 0x01
    19ee:	8c 2b       	or	r24, r28
    19f0:	98 2b       	or	r25, r24
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	4a 5f       	subi	r20, 0xFA	; 250
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
    19fa:	ee cf       	rjmp	.-36     	; 0x19d8 <qtm_ptc_init_acquisition_module+0x1c>
    19fc:	99 23       	and	r25, r25
    19fe:	99 f0       	breq	.+38     	; 0x1a26 <qtm_ptc_init_acquisition_module+0x6a>
    1a00:	80 91 79 3e 	lds	r24, 0x3E79	; 0x803e79 <touch_seq_lib_state>
    1a04:	81 11       	cpse	r24, r1
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <qtm_ptc_init_acquisition_module+0x58>
    1a08:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	80 93 79 3e 	sts	0x3E79, r24	; 0x803e79 <touch_seq_lib_state>
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <qtm_ptc_init_acquisition_module+0x62>
    1a14:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1a18:	98 2b       	or	r25, r24
    1a1a:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <qtm_ptc_init_acquisition_module+0x6c>
    1a22:	8b e0       	ldi	r24, 0x0B	; 11
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <qtm_ptc_init_acquisition_module+0x6c>
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <qtm_ptc_qtlib_assign_signal_memory>:
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	31 f0       	breq	.+12     	; 0x1a3c <qtm_ptc_qtlib_assign_signal_memory+0x10>
    1a30:	80 93 bc 3e 	sts	0x3EBC, r24	; 0x803ebc <qtm_raw_data_measurements_ptr>
    1a34:	90 93 bd 3e 	sts	0x3EBD, r25	; 0x803ebd <qtm_raw_data_measurements_ptr+0x1>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	08 95       	ret
    1a3c:	8b e0       	ldi	r24, 0x0B	; 11
    1a3e:	08 95       	ret

00001a40 <qtm_ptc_start_measurement_seq>:
    1a40:	61 15       	cp	r22, r1
    1a42:	71 05       	cpc	r23, r1
    1a44:	91 f1       	breq	.+100    	; 0x1aaa <qtm_ptc_start_measurement_seq+0x6a>
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	81 f1       	breq	.+96     	; 0x1aaa <qtm_ptc_start_measurement_seq+0x6a>
    1a4a:	20 91 79 3e 	lds	r18, 0x3E79	; 0x803e79 <touch_seq_lib_state>
    1a4e:	22 23       	and	r18, r18
    1a50:	71 f1       	breq	.+92     	; 0x1aae <qtm_ptc_start_measurement_seq+0x6e>
    1a52:	24 30       	cpi	r18, 0x04	; 4
    1a54:	71 f1       	breq	.+92     	; 0x1ab2 <qtm_ptc_start_measurement_seq+0x72>
    1a56:	80 93 ba 3e 	sts	0x3EBA, r24	; 0x803eba <qtm_acquisition_control_working_set_ptr>
    1a5a:	90 93 bb 3e 	sts	0x3EBB, r25	; 0x803ebb <qtm_acquisition_control_working_set_ptr+0x1>
    1a5e:	60 93 77 3e 	sts	0x3E77, r22	; 0x803e77 <ptc_seq_measure_complete_pointer>
    1a62:	70 93 78 3e 	sts	0x3E78, r23	; 0x803e78 <ptc_seq_measure_complete_pointer+0x1>
    1a66:	20 ec       	ldi	r18, 0xC0	; 192
    1a68:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	ed 91       	ld	r30, X+
    1a70:	fc 91       	ld	r31, X
    1a72:	22 81       	ldd	r18, Z+2	; 0x02
    1a74:	20 34       	cpi	r18, 0x40	; 64
    1a76:	21 f4       	brne	.+8      	; 0x1a80 <qtm_ptc_start_measurement_seq+0x40>
    1a78:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1a7c:	20 62       	ori	r18, 0x20	; 32
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <qtm_ptc_start_measurement_seq+0x4a>
    1a80:	20 38       	cpi	r18, 0x80	; 128
    1a82:	41 f4       	brne	.+16     	; 0x1a94 <qtm_ptc_start_measurement_seq+0x54>
    1a84:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1a88:	28 62       	ori	r18, 0x28	; 40
    1a8a:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1a8e:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    1a92:	13 c0       	rjmp	.+38     	; 0x1aba <qtm_ptc_start_measurement_seq+0x7a>
    1a94:	21 38       	cpi	r18, 0x81	; 129
    1a96:	79 f4       	brne	.+30     	; 0x1ab6 <qtm_ptc_start_measurement_seq+0x76>
    1a98:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1a9c:	28 62       	ori	r18, 0x28	; 40
    1a9e:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1aa2:	26 e8       	ldi	r18, 0x86	; 134
    1aa4:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    1aa8:	08 c0       	rjmp	.+16     	; 0x1aba <qtm_ptc_start_measurement_seq+0x7a>
    1aaa:	8b e0       	ldi	r24, 0x0B	; 11
    1aac:	08 95       	ret
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	08 95       	ret
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	08 95       	ret
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	08 95       	ret
    1aba:	dc 01       	movw	r26, r24
    1abc:	ed 91       	ld	r30, X+
    1abe:	fc 91       	ld	r31, X
    1ac0:	84 81       	ldd	r24, Z+4	; 0x04
    1ac2:	80 31       	cpi	r24, 0x10	; 16
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <qtm_ptc_start_measurement_seq+0x88>
    1ac6:	80 e1       	ldi	r24, 0x10	; 16
    1ac8:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
    1ad2:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    1ad6:	10 92 7a 3e 	sts	0x3E7A, r1	; 0x803e7a <current_measure_channel>
    1ada:	10 92 7b 3e 	sts	0x3E7B, r1	; 0x803e7b <current_measure_channel+0x1>
    1ade:	39 dd       	rcall	.-1422   	; 0x1552 <select_next_channel_to_measure>
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	0a c0       	rjmp	.+20     	; 0x1af8 <qtm_ptc_start_measurement_seq+0xb8>
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	80 93 79 3e 	sts	0x3E79, r24	; 0x803e79 <touch_seq_lib_state>
    1aea:	80 91 7a 3e 	lds	r24, 0x3E7A	; 0x803e7a <current_measure_channel>
    1aee:	90 91 7b 3e 	lds	r25, 0x3E7B	; 0x803e7b <current_measure_channel+0x1>
    1af2:	62 dd       	rcall	.-1340   	; 0x15b8 <qtm_measure_node>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	80 93 79 3e 	sts	0x3E79, r24	; 0x803e79 <touch_seq_lib_state>
    1afe:	08 95       	ret

00001b00 <qtm_enable_sensor_node>:
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	c9 f0       	breq	.+50     	; 0x1b36 <qtm_enable_sensor_node+0x36>
    1b04:	dc 01       	movw	r26, r24
    1b06:	ed 91       	ld	r30, X+
    1b08:	fc 91       	ld	r31, X
    1b0a:	11 97       	sbiw	r26, 0x01	; 1
    1b0c:	20 81       	ld	r18, Z
    1b0e:	31 81       	ldd	r19, Z+1	; 0x01
    1b10:	26 17       	cp	r18, r22
    1b12:	37 07       	cpc	r19, r23
    1b14:	90 f0       	brcs	.+36     	; 0x1b3a <qtm_enable_sensor_node+0x3a>
    1b16:	45 e0       	ldi	r20, 0x05	; 5
    1b18:	46 9f       	mul	r20, r22
    1b1a:	90 01       	movw	r18, r0
    1b1c:	47 9f       	mul	r20, r23
    1b1e:	30 0d       	add	r19, r0
    1b20:	11 24       	eor	r1, r1
    1b22:	14 96       	adiw	r26, 0x04	; 4
    1b24:	ed 91       	ld	r30, X+
    1b26:	fc 91       	ld	r31, X
    1b28:	15 97       	sbiw	r26, 0x05	; 5
    1b2a:	e2 0f       	add	r30, r18
    1b2c:	f3 1f       	adc	r31, r19
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	80 83       	st	Z, r24
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	08 95       	ret
    1b36:	8b e0       	ldi	r24, 0x0B	; 11
    1b38:	08 95       	ret
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	08 95       	ret

00001b3e <qtm_calibrate_sensor_node>:
    1b3e:	fc 01       	movw	r30, r24
    1b40:	89 2b       	or	r24, r25
    1b42:	d1 f1       	breq	.+116    	; 0x1bb8 <qtm_calibrate_sensor_node+0x7a>
    1b44:	a0 81       	ld	r26, Z
    1b46:	b1 81       	ldd	r27, Z+1	; 0x01
    1b48:	8d 91       	ld	r24, X+
    1b4a:	9c 91       	ld	r25, X
    1b4c:	11 97       	sbiw	r26, 0x01	; 1
    1b4e:	86 17       	cp	r24, r22
    1b50:	97 07       	cpc	r25, r23
    1b52:	a0 f1       	brcs	.+104    	; 0x1bbc <qtm_calibrate_sensor_node+0x7e>
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	9c 91       	ld	r25, X
    1b58:	04 80       	ldd	r0, Z+4	; 0x04
    1b5a:	f5 81       	ldd	r31, Z+5	; 0x05
    1b5c:	e0 2d       	mov	r30, r0
    1b5e:	90 34       	cpi	r25, 0x40	; 64
    1b60:	59 f4       	brne	.+22     	; 0x1b78 <qtm_calibrate_sensor_node+0x3a>
    1b62:	85 e0       	ldi	r24, 0x05	; 5
    1b64:	86 9f       	mul	r24, r22
    1b66:	d0 01       	movw	r26, r0
    1b68:	87 9f       	mul	r24, r23
    1b6a:	b0 0d       	add	r27, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	ae 0f       	add	r26, r30
    1b70:	bf 1f       	adc	r27, r31
    1b72:	84 e3       	ldi	r24, 0x34	; 52
    1b74:	92 e0       	ldi	r25, 0x02	; 2
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <qtm_calibrate_sensor_node+0x54>
    1b78:	90 58       	subi	r25, 0x80	; 128
    1b7a:	92 30       	cpi	r25, 0x02	; 2
    1b7c:	80 f4       	brcc	.+32     	; 0x1b9e <qtm_calibrate_sensor_node+0x60>
    1b7e:	85 e0       	ldi	r24, 0x05	; 5
    1b80:	86 9f       	mul	r24, r22
    1b82:	d0 01       	movw	r26, r0
    1b84:	87 9f       	mul	r24, r23
    1b86:	b0 0d       	add	r27, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	ae 0f       	add	r26, r30
    1b8c:	bf 1f       	adc	r27, r31
    1b8e:	87 e6       	ldi	r24, 0x67	; 103
    1b90:	95 e0       	ldi	r25, 0x05	; 5
    1b92:	13 96       	adiw	r26, 0x03	; 3
    1b94:	8d 93       	st	X+, r24
    1b96:	9c 93       	st	X, r25
    1b98:	14 97       	sbiw	r26, 0x04	; 4
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <qtm_calibrate_sensor_node+0x62>
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	95 e0       	ldi	r25, 0x05	; 5
    1ba2:	96 9f       	mul	r25, r22
    1ba4:	90 01       	movw	r18, r0
    1ba6:	97 9f       	mul	r25, r23
    1ba8:	30 0d       	add	r19, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	e2 0f       	add	r30, r18
    1bae:	f3 1f       	adc	r31, r19
    1bb0:	90 81       	ld	r25, Z
    1bb2:	92 60       	ori	r25, 0x02	; 2
    1bb4:	90 83       	st	Z, r25
    1bb6:	08 95       	ret
    1bb8:	8b e0       	ldi	r24, 0x0B	; 11
    1bba:	08 95       	ret
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	08 95       	ret

00001bc0 <qtm_t81x_ptc_handler_eoc>:
    1bc0:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    1bc4:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    1bc8:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    1bcc:	80 91 7a 3e 	lds	r24, 0x3E7A	; 0x803e7a <current_measure_channel>
    1bd0:	90 91 7b 3e 	lds	r25, 0x3E7B	; 0x803e7b <current_measure_channel+0x1>
    1bd4:	9c 01       	movw	r18, r24
    1bd6:	22 0f       	add	r18, r18
    1bd8:	33 1f       	adc	r19, r19
    1bda:	e0 91 bc 3e 	lds	r30, 0x3EBC	; 0x803ebc <qtm_raw_data_measurements_ptr>
    1bde:	f0 91 bd 3e 	lds	r31, 0x3EBD	; 0x803ebd <qtm_raw_data_measurements_ptr+0x1>
    1be2:	e2 0f       	add	r30, r18
    1be4:	f3 1f       	adc	r31, r19
    1be6:	40 83       	st	Z, r20
    1be8:	51 83       	std	Z+1, r21	; 0x01
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	80 93 7a 3e 	sts	0x3E7A, r24	; 0x803e7a <current_measure_channel>
    1bf0:	90 93 7b 3e 	sts	0x3E7B, r25	; 0x803e7b <current_measure_channel+0x1>
    1bf4:	ae dc       	rcall	.-1700   	; 0x1552 <select_next_channel_to_measure>
    1bf6:	81 11       	cpse	r24, r1
    1bf8:	08 c0       	rjmp	.+16     	; 0x1c0a <qtm_t81x_ptc_handler_eoc+0x4a>
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	80 93 79 3e 	sts	0x3E79, r24	; 0x803e79 <touch_seq_lib_state>
    1c00:	80 91 7a 3e 	lds	r24, 0x3E7A	; 0x803e7a <current_measure_channel>
    1c04:	90 91 7b 3e 	lds	r25, 0x3E7B	; 0x803e7b <current_measure_channel+0x1>
    1c08:	d7 cc       	rjmp	.-1618   	; 0x15b8 <qtm_measure_node>
    1c0a:	e0 91 77 3e 	lds	r30, 0x3E77	; 0x803e77 <ptc_seq_measure_complete_pointer>
    1c0e:	f0 91 78 3e 	lds	r31, 0x3E78	; 0x803e78 <ptc_seq_measure_complete_pointer+0x1>
    1c12:	09 94       	ijmp

00001c14 <__udivmodhi4>:
    1c14:	aa 1b       	sub	r26, r26
    1c16:	bb 1b       	sub	r27, r27
    1c18:	51 e1       	ldi	r21, 0x11	; 17
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <__udivmodhi4_ep>

00001c1c <__udivmodhi4_loop>:
    1c1c:	aa 1f       	adc	r26, r26
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	a6 17       	cp	r26, r22
    1c22:	b7 07       	cpc	r27, r23
    1c24:	10 f0       	brcs	.+4      	; 0x1c2a <__udivmodhi4_ep>
    1c26:	a6 1b       	sub	r26, r22
    1c28:	b7 0b       	sbc	r27, r23

00001c2a <__udivmodhi4_ep>:
    1c2a:	88 1f       	adc	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	5a 95       	dec	r21
    1c30:	a9 f7       	brne	.-22     	; 0x1c1c <__udivmodhi4_loop>
    1c32:	80 95       	com	r24
    1c34:	90 95       	com	r25
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	08 95       	ret

00001c3c <__divmodhi4>:
    1c3c:	97 fb       	bst	r25, 7
    1c3e:	07 2e       	mov	r0, r23
    1c40:	16 f4       	brtc	.+4      	; 0x1c46 <__divmodhi4+0xa>
    1c42:	00 94       	com	r0
    1c44:	06 d0       	rcall	.+12     	; 0x1c52 <__divmodhi4_neg1>
    1c46:	77 fd       	sbrc	r23, 7
    1c48:	08 d0       	rcall	.+16     	; 0x1c5a <__divmodhi4_neg2>
    1c4a:	e4 df       	rcall	.-56     	; 0x1c14 <__udivmodhi4>
    1c4c:	07 fc       	sbrc	r0, 7
    1c4e:	05 d0       	rcall	.+10     	; 0x1c5a <__divmodhi4_neg2>
    1c50:	3e f4       	brtc	.+14     	; 0x1c60 <__divmodhi4_exit>

00001c52 <__divmodhi4_neg1>:
    1c52:	90 95       	com	r25
    1c54:	81 95       	neg	r24
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	08 95       	ret

00001c5a <__divmodhi4_neg2>:
    1c5a:	70 95       	com	r23
    1c5c:	61 95       	neg	r22
    1c5e:	7f 4f       	sbci	r23, 0xFF	; 255

00001c60 <__divmodhi4_exit>:
    1c60:	08 95       	ret

00001c62 <_exit>:
    1c62:	f8 94       	cli

00001c64 <__stop_program>:
    1c64:	ff cf       	rjmp	.-2      	; 0x1c64 <__stop_program>
