
Attiny814Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00803e00  00001b82  00001c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b7c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000006  00009b7c  00001b7c  00001c30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000056  00803e52  00803e52  00001c88  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  00001cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005a08  00000000  00000000  00001fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024ab  00000000  00000000  000079f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a17  00000000  00000000  00009e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000544  00000000  00000000  0000b8b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002bc5  00000000  00000000  0000bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f10  00000000  00000000  0000e9bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000218  00000000  00000000  0000f8cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	4f c0       	rjmp	.+158    	; 0xc0 <__vector_16>
      22:	bb c3       	rjmp	.+1910   	; 0x79a <__vector_17>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e2 e8       	ldi	r30, 0x82	; 130
      48:	fb e1       	ldi	r31, 0x1B	; 27
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a2 35       	cpi	r26, 0x52	; 82
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a2 e5       	ldi	r26, 0x52	; 82
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a8 3a       	cpi	r26, 0xA8	; 168
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	3e d1       	rcall	.+636    	; 0x2e4 <main>
      68:	87 cd       	rjmp	.-1266   	; 0xfffffb78 <__eeprom_end+0xff7efb78>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	fa d3       	rcall	.+2036   	; 0x862 <system_init>

	touch_init();
      6e:	d1 d2       	rcall	.+1442   	; 0x612 <touch_init>
      70:	08 95       	ret

00000072 <__vector_6>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_CNT_vect)
{
      72:	1f 92       	push	r1
      74:	0f 92       	push	r0
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	0f 92       	push	r0
      7a:	11 24       	eor	r1, r1
      7c:	2f 93       	push	r18
      7e:	3f 93       	push	r19
      80:	4f 93       	push	r20
      82:	5f 93       	push	r21
      84:	6f 93       	push	r22
      86:	7f 93       	push	r23
      88:	8f 93       	push	r24
      8a:	9f 93       	push	r25
      8c:	af 93       	push	r26
      8e:	bf 93       	push	r27
      90:	ef 93       	push	r30
      92:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      94:	37 d3       	rcall	.+1646   	; 0x704 <touch_timer_handler>
	RTC_CallBack();
      96:	8f d0       	rcall	.+286    	; 0x1b6 <RTC_CallBack>
	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
      98:	82 e0       	ldi	r24, 0x02	; 2
      9a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
      9e:	ff 91       	pop	r31
      a0:	ef 91       	pop	r30
      a2:	bf 91       	pop	r27
      a4:	af 91       	pop	r26
      a6:	9f 91       	pop	r25
      a8:	8f 91       	pop	r24
      aa:	7f 91       	pop	r23
      ac:	6f 91       	pop	r22
      ae:	5f 91       	pop	r21
      b0:	4f 91       	pop	r20
      b2:	3f 91       	pop	r19
      b4:	2f 91       	pop	r18
      b6:	0f 90       	pop	r0
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	0f 90       	pop	r0
      bc:	1f 90       	pop	r1
      be:	18 95       	reti

000000c0 <__vector_16>:

ISR(AC0_AC_vect)
{
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	2f 93       	push	r18
      cc:	3f 93       	push	r19
      ce:	4f 93       	push	r20
      d0:	5f 93       	push	r21
      d2:	6f 93       	push	r22
      d4:	7f 93       	push	r23
      d6:	8f 93       	push	r24
      d8:	9f 93       	push	r25
      da:	af 93       	push	r26
      dc:	bf 93       	push	r27
      de:	ef 93       	push	r30
      e0:	ff 93       	push	r31
	/* Insert your AC interrupt handling code here */
	/* The interrupt flag has to be cleared manually */
	AC0.STATUS = AC_CMP_bm;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <__TEXT_REGION_LENGTH__+0x700677>
	LowBattery();
      e8:	57 d0       	rcall	.+174    	; 0x198 <LowBattery>
}
      ea:	ff 91       	pop	r31
      ec:	ef 91       	pop	r30
      ee:	bf 91       	pop	r27
      f0:	af 91       	pop	r26
      f2:	9f 91       	pop	r25
      f4:	8f 91       	pop	r24
      f6:	7f 91       	pop	r23
      f8:	6f 91       	pop	r22
      fa:	5f 91       	pop	r21
      fc:	4f 91       	pop	r20
      fe:	3f 91       	pop	r19
     100:	2f 91       	pop	r18
     102:	0f 90       	pop	r0
     104:	0f be       	out	0x3f, r0	; 63
     106:	0f 90       	pop	r0
     108:	1f 90       	pop	r1
     10a:	18 95       	reti

0000010c <Radiotube_Handle>:
int16_t preDebugFilteredDeltaValue = 0;
int16_t debugFilteredDeltaValue = 0;

void Radiotube_Handle(void)
{
	if (RadiotubeState == OFF)
     10c:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <RadiotubeState>
     110:	81 30       	cpi	r24, 0x01	; 1
     112:	d1 f4       	brne	.+52     	; 0x148 <Radiotube_Handle+0x3c>
	{
		RadiotubeState = ON;
     114:	10 92 70 3e 	sts	0x3E70, r1	; 0x803e70 <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     118:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     11a:	2f e5       	ldi	r18, 0x5F	; 95
     11c:	3a ee       	ldi	r19, 0xEA	; 234
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	21 50       	subi	r18, 0x01	; 1
     122:	30 40       	sbci	r19, 0x00	; 0
     124:	80 40       	sbci	r24, 0x00	; 0
     126:	e1 f7       	brne	.-8      	; 0x120 <Radiotube_Handle+0x14>
     128:	00 c0       	rjmp	.+0      	; 0x12a <Radiotube_Handle+0x1e>
     12a:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     12c:	28 98       	cbi	0x05, 0	; 5
     12e:	e7 ea       	ldi	r30, 0xA7	; 167
     130:	f1 e6       	ldi	r31, 0x61	; 97
     132:	31 97       	sbiw	r30, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <Radiotube_Handle+0x26>
     136:	00 c0       	rjmp	.+0      	; 0x138 <Radiotube_Handle+0x2c>
     138:	00 00       	nop
		IO1_set_level(true);
		_delay_ms(30);
		IO1_set_level(false);
		_delay_ms(10);
		measeurePeriod = 16;
     13a:	80 e1       	ldi	r24, 0x10	; 16
     13c:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__data_start>
		edgeDetectFreeze = 1;
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <edgeDetectFreeze>
     146:	08 95       	ret
	}
	else
	{
		RadiotubeState = OFF;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	80 93 70 3e 	sts	0x3E70, r24	; 0x803e70 <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     14e:	29 9a       	sbi	0x05, 1	; 5
     150:	ff e5       	ldi	r31, 0x5F	; 95
     152:	2a ee       	ldi	r18, 0xEA	; 234
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	f1 50       	subi	r31, 0x01	; 1
     158:	20 40       	sbci	r18, 0x00	; 0
     15a:	30 40       	sbci	r19, 0x00	; 0
     15c:	e1 f7       	brne	.-8      	; 0x156 <Radiotube_Handle+0x4a>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <Radiotube_Handle+0x54>
     160:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     162:	29 98       	cbi	0x05, 1	; 5
     164:	e7 ea       	ldi	r30, 0xA7	; 167
     166:	f1 e6       	ldi	r31, 0x61	; 97
     168:	31 97       	sbiw	r30, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <Radiotube_Handle+0x5c>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <Radiotube_Handle+0x62>
     16e:	00 00       	nop
		IO2_set_level(true);
		_delay_ms(30);
		IO2_set_level(false);
		_delay_ms(10);
		measeurePeriod = 32;
     170:	90 e2       	ldi	r25, 0x20	; 32
     172:	90 93 00 3e 	sts	0x3E00, r25	; 0x803e00 <__data_start>
		edgeDetectFreeze = 1;
     176:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <edgeDetectFreeze>
     17a:	08 95       	ret

0000017c <MCU_GoToSleep>:
}

void MCU_GoToSleep(int mode)
{
	// Set sleep mode to Power Down mode
	set_sleep_mode(mode);
     17c:	e0 e5       	ldi	r30, 0x50	; 80
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	90 81       	ld	r25, Z
     182:	99 7f       	andi	r25, 0xF9	; 249
     184:	89 2b       	or	r24, r25
     186:	80 83       	st	Z, r24
	sleep_enable();
     188:	80 81       	ld	r24, Z
     18a:	81 60       	ori	r24, 0x01	; 1
     18c:	80 83       	st	Z, r24
	sleep_cpu();
     18e:	88 95       	sleep
	sleep_disable();
     190:	80 81       	ld	r24, Z
     192:	8e 7f       	andi	r24, 0xFE	; 254
     194:	80 83       	st	Z, r24
     196:	08 95       	ret

00000198 <LowBattery>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     198:	28 9a       	sbi	0x05, 0	; 5
     19a:	2f e5       	ldi	r18, 0x5F	; 95
     19c:	8a ee       	ldi	r24, 0xEA	; 234
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	21 50       	subi	r18, 0x01	; 1
     1a2:	80 40       	sbci	r24, 0x00	; 0
     1a4:	90 40       	sbci	r25, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <LowBattery+0x8>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LowBattery+0x12>
     1aa:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     1ac:	28 98       	cbi	0x05, 0	; 5
void LowBattery(void)
{
	IO1_set_level(true);
	_delay_ms(30);
	IO1_set_level(false);
	MCU_GoToSleep(SLEEP_MODE_PWR_DOWN);
     1ae:	84 e0       	ldi	r24, 0x04	; 4
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	e4 df       	rcall	.-56     	; 0x17c <MCU_GoToSleep>
     1b4:	08 95       	ret

000001b6 <RTC_CallBack>:


void RTC_CallBack(void)
{
	/* count the time when the  finger on */
	if (SensorState == FINGER_OFF_DETECT)
     1b6:	80 91 71 3e 	lds	r24, 0x3E71	; 0x803e71 <SensorState>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	49 f4       	brne	.+18     	; 0x1d0 <RTC_CallBack+0x1a>
		fingerOnCnt++;
     1be:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <fingerOnCnt>
     1c2:	90 91 62 3e 	lds	r25, 0x3E62	; 0x803e62 <fingerOnCnt+0x1>
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <fingerOnCnt>
     1cc:	90 93 62 3e 	sts	0x3E62, r25	; 0x803e62 <fingerOnCnt+0x1>
	
	/* freeze the edge detection for 500 ms after open the radiotube */
	if(edgeDetectFreeze == 1)
     1d0:	80 91 5c 3e 	lds	r24, 0x3E5C	; 0x803e5c <edgeDetectFreeze>
     1d4:	81 30       	cpi	r24, 0x01	; 1
     1d6:	49 f4       	brne	.+18     	; 0x1ea <RTC_CallBack+0x34>
		edgeFreezeCnt++;
     1d8:	80 91 5a 3e 	lds	r24, 0x3E5A	; 0x803e5a <edgeFreezeCnt>
     1dc:	90 91 5b 3e 	lds	r25, 0x3E5B	; 0x803e5b <edgeFreezeCnt+0x1>
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	80 93 5a 3e 	sts	0x3E5A, r24	; 0x803e5a <edgeFreezeCnt>
     1e6:	90 93 5b 3e 	sts	0x3E5B, r25	; 0x803e5b <edgeFreezeCnt+0x1>

	if (edgeFreezeCnt > 500)
     1ea:	80 91 5a 3e 	lds	r24, 0x3E5A	; 0x803e5a <edgeFreezeCnt>
     1ee:	90 91 5b 3e 	lds	r25, 0x3E5B	; 0x803e5b <edgeFreezeCnt+0x1>
     1f2:	85 3f       	cpi	r24, 0xF5	; 245
     1f4:	91 40       	sbci	r25, 0x01	; 1
     1f6:	30 f0       	brcs	.+12     	; 0x204 <RTC_CallBack+0x4e>
	{
		edgeFreezeCnt = 0;
     1f8:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <edgeFreezeCnt>
     1fc:	10 92 5b 3e 	sts	0x3E5B, r1	; 0x803e5b <edgeFreezeCnt+0x1>
		edgeDetectFreeze = 0;
     200:	10 92 5c 3e 	sts	0x3E5C, r1	; 0x803e5c <edgeDetectFreeze>
	}
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
     204:	80 91 70 3e 	lds	r24, 0x3E70	; 0x803e70 <RadiotubeState>
     208:	81 11       	cpse	r24, r1
     20a:	24 c0       	rjmp	.+72     	; 0x254 <RTC_CallBack+0x9e>
	{
		RadiotubeOnTime++;
     20c:	80 91 5d 3e 	lds	r24, 0x3E5D	; 0x803e5d <RadiotubeOnTime>
     210:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <RadiotubeOnTime+0x1>
     214:	a0 91 5f 3e 	lds	r26, 0x3E5F	; 0x803e5f <RadiotubeOnTime+0x2>
     218:	b0 91 60 3e 	lds	r27, 0x3E60	; 0x803e60 <RadiotubeOnTime+0x3>
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	a1 1d       	adc	r26, r1
     220:	b1 1d       	adc	r27, r1
		if(RadiotubeOnTime > 180000)
     222:	81 32       	cpi	r24, 0x21	; 33
     224:	2f eb       	ldi	r18, 0xBF	; 191
     226:	92 07       	cpc	r25, r18
     228:	22 e0       	ldi	r18, 0x02	; 2
     22a:	a2 07       	cpc	r26, r18
     22c:	b1 05       	cpc	r27, r1
     22e:	48 f4       	brcc	.+18     	; 0x242 <RTC_CallBack+0x8c>
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
	{
		RadiotubeOnTime++;
     230:	80 93 5d 3e 	sts	0x3E5D, r24	; 0x803e5d <RadiotubeOnTime>
     234:	90 93 5e 3e 	sts	0x3E5E, r25	; 0x803e5e <RadiotubeOnTime+0x1>
     238:	a0 93 5f 3e 	sts	0x3E5F, r26	; 0x803e5f <RadiotubeOnTime+0x2>
     23c:	b0 93 60 3e 	sts	0x3E60, r27	; 0x803e60 <RadiotubeOnTime+0x3>
     240:	08 95       	ret
		if(RadiotubeOnTime > 180000)
		{
			RadiotubeOnTime = 0;
     242:	10 92 5d 3e 	sts	0x3E5D, r1	; 0x803e5d <RadiotubeOnTime>
     246:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <RadiotubeOnTime+0x1>
     24a:	10 92 5f 3e 	sts	0x3E5F, r1	; 0x803e5f <RadiotubeOnTime+0x2>
     24e:	10 92 60 3e 	sts	0x3E60, r1	; 0x803e60 <RadiotubeOnTime+0x3>
			Radiotube_Handle();
     252:	5c df       	rcall	.-328    	; 0x10c <Radiotube_Handle>
     254:	08 95       	ret

00000256 <TOUCH_DeltaSmoothing>:

int16_t TOUCH_DeltaSmoothing(int16_t curDelta)
{
	uint16_t temp;
	
	preDebugFilteredDeltaValue = debugFilteredDeltaValue;
     256:	20 91 52 3e 	lds	r18, 0x3E52	; 0x803e52 <__data_end>
     25a:	30 91 53 3e 	lds	r19, 0x3E53	; 0x803e53 <__data_end+0x1>
     25e:	20 93 54 3e 	sts	0x3E54, r18	; 0x803e54 <preDebugFilteredDeltaValue>
     262:	30 93 55 3e 	sts	0x3E55, r19	; 0x803e55 <preDebugFilteredDeltaValue+0x1>
	
	if (abs(curDelta - debugFilteredDeltaValue) > FILTER_THRESDHOLD)
     266:	bc 01       	movw	r22, r24
     268:	62 1b       	sub	r22, r18
     26a:	73 0b       	sbc	r23, r19
     26c:	ab 01       	movw	r20, r22
     26e:	22 f4       	brpl	.+8      	; 0x278 <TOUCH_DeltaSmoothing+0x22>
     270:	44 27       	eor	r20, r20
     272:	55 27       	eor	r21, r21
     274:	46 1b       	sub	r20, r22
     276:	57 0b       	sbc	r21, r23
     278:	45 31       	cpi	r20, 0x15	; 21
     27a:	51 05       	cpc	r21, r1
     27c:	9c f0       	brlt	.+38     	; 0x2a4 <TOUCH_DeltaSmoothing+0x4e>
		debugFilteredDeltaValue = (debugFilteredDeltaValue * 1 + curDelta * 9)/10;
     27e:	ac 01       	movw	r20, r24
     280:	44 0f       	add	r20, r20
     282:	55 1f       	adc	r21, r21
     284:	44 0f       	add	r20, r20
     286:	55 1f       	adc	r21, r21
     288:	44 0f       	add	r20, r20
     28a:	55 1f       	adc	r21, r21
     28c:	84 0f       	add	r24, r20
     28e:	95 1f       	adc	r25, r21
     290:	82 0f       	add	r24, r18
     292:	93 1f       	adc	r25, r19
     294:	6a e0       	ldi	r22, 0x0A	; 10
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	48 dc       	rcall	.-1904   	; 0xfffffb2a <__eeprom_end+0xff7efb2a>
     29a:	60 93 52 3e 	sts	0x3E52, r22	; 0x803e52 <__data_end>
     29e:	70 93 53 3e 	sts	0x3E53, r23	; 0x803e53 <__data_end+0x1>
     2a2:	12 c0       	rjmp	.+36     	; 0x2c8 <TOUCH_DeltaSmoothing+0x72>
	else
		debugFilteredDeltaValue = (debugFilteredDeltaValue * 9 + curDelta)/10;
     2a4:	a9 01       	movw	r20, r18
     2a6:	44 0f       	add	r20, r20
     2a8:	55 1f       	adc	r21, r21
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	44 0f       	add	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	42 0f       	add	r20, r18
     2b4:	53 1f       	adc	r21, r19
     2b6:	84 0f       	add	r24, r20
     2b8:	95 1f       	adc	r25, r21
     2ba:	6a e0       	ldi	r22, 0x0A	; 10
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	35 dc       	rcall	.-1942   	; 0xfffffb2a <__eeprom_end+0xff7efb2a>
     2c0:	60 93 52 3e 	sts	0x3E52, r22	; 0x803e52 <__data_end>
     2c4:	70 93 53 3e 	sts	0x3E53, r23	; 0x803e53 <__data_end+0x1>
		
	temp = debugFilteredDeltaValue - preDebugFilteredDeltaValue;
     2c8:	80 91 52 3e 	lds	r24, 0x3E52	; 0x803e52 <__data_end>
     2cc:	90 91 53 3e 	lds	r25, 0x3E53	; 0x803e53 <__data_end+0x1>
	//temp = debugFilteredDeltaValue;
	
	if (edgeDetectFreeze == 1)
     2d0:	40 91 5c 3e 	lds	r20, 0x3E5C	; 0x803e5c <edgeDetectFreeze>
     2d4:	41 30       	cpi	r20, 0x01	; 1
     2d6:	19 f0       	breq	.+6      	; 0x2de <TOUCH_DeltaSmoothing+0x88>
	if (abs(curDelta - debugFilteredDeltaValue) > FILTER_THRESDHOLD)
		debugFilteredDeltaValue = (debugFilteredDeltaValue * 1 + curDelta * 9)/10;
	else
		debugFilteredDeltaValue = (debugFilteredDeltaValue * 9 + curDelta)/10;
		
	temp = debugFilteredDeltaValue - preDebugFilteredDeltaValue;
     2d8:	82 1b       	sub	r24, r18
     2da:	93 0b       	sbc	r25, r19
     2dc:	08 95       	ret
	//temp = debugFilteredDeltaValue;
	
	if (edgeDetectFreeze == 1)
		temp = 0;
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
		
	return temp;
}
     2e2:	08 95       	ret

000002e4 <main>:

int main(void)
{
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     2e4:	c3 de       	rcall	.-634    	; 0x6c <atmel_start_init>
	
	SensorState = FINGER_ON_DETECT;
     2e6:	10 92 71 3e 	sts	0x3E71, r1	; 0x803e71 <SensorState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     2ea:	29 9a       	sbi	0x05, 1	; 5
     2ec:	2f e5       	ldi	r18, 0x5F	; 95
     2ee:	3a ee       	ldi	r19, 0xEA	; 234
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	21 50       	subi	r18, 0x01	; 1
     2f4:	30 40       	sbci	r19, 0x00	; 0
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0xe>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x18>
     2fc:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2fe:	29 98       	cbi	0x05, 1	; 5
	/* the inital state of radiotube should be chosed */
	IO2_set_level(true);
	_delay_ms(30);
	IO2_set_level(false);
	
	RadiotubeState = OFF;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 70 3e 	sts	0x3E70, r24	; 0x803e70 <RadiotubeState>

	switch(SensorState)
	{
		case FINGER_ON_DETECT:
			if (edgeStatus == 1)
				SensorState = FINGER_OFF_DETECT;
     306:	ff 24       	eor	r15, r15
     308:	f3 94       	inc	r15
	preFilteredDeltaValue = filteredDeltaValue;
	
	if (tempDelta > FILTER_THRESDHOLD)
		filteredDeltaValue = (filteredDeltaValue * 1 + curDelta * 9)/10;
	else
		filteredDeltaValue = (filteredDeltaValue * 9 + curDelta)/10;
     30a:	0a e0       	ldi	r16, 0x0A	; 10
     30c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t keyStatus = 0;
	uint8_t edgeStatus = 0;
	
	
	///* Does acquisition and post-processing */
	touch_process();
     30e:	c2 d1       	rcall	.+900    	; 0x694 <touch_process>
	
	
	if (measurement_done_touch == 0)
     310:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <measurement_done_touch>
     314:	88 23       	and	r24, r24
     316:	09 f4       	brne	.+2      	; 0x31a <main+0x36>
     318:	9f c0       	rjmp	.+318    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		return keyStatus;
		
	measurement_done_touch = 0;
     31a:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <measurement_done_touch>
{
	int16_t curDelta;
	int16_t tempDelta;
	uint8_t edgeStatus = 0;
	
	curDelta = get_sensor_node_signal(0);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	05 d2       	rcall	.+1034   	; 0x72e <get_sensor_node_signal>
     324:	ec 01       	movw	r28, r24
	curDelta -= get_sensor_node_reference(0);
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e d2       	rcall	.+1052   	; 0x748 <get_sensor_node_reference>
     32c:	9e 01       	movw	r18, r28
     32e:	28 1b       	sub	r18, r24
     330:	39 0b       	sbc	r19, r25
     332:	c9 01       	movw	r24, r18
	
	tempDelta = abs(curDelta - filteredDeltaValue);
     334:	20 91 58 3e 	lds	r18, 0x3E58	; 0x803e58 <filteredDeltaValue>
     338:	30 91 59 3e 	lds	r19, 0x3E59	; 0x803e59 <filteredDeltaValue+0x1>
	
	preFilteredDeltaValue = filteredDeltaValue;
     33c:	20 93 56 3e 	sts	0x3E56, r18	; 0x803e56 <preFilteredDeltaValue>
     340:	30 93 57 3e 	sts	0x3E57, r19	; 0x803e57 <preFilteredDeltaValue+0x1>
	
	if (tempDelta > FILTER_THRESDHOLD)
     344:	bc 01       	movw	r22, r24
     346:	62 1b       	sub	r22, r18
     348:	73 0b       	sbc	r23, r19
     34a:	ab 01       	movw	r20, r22
     34c:	22 f4       	brpl	.+8      	; 0x356 <main+0x72>
     34e:	44 27       	eor	r20, r20
     350:	55 27       	eor	r21, r21
     352:	46 1b       	sub	r20, r22
     354:	57 0b       	sbc	r21, r23
     356:	45 31       	cpi	r20, 0x15	; 21
     358:	51 05       	cpc	r21, r1
     35a:	94 f0       	brlt	.+36     	; 0x380 <main+0x9c>
		filteredDeltaValue = (filteredDeltaValue * 1 + curDelta * 9)/10;
     35c:	ac 01       	movw	r20, r24
     35e:	44 0f       	add	r20, r20
     360:	55 1f       	adc	r21, r21
     362:	44 0f       	add	r20, r20
     364:	55 1f       	adc	r21, r21
     366:	44 0f       	add	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	84 0f       	add	r24, r20
     36c:	95 1f       	adc	r25, r21
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	b8 01       	movw	r22, r16
     374:	da db       	rcall	.-2124   	; 0xfffffb2a <__eeprom_end+0xff7efb2a>
     376:	60 93 58 3e 	sts	0x3E58, r22	; 0x803e58 <filteredDeltaValue>
     37a:	70 93 59 3e 	sts	0x3E59, r23	; 0x803e59 <filteredDeltaValue+0x1>
     37e:	11 c0       	rjmp	.+34     	; 0x3a2 <main+0xbe>
	else
		filteredDeltaValue = (filteredDeltaValue * 9 + curDelta)/10;
     380:	a9 01       	movw	r20, r18
     382:	44 0f       	add	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	44 0f       	add	r20, r20
     388:	55 1f       	adc	r21, r21
     38a:	44 0f       	add	r20, r20
     38c:	55 1f       	adc	r21, r21
     38e:	42 0f       	add	r20, r18
     390:	53 1f       	adc	r21, r19
     392:	84 0f       	add	r24, r20
     394:	95 1f       	adc	r25, r21
     396:	b8 01       	movw	r22, r16
     398:	c8 db       	rcall	.-2160   	; 0xfffffb2a <__eeprom_end+0xff7efb2a>
     39a:	60 93 58 3e 	sts	0x3E58, r22	; 0x803e58 <filteredDeltaValue>
     39e:	70 93 59 3e 	sts	0x3E59, r23	; 0x803e59 <filteredDeltaValue+0x1>
	
	tempDelta = abs(filteredDeltaValue - preFilteredDeltaValue);
     3a2:	40 91 58 3e 	lds	r20, 0x3E58	; 0x803e58 <filteredDeltaValue>
     3a6:	50 91 59 3e 	lds	r21, 0x3E59	; 0x803e59 <filteredDeltaValue+0x1>
     3aa:	ba 01       	movw	r22, r20
     3ac:	62 1b       	sub	r22, r18
     3ae:	73 0b       	sbc	r23, r19
     3b0:	cb 01       	movw	r24, r22
     3b2:	99 23       	and	r25, r25
     3b4:	24 f4       	brge	.+8      	; 0x3be <main+0xda>
     3b6:	88 27       	eor	r24, r24
     3b8:	99 27       	eor	r25, r25
     3ba:	86 1b       	sub	r24, r22
     3bc:	97 0b       	sbc	r25, r23
	
	if(filteredDeltaValue > preFilteredDeltaValue)
     3be:	24 17       	cp	r18, r20
     3c0:	35 07       	cpc	r19, r21
     3c2:	2c f4       	brge	.+10     	; 0x3ce <main+0xea>

static uint8_t TOUCH_DeltaEdgeDetct(void)
{
	int16_t curDelta;
	int16_t tempDelta;
	uint8_t edgeStatus = 0;
     3c4:	2f 2d       	mov	r18, r15
     3c6:	4f 97       	sbiw	r24, 0x1f	; 31
     3c8:	64 f4       	brge	.+24     	; 0x3e2 <main+0xfe>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <main+0xfe>
	if(filteredDeltaValue > preFilteredDeltaValue)
	{
		if (tempDelta > EDGE_THRESDHOLD)
			edgeStatus = 1;
	}
	else if(filteredDeltaValue < preFilteredDeltaValue)
     3ce:	42 17       	cp	r20, r18
     3d0:	53 07       	cpc	r21, r19
     3d2:	24 f4       	brge	.+8      	; 0x3dc <main+0xf8>
	{
		if (tempDelta > EDGE_THRESDHOLD)
     3d4:	4f 97       	sbiw	r24, 0x1f	; 31
     3d6:	24 f0       	brlt	.+8      	; 0x3e0 <main+0xfc>
			edgeStatus = 2;
     3d8:	22 e0       	ldi	r18, 0x02	; 2
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <main+0xfe>

static uint8_t TOUCH_DeltaEdgeDetct(void)
{
	int16_t curDelta;
	int16_t tempDelta;
	uint8_t edgeStatus = 0;
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <main+0xfe>
     3e0:	20 e0       	ldi	r18, 0x00	; 0
	
	
		
	edgeStatus = TOUCH_DeltaEdgeDetct();
	
	if (edgeDetectFreeze == 1)
     3e2:	80 91 5c 3e 	lds	r24, 0x3E5C	; 0x803e5c <edgeDetectFreeze>
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	b9 f1       	breq	.+110    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		return keyStatus;

	switch(SensorState)
     3ea:	80 91 71 3e 	lds	r24, 0x3E71	; 0x803e71 <SensorState>
     3ee:	88 23       	and	r24, r24
     3f0:	19 f0       	breq	.+6      	; 0x3f8 <main+0x114>
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	31 f0       	breq	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f6:	2c c0       	rjmp	.+88     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	{
		case FINGER_ON_DETECT:
			if (edgeStatus == 1)
     3f8:	21 30       	cpi	r18, 0x01	; 1
     3fa:	71 f5       	brne	.+92     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				SensorState = FINGER_OFF_DETECT;
     3fc:	f0 92 71 3e 	sts	0x3E71, r15	; 0x803e71 <SensorState>
     400:	2b c0       	rjmp	.+86     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		break;
		
		case FINGER_OFF_DETECT:
			if(edgeStatus == 2)
     402:	22 30       	cpi	r18, 0x02	; 2
     404:	81 f4       	brne	.+32     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			{
				if(fingerOnCnt > FINGER_ON_MINIMUM_TIME_MS)
     406:	20 91 61 3e 	lds	r18, 0x3E61	; 0x803e61 <fingerOnCnt>
     40a:	30 91 62 3e 	lds	r19, 0x3E62	; 0x803e62 <fingerOnCnt+0x1>
	return edgeStatus;
}

static uint8_t TOUCH_TouchDetect(void)
{
	uint8_t keyStatus = 0;
     40e:	8f 2d       	mov	r24, r15
     410:	27 34       	cpi	r18, 0x47	; 71
     412:	31 05       	cpc	r19, r1
     414:	08 f4       	brcc	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	80 e0       	ldi	r24, 0x00	; 0
			if(edgeStatus == 2)
			{
				if(fingerOnCnt > FINGER_ON_MINIMUM_TIME_MS)
					keyStatus = 1;
					
				fingerOnCnt = 0;
     418:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <fingerOnCnt>
     41c:	10 92 62 3e 	sts	0x3E62, r1	; 0x803e62 <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     420:	10 92 71 3e 	sts	0x3E71, r1	; 0x803e71 <SensorState>
     424:	16 c0       	rjmp	.+44     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			}
			else if(edgeStatus == 1)
     426:	21 30       	cpi	r18, 0x01	; 1
     428:	29 f4       	brne	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				fingerOnCnt = 0;
     42a:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <fingerOnCnt>
     42e:	10 92 62 3e 	sts	0x3E62, r1	; 0x803e62 <fingerOnCnt+0x1>
     432:	12 c0       	rjmp	.+36     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			else if (fingerOnCnt > FINGER_ON_MAXIMUM_TIME_MS)
     434:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <fingerOnCnt>
     438:	90 91 62 3e 	lds	r25, 0x3E62	; 0x803e62 <fingerOnCnt+0x1>
     43c:	89 3e       	cpi	r24, 0xE9	; 233
     43e:	93 40       	sbci	r25, 0x03	; 3
     440:	58 f0       	brcs	.+22     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			{
				fingerOnCnt = 0;
     442:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <fingerOnCnt>
     446:	10 92 62 3e 	sts	0x3E62, r1	; 0x803e62 <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     44a:	10 92 71 3e 	sts	0x3E71, r1	; 0x803e71 <SensorState>
     44e:	04 c0       	rjmp	.+8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	return edgeStatus;
}

static uint8_t TOUCH_TouchDetect(void)
{
	uint8_t keyStatus = 0;
     450:	80 e0       	ldi	r24, 0x00	; 0
	/* Replace with your application code */
	while(1) 
	{
		//wdt_reset();
		
		if(TOUCH_TouchDetect() == 1)
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	09 f4       	brne	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			Radiotube_Handle();
     456:	5a de       	rcall	.-844    	; 0x10c <Radiotube_Handle>
	
		//MCU_GoToSleep(SLEEP_MODE_STANDBY);
		MCU_GoToSleep(SLEEP_MODE_IDLE);
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	8f de       	rcall	.-738    	; 0x17c <MCU_GoToSleep>
	}
     45e:	57 cf       	rjmp	.-338    	; 0x30e <main+0x2a>

00000460 <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     460:	08 95       	ret

00000462 <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     462:	cf 93       	push	r28
     464:	c8 2f       	mov	r28, r24
	while (!USART_is_tx_ready())
     466:	4a d2       	rcall	.+1172   	; 0x8fc <USART_is_tx_ready>
     468:	88 23       	and	r24, r24
     46a:	e9 f3       	breq	.-6      	; 0x466 <datastreamer_transmit+0x4>
		;

	USART_write(data_byte);
     46c:	8c 2f       	mov	r24, r28
     46e:	54 d2       	rcall	.+1192   	; 0x918 <USART_write>

	while (USART_is_tx_busy())
     470:	4b d2       	rcall	.+1174   	; 0x908 <USART_is_tx_busy>
     472:	81 11       	cpse	r24, r1
     474:	fd cf       	rjmp	.-6      	; 0x470 <datastreamer_transmit+0xe>
		;
}
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <datastreamer_output+0xe>
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
     48c:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <sequence.4389>
     490:	8f 70       	andi	r24, 0x0F	; 15
     492:	79 f4       	brne	.+30     	; 0x4b2 <datastreamer_output+0x38>
     494:	01 e0       	ldi	r16, 0x01	; 1
     496:	1e e3       	ldi	r17, 0x3E	; 62
     498:	0f 2e       	mov	r0, r31
     49a:	f4 e1       	ldi	r31, 0x14	; 20
     49c:	ef 2e       	mov	r14, r31
     49e:	fe e3       	ldi	r31, 0x3E	; 62
     4a0:	ff 2e       	mov	r15, r31
     4a2:	f0 2d       	mov	r31, r0
		for (i = 0; i < sizeof(data); i++) {
			datastreamer_transmit(data[i]);
     4a4:	f8 01       	movw	r30, r16
     4a6:	81 91       	ld	r24, Z+
     4a8:	8f 01       	movw	r16, r30
     4aa:	db df       	rcall	.-74     	; 0x462 <datastreamer_transmit>
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     4ac:	e0 16       	cp	r14, r16
     4ae:	f1 06       	cpc	r15, r17
     4b0:	c9 f7       	brne	.-14     	; 0x4a4 <datastreamer_output+0x2a>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     4b2:	85 e5       	ldi	r24, 0x55	; 85
     4b4:	d6 df       	rcall	.-84     	; 0x462 <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     4b6:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <sequence.4389>
     4ba:	d3 df       	rcall	.-90     	; 0x462 <datastreamer_transmit>

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     4bc:	19 82       	std	Y+1, r1	; 0x01
     4be:	1a 82       	std	Y+2, r1	; 0x02
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	89 2b       	or	r24, r25
     4c6:	09 f0       	breq	.+2      	; 0x4ca <datastreamer_output+0x50>
     4c8:	45 c0       	rjmp	.+138    	; 0x554 <datastreamer_output+0xda>
		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	9a 81       	ldd	r25, Y+2	; 0x02
     4ce:	2f d1       	rcall	.+606    	; 0x72e <get_sensor_node_signal>
     4d0:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     4d2:	c7 df       	rcall	.-114    	; 0x462 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     4d4:	81 2f       	mov	r24, r17
     4d6:	c5 df       	rcall	.-118    	; 0x462 <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	35 d1       	rcall	.+618    	; 0x748 <get_sensor_node_reference>
     4de:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     4e0:	c0 df       	rcall	.-128    	; 0x462 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     4e2:	81 2f       	mov	r24, r17
     4e4:	be df       	rcall	.-132    	; 0x462 <datastreamer_transmit>
		
		

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	21 d1       	rcall	.+578    	; 0x72e <get_sensor_node_signal>
     4ec:	8c 01       	movw	r16, r24
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	2a d1       	rcall	.+596    	; 0x748 <get_sensor_node_reference>
		
		/* delta smoothing */
		temp_int_calc = TOUCH_DeltaSmoothing(temp_int_calc);
     4f4:	98 01       	movw	r18, r16
     4f6:	28 1b       	sub	r18, r24
     4f8:	39 0b       	sbc	r19, r25
     4fa:	c9 01       	movw	r24, r18
     4fc:	ac de       	rcall	.-680    	; 0x256 <TOUCH_DeltaSmoothing>
     4fe:	19 2f       	mov	r17, r25
		
		u16temp_output = (uint16_t)(temp_int_calc);
		datastreamer_transmit((uint8_t)u16temp_output);
     500:	b0 df       	rcall	.-160    	; 0x462 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     502:	81 2f       	mov	r24, r17
     504:	ae df       	rcall	.-164    	; 0x462 <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	9a 81       	ldd	r25, Y+2	; 0x02
     50a:	2b d1       	rcall	.+598    	; 0x762 <get_sensor_cc_val>
     50c:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     50e:	a9 df       	rcall	.-174    	; 0x462 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     510:	81 2f       	mov	r24, r17
     512:	a7 df       	rcall	.-178    	; 0x462 <datastreamer_transmit>
		u8temp_output = NODE_PRSC(qtlib_acq_set1.qtm_acq_node_config[count_bytes_out].node_rsel_prsc);
		datastreamer_transmit(u8temp_output);
#endif
#endif
		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	9a 81       	ldd	r25, Y+2	; 0x02
     518:	31 d1       	rcall	.+610    	; 0x77c <get_sensor_state>
		if (0u != (u8temp_output & 0x80)) {
     51a:	88 23       	and	r24, r24
     51c:	1c f4       	brge	.+6      	; 0x524 <datastreamer_output+0xaa>
			datastreamer_transmit(0x01);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	a0 df       	rcall	.-192    	; 0x462 <datastreamer_transmit>
     522:	02 c0       	rjmp	.+4      	; 0x528 <datastreamer_output+0xae>
		} else {
			datastreamer_transmit(0x00);
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	9d df       	rcall	.-198    	; 0x462 <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	fc 01       	movw	r30, r24
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	8e 0f       	add	r24, r30
     534:	9f 1f       	adc	r25, r31
     536:	fc 01       	movw	r30, r24
     538:	ec 5c       	subi	r30, 0xCC	; 204
     53a:	f1 4c       	sbci	r31, 0xC1	; 193
     53c:	80 81       	ld	r24, Z
     53e:	91 df       	rcall	.-222    	; 0x462 <datastreamer_transmit>
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
     54e:	89 2b       	or	r24, r25
     550:	09 f4       	brne	.+2      	; 0x554 <datastreamer_output+0xda>
     552:	bb cf       	rjmp	.-138    	; 0x4ca <datastreamer_output+0x50>
		datastreamer_transmit(qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->median_filter_freq[count]);
	}
#endif
		
	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     554:	80 91 64 3e 	lds	r24, 0x3E64	; 0x803e64 <module_error_code>
     558:	84 df       	rcall	.-248    	; 0x462 <datastreamer_transmit>
	
	/* Frame End */
	datastreamer_transmit(sequence++);
     55a:	80 91 63 3e 	lds	r24, 0x3E63	; 0x803e63 <sequence.4389>
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	98 0f       	add	r25, r24
     562:	90 93 63 3e 	sts	0x3E63, r25	; 0x803e63 <sequence.4389>
     566:	7d df       	rcall	.-262    	; 0x462 <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     568:	8a ea       	ldi	r24, 0xAA	; 170
     56a:	7b df       	rcall	.-266    	; 0x462 <datastreamer_transmit>
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <qtm_measure_complete_callback>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     57e:	e3 e8       	ldi	r30, 0x83	; 131
     580:	fe e3       	ldi	r31, 0x3E	; 62
     582:	80 81       	ld	r24, Z
     584:	82 60       	ori	r24, 0x02	; 2
     586:	80 83       	st	Z, r24
     588:	08 95       	ret

0000058a <qtm_post_process_complete>:
     58a:	e0 91 2c 3e 	lds	r30, 0x3E2C	; 0x803e2c <qtlib_key_set1>
     58e:	f0 91 2d 3e 	lds	r31, 0x3E2D	; 0x803e2d <qtlib_key_set1+0x1>
     592:	80 81       	ld	r24, Z
     594:	88 23       	and	r24, r24
     596:	44 f4       	brge	.+16     	; 0x5a8 <qtm_post_process_complete+0x1e>
     598:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <p_qtm_control>
     59c:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <p_qtm_control+0x1>
     5a0:	80 81       	ld	r24, Z
     5a2:	84 60       	ori	r24, 0x04	; 4
     5a4:	80 83       	st	Z, r24
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <qtm_post_process_complete+0x24>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	80 93 65 3e 	sts	0x3E65, r24	; 0x803e65 <measurement_done_touch>
     5ae:	65 df       	rcall	.-310    	; 0x47a <datastreamer_output>
     5b0:	08 95       	ret

000005b2 <qtm_error_callback>:
     5b2:	88 23       	and	r24, r24
     5b4:	24 f4       	brge	.+8      	; 0x5be <qtm_error_callback+0xc>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 64 3e 	sts	0x3E64, r24	; 0x803e64 <module_error_code>
     5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <qtm_error_callback+0x1e>
     5be:	86 fd       	sbrc	r24, 6
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <qtm_error_callback+0x16>
     5c2:	10 92 64 3e 	sts	0x3E64, r1	; 0x803e64 <module_error_code>
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <qtm_error_callback+0x1e>
     5c8:	8f 70       	andi	r24, 0x0F	; 15
     5ca:	8e 5f       	subi	r24, 0xFE	; 254
     5cc:	80 93 64 3e 	sts	0x3E64, r24	; 0x803e64 <module_error_code>
     5d0:	54 df       	rcall	.-344    	; 0x47a <datastreamer_output>
     5d2:	08 95       	ret

000005d4 <init_complete_callback>:
     5d4:	8f e7       	ldi	r24, 0x7F	; 127
     5d6:	9e e3       	ldi	r25, 0x3E	; 62
     5d8:	b4 d9       	rcall	.-3224   	; 0xfffff942 <__eeprom_end+0xff7ef942>
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	81 e4       	ldi	r24, 0x41	; 65
     5e0:	9e e3       	ldi	r25, 0x3E	; 62
     5e2:	19 da       	rcall	.-3022   	; 0xfffffa16 <__eeprom_end+0xff7efa16>
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	81 e4       	ldi	r24, 0x41	; 65
     5ea:	9e e3       	ldi	r25, 0x3E	; 62
     5ec:	33 da       	rcall	.-2970   	; 0xfffffa54 <__eeprom_end+0xff7efa54>
     5ee:	4a e7       	ldi	r20, 0x7A	; 122
     5f0:	5e e3       	ldi	r21, 0x3E	; 62
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	8c e2       	ldi	r24, 0x2C	; 44
     5f6:	9e e3       	ldi	r25, 0x3E	; 62
     5f8:	13 d2       	rcall	.+1062   	; 0xa20 <qtm_init_sensor_key>
     5fa:	08 95       	ret

000005fc <Timer_set_period>:
     5fc:	e0 e4       	ldi	r30, 0x40	; 64
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	91 81       	ldd	r25, Z+1	; 0x01
     602:	92 fd       	sbrc	r25, 2
     604:	fd cf       	rjmp	.-6      	; 0x600 <Timer_set_period+0x4>
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     60c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     610:	08 95       	ret

00000612 <touch_init>:
     612:	80 e2       	ldi	r24, 0x20	; 32
     614:	f3 df       	rcall	.-26     	; 0x5fc <Timer_set_period>
     616:	e4 e1       	ldi	r30, 0x14	; 20
     618:	f4 e0       	ldi	r31, 0x04	; 4
     61a:	80 81       	ld	r24, Z
     61c:	87 7f       	andi	r24, 0xF7	; 247
     61e:	80 83       	st	Z, r24
     620:	e3 e8       	ldi	r30, 0x83	; 131
     622:	fe e3       	ldi	r31, 0x3E	; 62
     624:	10 82       	st	Z, r1
     626:	88 e2       	ldi	r24, 0x28	; 40
     628:	9e e3       	ldi	r25, 0x3E	; 62
     62a:	81 83       	std	Z+1, r24	; 0x01
     62c:	92 83       	std	Z+2, r25	; 0x02
     62e:	84 e2       	ldi	r24, 0x24	; 36
     630:	9e e3       	ldi	r25, 0x3E	; 62
     632:	83 83       	std	Z+3, r24	; 0x03
     634:	94 83       	std	Z+4, r25	; 0x04
     636:	8c e1       	ldi	r24, 0x1C	; 28
     638:	9e e3       	ldi	r25, 0x3E	; 62
     63a:	85 83       	std	Z+5, r24	; 0x05
     63c:	96 83       	std	Z+6, r25	; 0x06
     63e:	80 e2       	ldi	r24, 0x20	; 32
     640:	9e e3       	ldi	r25, 0x3E	; 62
     642:	87 83       	std	Z+7, r24	; 0x07
     644:	90 87       	std	Z+8, r25	; 0x08
     646:	84 e1       	ldi	r24, 0x14	; 20
     648:	9e e3       	ldi	r25, 0x3E	; 62
     64a:	81 87       	std	Z+9, r24	; 0x09
     64c:	92 87       	std	Z+10, r25	; 0x0a
     64e:	88 e1       	ldi	r24, 0x18	; 24
     650:	9e e3       	ldi	r25, 0x3E	; 62
     652:	83 87       	std	Z+11, r24	; 0x0b
     654:	94 87       	std	Z+12, r25	; 0x0c
     656:	8b ee       	ldi	r24, 0xEB	; 235
     658:	9a e0       	ldi	r25, 0x0A	; 10
     65a:	85 87       	std	Z+13, r24	; 0x0d
     65c:	96 87       	std	Z+14, r25	; 0x0e
     65e:	8a ee       	ldi	r24, 0xEA	; 234
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	87 87       	std	Z+15, r24	; 0x0f
     664:	90 8b       	std	Z+16, r25	; 0x10
     666:	89 ed       	ldi	r24, 0xD9	; 217
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	81 8b       	std	Z+17, r24	; 0x11
     66c:	92 8b       	std	Z+18, r25	; 0x12
     66e:	8f eb       	ldi	r24, 0xBF	; 191
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	83 8b       	std	Z+19, r24	; 0x13
     674:	94 8b       	std	Z+20, r25	; 0x14
     676:	15 8a       	std	Z+21, r1	; 0x15
     678:	16 8a       	std	Z+22, r1	; 0x16
     67a:	85 ec       	ldi	r24, 0xC5	; 197
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	87 8b       	std	Z+23, r24	; 0x17
     680:	90 8f       	std	Z+24, r25	; 0x18
     682:	cf 01       	movw	r24, r30
     684:	af d5       	rcall	.+2910   	; 0x11e4 <qtm_binding_layer_init>
     686:	a9 d5       	rcall	.+2898   	; 0x11da <qmt_get_binding_layer_ptr>
     688:	80 93 81 3e 	sts	0x3E81, r24	; 0x803e81 <p_qtm_control>
     68c:	90 93 82 3e 	sts	0x3E82, r25	; 0x803e82 <p_qtm_control+0x1>
     690:	e7 de       	rcall	.-562    	; 0x460 <datastreamer_init>
     692:	08 95       	ret

00000694 <touch_process>:
     694:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <p_qtm_control>
     698:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <p_qtm_control+0x1>
     69c:	80 81       	ld	r24, Z
     69e:	80 ff       	sbrs	r24, 0
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <touch_process+0x24>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	fd d5       	rcall	.+3066   	; 0x12a0 <qtm_lib_start_acquisition>
     6a6:	81 11       	cpse	r24, r1
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <touch_process+0x24>
     6aa:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <p_qtm_control>
     6ae:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <p_qtm_control+0x1>
     6b2:	80 81       	ld	r24, Z
     6b4:	8e 7f       	andi	r24, 0xFE	; 254
     6b6:	80 83       	st	Z, r24
     6b8:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <p_qtm_control>
     6bc:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <p_qtm_control+0x1>
     6c0:	80 81       	ld	r24, Z
     6c2:	81 ff       	sbrs	r24, 1
     6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <touch_process+0x4e>
     6c6:	3b d6       	rcall	.+3190   	; 0x133e <qtm_lib_acq_process>
     6c8:	81 11       	cpse	r24, r1
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <touch_process+0x3c>
     6cc:	40 d6       	rcall	.+3200   	; 0x134e <qtm_lib_post_process>
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <touch_process+0x40>
     6d0:	80 e8       	ldi	r24, 0x80	; 128
     6d2:	6f df       	rcall	.-290    	; 0x5b2 <qtm_error_callback>
     6d4:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <p_qtm_control>
     6d8:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <p_qtm_control+0x1>
     6dc:	80 81       	ld	r24, Z
     6de:	8d 7f       	andi	r24, 0xFD	; 253
     6e0:	80 83       	st	Z, r24
     6e2:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <p_qtm_control>
     6e6:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <p_qtm_control+0x1>
     6ea:	80 81       	ld	r24, Z
     6ec:	82 ff       	sbrs	r24, 2
     6ee:	09 c0       	rjmp	.+18     	; 0x702 <touch_process+0x6e>
     6f0:	81 60       	ori	r24, 0x01	; 1
     6f2:	80 83       	st	Z, r24
     6f4:	e0 91 81 3e 	lds	r30, 0x3E81	; 0x803e81 <p_qtm_control>
     6f8:	f0 91 82 3e 	lds	r31, 0x3E82	; 0x803e82 <p_qtm_control+0x1>
     6fc:	80 81       	ld	r24, Z
     6fe:	8b 7f       	andi	r24, 0xFB	; 251
     700:	80 83       	st	Z, r24
     702:	08 95       	ret

00000704 <touch_timer_handler>:
     704:	80 91 79 3e 	lds	r24, 0x3E79	; 0x803e79 <interrupt_cnt>
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	80 93 79 3e 	sts	0x3E79, r24	; 0x803e79 <interrupt_cnt>
     70e:	90 91 00 3e 	lds	r25, 0x3E00	; 0x803e00 <__data_start>
     712:	98 17       	cp	r25, r24
     714:	58 f4       	brcc	.+22     	; 0x72c <touch_timer_handler+0x28>
     716:	10 92 79 3e 	sts	0x3E79, r1	; 0x803e79 <interrupt_cnt>
     71a:	e3 e8       	ldi	r30, 0x83	; 131
     71c:	fe e3       	ldi	r31, 0x3E	; 62
     71e:	80 81       	ld	r24, Z
     720:	81 60       	ori	r24, 0x01	; 1
     722:	80 83       	st	Z, r24
     724:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	6f d1       	rcall	.+734    	; 0xa0a <qtm_update_qtlib_timer>
     72c:	08 95       	ret

0000072e <get_sensor_node_signal>:
     72e:	9c 01       	movw	r18, r24
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	fc 01       	movw	r30, r24
     73e:	e6 58       	subi	r30, 0x86	; 134
     740:	f1 4c       	sbci	r31, 0xC1	; 193
     742:	81 81       	ldd	r24, Z+1	; 0x01
     744:	92 81       	ldd	r25, Z+2	; 0x02
     746:	08 95       	ret

00000748 <get_sensor_node_reference>:
     748:	9c 01       	movw	r18, r24
     74a:	22 0f       	add	r18, r18
     74c:	33 1f       	adc	r19, r19
     74e:	82 0f       	add	r24, r18
     750:	93 1f       	adc	r25, r19
     752:	fc 01       	movw	r30, r24
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	e4 56       	subi	r30, 0x64	; 100
     75a:	f1 4c       	sbci	r31, 0xC1	; 193
     75c:	84 81       	ldd	r24, Z+4	; 0x04
     75e:	95 81       	ldd	r25, Z+5	; 0x05
     760:	08 95       	ret

00000762 <get_sensor_cc_val>:
     762:	9c 01       	movw	r18, r24
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	fc 01       	movw	r30, r24
     772:	e6 58       	subi	r30, 0x86	; 134
     774:	f1 4c       	sbci	r31, 0xC1	; 193
     776:	83 81       	ldd	r24, Z+3	; 0x03
     778:	94 81       	ldd	r25, Z+4	; 0x04
     77a:	08 95       	ret

0000077c <get_sensor_state>:
     77c:	9c 01       	movw	r18, r24
     77e:	22 0f       	add	r18, r18
     780:	33 1f       	adc	r19, r19
     782:	82 0f       	add	r24, r18
     784:	93 1f       	adc	r25, r19
     786:	88 0f       	add	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	e0 91 30 3e 	lds	r30, 0x3E30	; 0x803e30 <qtlib_key_set1+0x4>
     78e:	f0 91 31 3e 	lds	r31, 0x3E31	; 0x803e31 <qtlib_key_set1+0x5>
     792:	e8 0f       	add	r30, r24
     794:	f9 1f       	adc	r31, r25
     796:	80 81       	ld	r24, Z
     798:	08 95       	ret

0000079a <__vector_17>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     79a:	1f 92       	push	r1
     79c:	0f 92       	push	r0
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	11 24       	eor	r1, r1
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	ef 93       	push	r30
     7ba:	ff 93       	push	r31
	qtm_t81x_ptc_handler_eoc();
     7bc:	8c d9       	rcall	.-3304   	; 0xfffffad6 <__eeprom_end+0xff7efad6>
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret

000007e4 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     7e4:	42 e0       	ldi	r20, 0x02	; 2
     7e6:	68 ed       	ldi	r22, 0xD8	; 216
     7e8:	88 e7       	ldi	r24, 0x78	; 120
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	66 d0       	rcall	.+204    	; 0x8ba <protected_write_io>
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	68 ed       	ldi	r22, 0xD8	; 216
     7f2:	81 e6       	ldi	r24, 0x61	; 97
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	61 d0       	rcall	.+194    	; 0x8ba <protected_write_io>
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	68 ed       	ldi	r22, 0xD8	; 216
     7fc:	80 e6       	ldi	r24, 0x60	; 96
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	5c d0       	rcall	.+184    	; 0x8ba <protected_write_io>
	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLA),
	             CLKCTRL_CLKSEL_OSC20M_gc /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */
	                 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	/* wait for system oscillator changing to finish */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
     802:	e0 e6       	ldi	r30, 0x60	; 96
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	83 81       	ldd	r24, Z+3	; 0x03
     808:	80 fd       	sbrc	r24, 0
     80a:	fd cf       	rjmp	.-6      	; 0x806 <CLKCTRL_init+0x22>
	}

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	08 95       	ret

00000810 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     810:	78 94       	sei

	return 0;
}
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	08 95       	ret

00000816 <mcu_init>:
	// Disable digital input buffer
	PA7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PA7_set_pull_mode(PORT_PULL_OFF);

	AC_0_init();
     816:	e0 e1       	ldi	r30, 0x10	; 16
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	80 81       	ld	r24, Z
     81c:	88 60       	ori	r24, 0x08	; 8
     81e:	81 93       	st	Z+, r24
     820:	e8 31       	cpi	r30, 0x18	; 24
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	f8 07       	cpc	r31, r24
     826:	c9 f7       	brne	.-14     	; 0x81a <mcu_init+0x4>
     828:	e0 e3       	ldi	r30, 0x30	; 48
     82a:	f4 e0       	ldi	r31, 0x04	; 4
     82c:	80 81       	ld	r24, Z
     82e:	88 60       	ori	r24, 0x08	; 8
     830:	81 93       	st	Z+, r24
     832:	e8 33       	cpi	r30, 0x38	; 56
     834:	84 e0       	ldi	r24, 0x04	; 4
     836:	f8 07       	cpc	r31, r24
     838:	c9 f7       	brne	.-14     	; 0x82c <mcu_init+0x16>
     83a:	e0 e5       	ldi	r30, 0x50	; 80
     83c:	f4 e0       	ldi	r31, 0x04	; 4
     83e:	80 81       	ld	r24, Z
     840:	88 60       	ori	r24, 0x08	; 8
     842:	81 93       	st	Z+, r24
     844:	e8 35       	cpi	r30, 0x58	; 88
     846:	84 e0       	ldi	r24, 0x04	; 4
     848:	f8 07       	cpc	r31, r24
     84a:	c9 f7       	brne	.-14     	; 0x83e <mcu_init+0x28>
     84c:	08 95       	ret

0000084e <USART_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     84e:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     850:	e3 e3       	ldi	r30, 0x33	; 51
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	80 81       	ld	r24, Z
     856:	87 7f       	andi	r24, 0xF7	; 247
     858:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     85a:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     85c:	2a 98       	cbi	0x05, 2	; 5
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);

	USART_init();
     85e:	44 d0       	rcall	.+136    	; 0x8e8 <USART_init>
     860:	08 95       	ret

00000862 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     862:	d9 df       	rcall	.-78     	; 0x816 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     864:	00 98       	cbi	0x00, 0	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     866:	e0 e1       	ldi	r30, 0x10	; 16
     868:	f4 e0       	ldi	r31, 0x04	; 4
     86a:	80 81       	ld	r24, Z
     86c:	88 60       	ori	r24, 0x08	; 8
     86e:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     870:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     872:	e2 e1       	ldi	r30, 0x12	; 18
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	80 81       	ld	r24, Z
     878:	88 60       	ori	r24, 0x08	; 8
     87a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     87c:	03 98       	cbi	0x00, 3	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     87e:	e3 e1       	ldi	r30, 0x13	; 19
     880:	f4 e0       	ldi	r31, 0x04	; 4
     882:	80 81       	ld	r24, Z
     884:	88 60       	ori	r24, 0x08	; 8
     886:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     888:	05 98       	cbi	0x00, 5	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     88a:	e5 e1       	ldi	r30, 0x15	; 21
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	80 81       	ld	r24, Z
     890:	88 60       	ori	r24, 0x08	; 8
     892:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     894:	06 98       	cbi	0x00, 6	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     896:	e6 e1       	ldi	r30, 0x16	; 22
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	80 81       	ld	r24, Z
     89c:	88 60       	ori	r24, 0x08	; 8
     89e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8a0:	20 9a       	sbi	0x04, 0	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8a2:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8a4:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8a6:	29 98       	cbi	0x05, 1	; 5
	    //// <id> pad_pull_config
	    //// <PORT_PULL_OFF"> Off
	    //// <PORT_PULL_UP"> Pull-up
	    //PORT_PULL_UP);

	CLKCTRL_init();
     8a8:	9d df       	rcall	.-198    	; 0x7e4 <CLKCTRL_init>

	RTC_init(1);
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	0a d0       	rcall	.+20     	; 0x8c2 <RTC_init>
	
	VREF_0_init();
     8ae:	3c d0       	rcall	.+120    	; 0x928 <VREF_0_init>
	
	USART_initialization();
     8b0:	ce df       	rcall	.-100    	; 0x84e <USART_initialization>
	
	//AC_0_initialization();

	//WDT_0_init();

	CPUINT_init();
     8b2:	ae df       	rcall	.-164    	; 0x810 <CPUINT_init>

	SLPCTRL_init();
     8b4:	14 d0       	rcall	.+40     	; 0x8de <SLPCTRL_init>

	BOD_init();
     8b6:	94 df       	rcall	.-216    	; 0x7e0 <BOD_init>
     8b8:	08 95       	ret

000008ba <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     8ba:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     8bc:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     8be:	40 83       	st	Z, r20
	ret                             // Return to caller
     8c0:	08 95       	ret

000008c2 <RTC_init>:
 * \brief Initialize rtc interface
 * \return Initialization status.
 */
int8_t RTC_init(uint8_t mode)
{
	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     8c2:	e0 e4       	ldi	r30, 0x40	; 64
     8c4:	f1 e0       	ldi	r31, 0x01	; 1
     8c6:	81 81       	ldd	r24, Z+1	; 0x01
     8c8:	81 11       	cpse	r24, r1
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <RTC_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     8cc:	e0 e4       	ldi	r30, 0x40	; 64
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	81 e8       	ldi	r24, 0x81	; 129
     8d2:	80 83       	st	Z, r24
	| 1 << RTC_RTCEN_bp     /* Enable: enabled */
	| 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz divided by 32 */
     8d4:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
     8d6:	82 e0       	ldi	r24, 0x02	; 2
     8d8:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	08 95       	ret

000008de <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	                | SLPCTRL_SMODE_STDBY_gc; /* Power-down Mode */

	return 0;
}
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <USART_init>:
uint8_t USART_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     8e8:	e0 e0       	ldi	r30, 0x00	; 0
     8ea:	f8 e0       	ldi	r31, 0x08	; 8
     8ec:	8b e5       	ldi	r24, 0x5B	; 91
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	80 87       	std	Z+8, r24	; 0x08
     8f2:	91 87       	std	Z+9, r25	; 0x09
     8f4:	80 e4       	ldi	r24, 0x40	; 64
     8f6:	86 83       	std	Z+6, r24	; 0x06
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	08 95       	ret

000008fc <USART_is_tx_ready>:
     8fc:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     900:	85 fb       	bst	r24, 5
     902:	88 27       	eor	r24, r24
     904:	80 f9       	bld	r24, 0
     906:	08 95       	ret

00000908 <USART_is_tx_busy>:
     908:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     90c:	86 fb       	bst	r24, 6
     90e:	88 27       	eor	r24, r24
     910:	80 f9       	bld	r24, 0
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	89 27       	eor	r24, r25
     916:	08 95       	ret

00000918 <USART_write>:
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     918:	e0 e0       	ldi	r30, 0x00	; 0
     91a:	f8 e0       	ldi	r31, 0x08	; 8
     91c:	94 81       	ldd	r25, Z+4	; 0x04
     91e:	95 ff       	sbrs	r25, 5
     920:	fd cf       	rjmp	.-6      	; 0x91c <USART_write+0x4>
		;
	USART0.TXDATAL = data;
     922:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     926:	08 95       	ret

00000928 <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF_CTRLA = VREF_ADC0REFSEL_0V55_gc   /* Voltage reference at 0.55V */
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	             | VREF_DAC0REFSEL_1V5_gc; /* Voltage reference at 1.5V */

	VREF_CTRLB = 0 << VREF_ADC0REFEN_bp    /* ADC0 reference enable: disabled */
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	             | 1 << VREF_DAC0REFEN_bp; /* DAC0/AC0 reference enable: enabled */

	return 0;
}
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret

00000938 <check_for_aks_block>:
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
     948:	ae 81       	ldd	r26, Y+6	; 0x06
     94a:	bf 81       	ldd	r27, Y+7	; 0x07
     94c:	eb 01       	movw	r28, r22
     94e:	cc 0f       	add	r28, r28
     950:	dd 1f       	adc	r29, r29
     952:	c6 0f       	add	r28, r22
     954:	d7 1f       	adc	r29, r23
     956:	ca 0f       	add	r28, r26
     958:	db 1f       	adc	r29, r27
     95a:	fa 80       	ldd	r15, Y+2	; 0x02
     95c:	fc 01       	movw	r30, r24
     95e:	44 81       	ldd	r20, Z+4	; 0x04
     960:	55 81       	ldd	r21, Z+5	; 0x05
     962:	e6 e0       	ldi	r30, 0x06	; 6
     964:	e6 9f       	mul	r30, r22
     966:	90 01       	movw	r18, r0
     968:	e7 9f       	mul	r30, r23
     96a:	30 0d       	add	r19, r0
     96c:	11 24       	eor	r1, r1
     96e:	8a 01       	movw	r16, r20
     970:	02 0f       	add	r16, r18
     972:	13 1f       	adc	r17, r19
     974:	f8 01       	movw	r30, r16
     976:	22 81       	ldd	r18, Z+2	; 0x02
     978:	33 81       	ldd	r19, Z+3	; 0x03
     97a:	f9 01       	movw	r30, r18
     97c:	21 81       	ldd	r18, Z+1	; 0x01
     97e:	32 81       	ldd	r19, Z+2	; 0x02
     980:	f8 01       	movw	r30, r16
     982:	04 81       	ldd	r16, Z+4	; 0x04
     984:	15 81       	ldd	r17, Z+5	; 0x05
     986:	20 1b       	sub	r18, r16
     988:	31 0b       	sbc	r19, r17
     98a:	e8 81       	ld	r30, Y
     98c:	2e 1b       	sub	r18, r30
     98e:	31 09       	sbc	r19, r1
     990:	ec 01       	movw	r28, r24
     992:	ea 81       	ldd	r30, Y+2	; 0x02
     994:	fb 81       	ldd	r31, Y+3	; 0x03
     996:	00 81       	ld	r16, Z
     998:	11 81       	ldd	r17, Z+1	; 0x01
     99a:	fa 01       	movw	r30, r20
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	40 17       	cp	r20, r16
     9a2:	51 07       	cpc	r21, r17
     9a4:	39 f1       	breq	.+78     	; 0x9f4 <check_for_aks_block+0xbc>
     9a6:	46 17       	cp	r20, r22
     9a8:	57 07       	cpc	r21, r23
     9aa:	f9 f0       	breq	.+62     	; 0x9ea <check_for_aks_block+0xb2>
     9ac:	12 96       	adiw	r26, 0x02	; 2
     9ae:	8c 91       	ld	r24, X
     9b0:	12 97       	sbiw	r26, 0x02	; 2
     9b2:	f8 12       	cpse	r15, r24
     9b4:	1a c0       	rjmp	.+52     	; 0x9ea <check_for_aks_block+0xb2>
     9b6:	80 81       	ld	r24, Z
     9b8:	85 58       	subi	r24, 0x85	; 133
     9ba:	82 30       	cpi	r24, 0x02	; 2
     9bc:	e8 f0       	brcs	.+58     	; 0x9f8 <check_for_aks_block+0xc0>
     9be:	c4 80       	ldd	r12, Z+4	; 0x04
     9c0:	d5 80       	ldd	r13, Z+5	; 0x05
     9c2:	82 81       	ldd	r24, Z+2	; 0x02
     9c4:	93 81       	ldd	r25, Z+3	; 0x03
     9c6:	ec 01       	movw	r28, r24
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	9a 81       	ldd	r25, Y+2	; 0x02
     9cc:	c8 16       	cp	r12, r24
     9ce:	d9 06       	cpc	r13, r25
     9d0:	60 f4       	brcc	.+24     	; 0x9ea <check_for_aks_block+0xb2>
     9d2:	8c 19       	sub	r24, r12
     9d4:	9d 09       	sbc	r25, r13
     9d6:	cc 91       	ld	r28, X
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
     9da:	c8 17       	cp	r28, r24
     9dc:	d9 07       	cpc	r29, r25
     9de:	28 f4       	brcc	.+10     	; 0x9ea <check_for_aks_block+0xb2>
     9e0:	8c 1b       	sub	r24, r28
     9e2:	9d 0b       	sbc	r25, r29
     9e4:	28 17       	cp	r18, r24
     9e6:	39 07       	cpc	r19, r25
     9e8:	38 f0       	brcs	.+14     	; 0x9f8 <check_for_aks_block+0xc0>
     9ea:	4f 5f       	subi	r20, 0xFF	; 255
     9ec:	5f 4f       	sbci	r21, 0xFF	; 255
     9ee:	13 96       	adiw	r26, 0x03	; 3
     9f0:	36 96       	adiw	r30, 0x06	; 6
     9f2:	d6 cf       	rjmp	.-84     	; 0x9a0 <check_for_aks_block+0x68>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	01 c0       	rjmp	.+2      	; 0x9fa <check_for_aks_block+0xc2>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	08 95       	ret

00000a0a <qtm_update_qtlib_timer>:
     a0a:	20 91 66 3e 	lds	r18, 0x3E66	; 0x803e66 <qtm_local_ms_timecount>
     a0e:	30 91 67 3e 	lds	r19, 0x3E67	; 0x803e67 <qtm_local_ms_timecount+0x1>
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	80 93 66 3e 	sts	0x3E66, r24	; 0x803e66 <qtm_local_ms_timecount>
     a1a:	90 93 67 3e 	sts	0x3E67, r25	; 0x803e67 <qtm_local_ms_timecount+0x1>
     a1e:	08 95       	ret

00000a20 <qtm_init_sensor_key>:
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	d9 f0       	breq	.+54     	; 0xa5a <qtm_init_sensor_key+0x3a>
     a24:	41 15       	cp	r20, r1
     a26:	51 05       	cpc	r21, r1
     a28:	c1 f0       	breq	.+48     	; 0xa5a <qtm_init_sensor_key+0x3a>
     a2a:	26 e0       	ldi	r18, 0x06	; 6
     a2c:	62 9f       	mul	r22, r18
     a2e:	b0 01       	movw	r22, r0
     a30:	11 24       	eor	r1, r1
     a32:	dc 01       	movw	r26, r24
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	ed 91       	ld	r30, X+
     a38:	fc 91       	ld	r31, X
     a3a:	15 97       	sbiw	r26, 0x05	; 5
     a3c:	e6 0f       	add	r30, r22
     a3e:	f7 1f       	adc	r31, r23
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	20 83       	st	Z, r18
     a44:	14 96       	adiw	r26, 0x04	; 4
     a46:	8d 91       	ld	r24, X+
     a48:	9c 91       	ld	r25, X
     a4a:	15 97       	sbiw	r26, 0x05	; 5
     a4c:	fc 01       	movw	r30, r24
     a4e:	e6 0f       	add	r30, r22
     a50:	f7 1f       	adc	r31, r23
     a52:	42 83       	std	Z+2, r20	; 0x02
     a54:	53 83       	std	Z+3, r21	; 0x03
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 95       	ret
     a5a:	8b e0       	ldi	r24, 0x0B	; 11
     a5c:	08 95       	ret

00000a5e <qtm_key_sensors_process>:
     a5e:	2f 92       	push	r2
     a60:	3f 92       	push	r3
     a62:	4f 92       	push	r4
     a64:	5f 92       	push	r5
     a66:	6f 92       	push	r6
     a68:	7f 92       	push	r7
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	09 f4       	brne	.+2      	; 0xa88 <qtm_key_sensors_process+0x2a>
     a86:	7b c3       	rjmp	.+1782   	; 0x117e <qtm_key_sensors_process+0x720>
     a88:	ec 01       	movw	r28, r24
     a8a:	a1 2c       	mov	r10, r1
     a8c:	b1 2c       	mov	r11, r1
     a8e:	81 2c       	mov	r8, r1
     a90:	91 2c       	mov	r9, r1
     a92:	21 2c       	mov	r2, r1
     a94:	d1 2c       	mov	r13, r1
     a96:	33 e0       	ldi	r19, 0x03	; 3
     a98:	c3 2e       	mov	r12, r19
     a9a:	45 e8       	ldi	r20, 0x85	; 133
     a9c:	64 2e       	mov	r6, r20
     a9e:	56 e8       	ldi	r21, 0x86	; 134
     aa0:	75 2e       	mov	r7, r21
     aa2:	67 e0       	ldi	r22, 0x07	; 7
     aa4:	36 2e       	mov	r3, r22
     aa6:	72 e0       	ldi	r23, 0x02	; 2
     aa8:	47 2e       	mov	r4, r23
     aaa:	e8 e0       	ldi	r30, 0x08	; 8
     aac:	5e 2e       	mov	r5, r30
     aae:	ea 81       	ldd	r30, Y+2	; 0x02
     ab0:	fb 81       	ldd	r31, Y+3	; 0x03
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	88 16       	cp	r8, r24
     ab8:	99 06       	cpc	r9, r25
     aba:	08 f0       	brcs	.+2      	; 0xabe <qtm_key_sensors_process+0x60>
     abc:	a3 c1       	rjmp	.+838    	; 0xe04 <qtm_key_sensors_process+0x3a6>
     abe:	75 01       	movw	r14, r10
     ac0:	ee 0c       	add	r14, r14
     ac2:	ff 1c       	adc	r15, r15
     ac4:	0c 81       	ldd	r16, Y+4	; 0x04
     ac6:	1d 81       	ldd	r17, Y+5	; 0x05
     ac8:	0e 0d       	add	r16, r14
     aca:	1f 1d       	adc	r17, r15
     acc:	d8 01       	movw	r26, r16
     ace:	8c 91       	ld	r24, X
     ad0:	84 30       	cpi	r24, 0x04	; 4
     ad2:	09 f4       	brne	.+2      	; 0xad6 <qtm_key_sensors_process+0x78>
     ad4:	a1 c0       	rjmp	.+322    	; 0xc18 <qtm_key_sensors_process+0x1ba>
     ad6:	38 f4       	brcc	.+14     	; 0xae6 <qtm_key_sensors_process+0x88>
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	01 f1       	breq	.+64     	; 0xb1c <qtm_key_sensors_process+0xbe>
     adc:	08 f0       	brcs	.+2      	; 0xae0 <qtm_key_sensors_process+0x82>
     ade:	49 c0       	rjmp	.+146    	; 0xb72 <qtm_key_sensors_process+0x114>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	59 f0       	breq	.+22     	; 0xafa <qtm_key_sensors_process+0x9c>
     ae4:	88 c1       	rjmp	.+784    	; 0xdf6 <qtm_key_sensors_process+0x398>
     ae6:	85 38       	cpi	r24, 0x85	; 133
     ae8:	09 f4       	brne	.+2      	; 0xaec <qtm_key_sensors_process+0x8e>
     aea:	c0 c0       	rjmp	.+384    	; 0xc6c <qtm_key_sensors_process+0x20e>
     aec:	86 38       	cpi	r24, 0x86	; 134
     aee:	09 f4       	brne	.+2      	; 0xaf2 <qtm_key_sensors_process+0x94>
     af0:	f4 c0       	rjmp	.+488    	; 0xcda <qtm_key_sensors_process+0x27c>
     af2:	87 30       	cpi	r24, 0x07	; 7
     af4:	09 f0       	breq	.+2      	; 0xaf8 <qtm_key_sensors_process+0x9a>
     af6:	7f c1       	rjmp	.+766    	; 0xdf6 <qtm_key_sensors_process+0x398>
     af8:	35 c1       	rjmp	.+618    	; 0xd64 <qtm_key_sensors_process+0x306>
     afa:	d8 01       	movw	r26, r16
     afc:	12 96       	adiw	r26, 0x02	; 2
     afe:	ed 91       	ld	r30, X+
     b00:	fc 91       	ld	r31, X
     b02:	13 97       	sbiw	r26, 0x03	; 3
     b04:	80 81       	ld	r24, Z
     b06:	8e 71       	andi	r24, 0x1E	; 30
     b08:	09 f0       	breq	.+2      	; 0xb0c <qtm_key_sensors_process+0xae>
     b0a:	67 c1       	rjmp	.+718    	; 0xdda <qtm_key_sensors_process+0x37c>
     b0c:	4c 92       	st	X, r4
     b0e:	8c 81       	ldd	r24, Y+4	; 0x04
     b10:	9d 81       	ldd	r25, Y+5	; 0x05
     b12:	fc 01       	movw	r30, r24
     b14:	ee 0d       	add	r30, r14
     b16:	ff 1d       	adc	r31, r15
     b18:	51 82       	std	Z+1, r5	; 0x01
     b1a:	5f c1       	rjmp	.+702    	; 0xdda <qtm_key_sensors_process+0x37c>
     b1c:	f8 01       	movw	r30, r16
     b1e:	21 81       	ldd	r18, Z+1	; 0x01
     b20:	22 23       	and	r18, r18
     b22:	29 f1       	breq	.+74     	; 0xb6e <qtm_key_sensors_process+0x110>
     b24:	02 80       	ldd	r0, Z+2	; 0x02
     b26:	f3 81       	ldd	r31, Z+3	; 0x03
     b28:	e0 2d       	mov	r30, r0
     b2a:	25 30       	cpi	r18, 0x05	; 5
     b2c:	20 f0       	brcs	.+8      	; 0xb36 <qtm_key_sensors_process+0xd8>
     b2e:	81 81       	ldd	r24, Z+1	; 0x01
     b30:	92 81       	ldd	r25, Z+2	; 0x02
     b32:	d8 01       	movw	r26, r16
     b34:	0e c0       	rjmp	.+28     	; 0xb52 <qtm_key_sensors_process+0xf4>
     b36:	d8 01       	movw	r26, r16
     b38:	14 96       	adiw	r26, 0x04	; 4
     b3a:	8d 91       	ld	r24, X+
     b3c:	9c 91       	ld	r25, X
     b3e:	15 97       	sbiw	r26, 0x05	; 5
     b40:	41 81       	ldd	r20, Z+1	; 0x01
     b42:	52 81       	ldd	r21, Z+2	; 0x02
     b44:	84 17       	cp	r24, r20
     b46:	95 07       	cpc	r25, r21
     b48:	69 f0       	breq	.+26     	; 0xb64 <qtm_key_sensors_process+0x106>
     b4a:	48 17       	cp	r20, r24
     b4c:	59 07       	cpc	r21, r25
     b4e:	30 f4       	brcc	.+12     	; 0xb5c <qtm_key_sensors_process+0xfe>
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	14 96       	adiw	r26, 0x04	; 4
     b54:	8d 93       	st	X+, r24
     b56:	9c 93       	st	X, r25
     b58:	15 97       	sbiw	r26, 0x05	; 5
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <qtm_key_sensors_process+0x106>
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	f8 01       	movw	r30, r16
     b60:	84 83       	std	Z+4, r24	; 0x04
     b62:	95 83       	std	Z+5, r25	; 0x05
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	d8 01       	movw	r26, r16
     b68:	11 96       	adiw	r26, 0x01	; 1
     b6a:	2c 93       	st	X, r18
     b6c:	36 c1       	rjmp	.+620    	; 0xdda <qtm_key_sensors_process+0x37c>
     b6e:	f8 01       	movw	r30, r16
     b70:	2f c1       	rjmp	.+606    	; 0xdd0 <qtm_key_sensors_process+0x372>
     b72:	d8 01       	movw	r26, r16
     b74:	14 96       	adiw	r26, 0x04	; 4
     b76:	2d 91       	ld	r18, X+
     b78:	3c 91       	ld	r19, X
     b7a:	15 97       	sbiw	r26, 0x05	; 5
     b7c:	12 96       	adiw	r26, 0x02	; 2
     b7e:	8d 91       	ld	r24, X+
     b80:	9c 91       	ld	r25, X
     b82:	13 97       	sbiw	r26, 0x03	; 3
     b84:	dc 01       	movw	r26, r24
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	4d 91       	ld	r20, X+
     b8a:	5c 91       	ld	r21, X
     b8c:	12 97       	sbiw	r26, 0x02	; 2
     b8e:	24 17       	cp	r18, r20
     b90:	35 07       	cpc	r19, r21
     b92:	09 f4       	brne	.+2      	; 0xb96 <qtm_key_sensors_process+0x138>
     b94:	30 c1       	rjmp	.+608    	; 0xdf6 <qtm_key_sensors_process+0x398>
     b96:	8e 81       	ldd	r24, Y+6	; 0x06
     b98:	9f 81       	ldd	r25, Y+7	; 0x07
     b9a:	42 17       	cp	r20, r18
     b9c:	53 07       	cpc	r21, r19
     b9e:	e0 f4       	brcc	.+56     	; 0xbd8 <qtm_key_sensors_process+0x17a>
     ba0:	24 1b       	sub	r18, r20
     ba2:	35 0b       	sbc	r19, r21
     ba4:	dc 01       	movw	r26, r24
     ba6:	aa 0d       	add	r26, r10
     ba8:	bb 1d       	adc	r27, r11
     baa:	8c 91       	ld	r24, X
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	05 80       	ldd	r0, Z+5	; 0x05
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <qtm_key_sensors_process+0x158>
     bb2:	95 95       	asr	r25
     bb4:	87 95       	ror	r24
     bb6:	0a 94       	dec	r0
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <qtm_key_sensors_process+0x154>
     bba:	99 27       	eor	r25, r25
     bbc:	28 17       	cp	r18, r24
     bbe:	39 07       	cpc	r19, r25
     bc0:	08 f4       	brcc	.+2      	; 0xbc4 <qtm_key_sensors_process+0x166>
     bc2:	19 c1       	rjmp	.+562    	; 0xdf6 <qtm_key_sensors_process+0x398>
     bc4:	84 81       	ldd	r24, Z+4	; 0x04
     bc6:	88 23       	and	r24, r24
     bc8:	09 f4       	brne	.+2      	; 0xbcc <qtm_key_sensors_process+0x16e>
     bca:	15 c1       	rjmp	.+554    	; 0xdf6 <qtm_key_sensors_process+0x398>
     bcc:	f8 01       	movw	r30, r16
     bce:	30 82       	st	Z, r3
     bd0:	ea 81       	ldd	r30, Y+2	; 0x02
     bd2:	fb 81       	ldd	r31, Y+3	; 0x03
     bd4:	24 81       	ldd	r18, Z+4	; 0x04
     bd6:	19 c0       	rjmp	.+50     	; 0xc0a <qtm_key_sensors_process+0x1ac>
     bd8:	fc 01       	movw	r30, r24
     bda:	ea 0d       	add	r30, r10
     bdc:	fb 1d       	adc	r31, r11
     bde:	42 1b       	sub	r20, r18
     be0:	53 0b       	sbc	r21, r19
     be2:	80 81       	ld	r24, Z
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	48 17       	cp	r20, r24
     be8:	59 07       	cpc	r21, r25
     bea:	08 f4       	brcc	.+2      	; 0xbee <qtm_key_sensors_process+0x190>
     bec:	04 c1       	rjmp	.+520    	; 0xdf6 <qtm_key_sensors_process+0x398>
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	88 23       	and	r24, r24
     bf2:	29 f0       	breq	.+10     	; 0xbfe <qtm_key_sensors_process+0x1a0>
     bf4:	b4 01       	movw	r22, r8
     bf6:	ce 01       	movw	r24, r28
     bf8:	9f de       	rcall	.-706    	; 0x938 <check_for_aks_block>
     bfa:	81 11       	cpse	r24, r1
     bfc:	fc c0       	rjmp	.+504    	; 0xdf6 <qtm_key_sensors_process+0x398>
     bfe:	e4 e0       	ldi	r30, 0x04	; 4
     c00:	d8 01       	movw	r26, r16
     c02:	ec 93       	st	X, r30
     c04:	ea 81       	ldd	r30, Y+2	; 0x02
     c06:	fb 81       	ldd	r31, Y+3	; 0x03
     c08:	22 81       	ldd	r18, Z+2	; 0x02
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
     c0c:	9d 81       	ldd	r25, Y+5	; 0x05
     c0e:	fc 01       	movw	r30, r24
     c10:	ee 0d       	add	r30, r14
     c12:	ff 1d       	adc	r31, r15
     c14:	21 83       	std	Z+1, r18	; 0x01
     c16:	e1 c0       	rjmp	.+450    	; 0xdda <qtm_key_sensors_process+0x37c>
     c18:	d8 01       	movw	r26, r16
     c1a:	14 96       	adiw	r26, 0x04	; 4
     c1c:	2d 91       	ld	r18, X+
     c1e:	3c 91       	ld	r19, X
     c20:	15 97       	sbiw	r26, 0x05	; 5
     c22:	12 96       	adiw	r26, 0x02	; 2
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	13 97       	sbiw	r26, 0x03	; 3
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	92 81       	ldd	r25, Z+2	; 0x02
     c2e:	82 17       	cp	r24, r18
     c30:	93 07       	cpc	r25, r19
     c32:	08 f4       	brcc	.+2      	; 0xc36 <qtm_key_sensors_process+0x1d8>
     c34:	d6 c0       	rjmp	.+428    	; 0xde2 <qtm_key_sensors_process+0x384>
     c36:	ee 81       	ldd	r30, Y+6	; 0x06
     c38:	ff 81       	ldd	r31, Y+7	; 0x07
     c3a:	ea 0d       	add	r30, r10
     c3c:	fb 1d       	adc	r31, r11
     c3e:	82 1b       	sub	r24, r18
     c40:	93 0b       	sbc	r25, r19
     c42:	20 81       	ld	r18, Z
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	28 17       	cp	r18, r24
     c48:	39 07       	cpc	r19, r25
     c4a:	08 f0       	brcs	.+2      	; 0xc4e <qtm_key_sensors_process+0x1f0>
     c4c:	ae c0       	rjmp	.+348    	; 0xdaa <qtm_key_sensors_process+0x34c>
     c4e:	82 81       	ldd	r24, Z+2	; 0x02
     c50:	88 23       	and	r24, r24
     c52:	29 f0       	breq	.+10     	; 0xc5e <qtm_key_sensors_process+0x200>
     c54:	b4 01       	movw	r22, r8
     c56:	ce 01       	movw	r24, r28
     c58:	6f de       	rcall	.-802    	; 0x938 <check_for_aks_block>
     c5a:	81 11       	cpse	r24, r1
     c5c:	cc c0       	rjmp	.+408    	; 0xdf6 <qtm_key_sensors_process+0x398>
     c5e:	f8 01       	movw	r30, r16
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	88 23       	and	r24, r24
     c64:	09 f4       	brne	.+2      	; 0xc68 <qtm_key_sensors_process+0x20a>
     c66:	67 c0       	rjmp	.+206    	; 0xd36 <qtm_key_sensors_process+0x2d8>
     c68:	81 50       	subi	r24, 0x01	; 1
     c6a:	b6 c0       	rjmp	.+364    	; 0xdd8 <qtm_key_sensors_process+0x37a>
     c6c:	a8 81       	ld	r26, Y
     c6e:	b9 81       	ldd	r27, Y+1	; 0x01
     c70:	80 85       	ldd	r24, Z+8	; 0x08
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	8c 93       	st	X, r24
     c76:	ec 81       	ldd	r30, Y+4	; 0x04
     c78:	fd 81       	ldd	r31, Y+5	; 0x05
     c7a:	ee 0d       	add	r30, r14
     c7c:	ff 1d       	adc	r31, r15
     c7e:	44 81       	ldd	r20, Z+4	; 0x04
     c80:	55 81       	ldd	r21, Z+5	; 0x05
     c82:	a2 81       	ldd	r26, Z+2	; 0x02
     c84:	b3 81       	ldd	r27, Z+3	; 0x03
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	8d 91       	ld	r24, X+
     c8a:	9c 91       	ld	r25, X
     c8c:	12 97       	sbiw	r26, 0x02	; 2
     c8e:	84 17       	cp	r24, r20
     c90:	95 07       	cpc	r25, r21
     c92:	c0 f0       	brcs	.+48     	; 0xcc4 <qtm_key_sensors_process+0x266>
     c94:	ae 81       	ldd	r26, Y+6	; 0x06
     c96:	bf 81       	ldd	r27, Y+7	; 0x07
     c98:	aa 0d       	add	r26, r10
     c9a:	bb 1d       	adc	r27, r11
     c9c:	6c 91       	ld	r22, X
     c9e:	26 2f       	mov	r18, r22
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	7c 91       	ld	r23, X
     ca6:	7f 5f       	subi	r23, 0xFF	; 255
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <qtm_key_sensors_process+0x250>
     caa:	35 95       	asr	r19
     cac:	27 95       	ror	r18
     cae:	7a 95       	dec	r23
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <qtm_key_sensors_process+0x24c>
     cb2:	84 1b       	sub	r24, r20
     cb4:	95 0b       	sbc	r25, r21
     cb6:	62 1b       	sub	r22, r18
     cb8:	26 2f       	mov	r18, r22
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	28 17       	cp	r18, r24
     cbe:	39 07       	cpc	r19, r25
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <qtm_key_sensors_process+0x266>
     cc2:	97 c0       	rjmp	.+302    	; 0xdf2 <qtm_key_sensors_process+0x394>
     cc4:	70 82       	st	Z, r7
     cc6:	ea 81       	ldd	r30, Y+2	; 0x02
     cc8:	fb 81       	ldd	r31, Y+3	; 0x03
     cca:	22 81       	ldd	r18, Z+2	; 0x02
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	fc 01       	movw	r30, r24
     cd2:	ee 0d       	add	r30, r14
     cd4:	ff 1d       	adc	r31, r15
     cd6:	21 83       	std	Z+1, r18	; 0x01
     cd8:	42 c0       	rjmp	.+132    	; 0xd5e <qtm_key_sensors_process+0x300>
     cda:	d8 01       	movw	r26, r16
     cdc:	14 96       	adiw	r26, 0x04	; 4
     cde:	6d 91       	ld	r22, X+
     ce0:	7c 91       	ld	r23, X
     ce2:	15 97       	sbiw	r26, 0x05	; 5
     ce4:	12 96       	adiw	r26, 0x02	; 2
     ce6:	ed 91       	ld	r30, X+
     ce8:	fc 91       	ld	r31, X
     cea:	13 97       	sbiw	r26, 0x03	; 3
     cec:	21 81       	ldd	r18, Z+1	; 0x01
     cee:	32 81       	ldd	r19, Z+2	; 0x02
     cf0:	26 17       	cp	r18, r22
     cf2:	37 07       	cpc	r19, r23
     cf4:	58 f4       	brcc	.+22     	; 0xd0c <qtm_key_sensors_process+0x2ae>
     cf6:	11 96       	adiw	r26, 0x01	; 1
     cf8:	8c 91       	ld	r24, X
     cfa:	11 97       	sbiw	r26, 0x01	; 1
     cfc:	81 11       	cpse	r24, r1
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <qtm_key_sensors_process+0x2a6>
     d00:	cc 92       	st	X, r12
     d02:	77 c0       	rjmp	.+238    	; 0xdf2 <qtm_key_sensors_process+0x394>
     d04:	81 50       	subi	r24, 0x01	; 1
     d06:	f8 01       	movw	r30, r16
     d08:	81 83       	std	Z+1, r24	; 0x01
     d0a:	73 c0       	rjmp	.+230    	; 0xdf2 <qtm_key_sensors_process+0x394>
     d0c:	ee 81       	ldd	r30, Y+6	; 0x06
     d0e:	ff 81       	ldd	r31, Y+7	; 0x07
     d10:	ea 0d       	add	r30, r10
     d12:	fb 1d       	adc	r31, r11
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	9f 5f       	subi	r25, 0xFF	; 255
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <qtm_key_sensors_process+0x2c6>
     d20:	55 95       	asr	r21
     d22:	47 95       	ror	r20
     d24:	9a 95       	dec	r25
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <qtm_key_sensors_process+0x2c2>
     d28:	26 1b       	sub	r18, r22
     d2a:	37 0b       	sbc	r19, r23
     d2c:	84 1b       	sub	r24, r20
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	82 17       	cp	r24, r18
     d32:	93 07       	cpc	r25, r19
     d34:	60 f4       	brcc	.+24     	; 0xd4e <qtm_key_sensors_process+0x2f0>
     d36:	d8 01       	movw	r26, r16
     d38:	6c 92       	st	X, r6
     d3a:	ea 81       	ldd	r30, Y+2	; 0x02
     d3c:	fb 81       	ldd	r31, Y+3	; 0x03
     d3e:	23 81       	ldd	r18, Z+3	; 0x03
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	fc 01       	movw	r30, r24
     d46:	ee 0d       	add	r30, r14
     d48:	ff 1d       	adc	r31, r15
     d4a:	21 83       	std	Z+1, r18	; 0x01
     d4c:	52 c0       	rjmp	.+164    	; 0xdf2 <qtm_key_sensors_process+0x394>
     d4e:	f8 01       	movw	r30, r16
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	81 11       	cpse	r24, r1
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <qtm_key_sensors_process+0x2fc>
     d56:	c0 82       	st	Z, r12
     d58:	4c c0       	rjmp	.+152    	; 0xdf2 <qtm_key_sensors_process+0x394>
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	81 83       	std	Z+1, r24	; 0x01
     d5e:	22 24       	eor	r2, r2
     d60:	23 94       	inc	r2
     d62:	3b c0       	rjmp	.+118    	; 0xdda <qtm_key_sensors_process+0x37c>
     d64:	d8 01       	movw	r26, r16
     d66:	14 96       	adiw	r26, 0x04	; 4
     d68:	2d 91       	ld	r18, X+
     d6a:	3c 91       	ld	r19, X
     d6c:	15 97       	sbiw	r26, 0x05	; 5
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	8d 91       	ld	r24, X+
     d72:	9c 91       	ld	r25, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	dc 01       	movw	r26, r24
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	8d 91       	ld	r24, X+
     d7c:	9c 91       	ld	r25, X
     d7e:	12 97       	sbiw	r26, 0x02	; 2
     d80:	82 17       	cp	r24, r18
     d82:	93 07       	cpc	r25, r19
     d84:	68 f5       	brcc	.+90     	; 0xde0 <qtm_key_sensors_process+0x382>
     d86:	28 1b       	sub	r18, r24
     d88:	39 0b       	sbc	r19, r25
     d8a:	ae 81       	ldd	r26, Y+6	; 0x06
     d8c:	bf 81       	ldd	r27, Y+7	; 0x07
     d8e:	aa 0d       	add	r26, r10
     d90:	bb 1d       	adc	r27, r11
     d92:	8c 91       	ld	r24, X
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	05 80       	ldd	r0, Z+5	; 0x05
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <qtm_key_sensors_process+0x340>
     d9a:	95 95       	asr	r25
     d9c:	87 95       	ror	r24
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <qtm_key_sensors_process+0x33c>
     da2:	99 27       	eor	r25, r25
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	18 f4       	brcc	.+6      	; 0xdb0 <qtm_key_sensors_process+0x352>
     daa:	f8 01       	movw	r30, r16
     dac:	c0 82       	st	Z, r12
     dae:	1a c0       	rjmp	.+52     	; 0xde4 <qtm_key_sensors_process+0x386>
     db0:	d8 01       	movw	r26, r16
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	8c 91       	ld	r24, X
     db6:	11 97       	sbiw	r26, 0x01	; 1
     db8:	81 11       	cpse	r24, r1
     dba:	0c c0       	rjmp	.+24     	; 0xdd4 <qtm_key_sensors_process+0x376>
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	8c 93       	st	X, r24
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	9d 81       	ldd	r25, Y+5	; 0x05
     dc4:	fc 01       	movw	r30, r24
     dc6:	ee 0d       	add	r30, r14
     dc8:	ff 1d       	adc	r31, r15
     dca:	02 80       	ldd	r0, Z+2	; 0x02
     dcc:	f3 81       	ldd	r31, Z+3	; 0x03
     dce:	e0 2d       	mov	r30, r0
     dd0:	c0 82       	st	Z, r12
     dd2:	11 c0       	rjmp	.+34     	; 0xdf6 <qtm_key_sensors_process+0x398>
     dd4:	81 50       	subi	r24, 0x01	; 1
     dd6:	f8 01       	movw	r30, r16
     dd8:	81 83       	std	Z+1, r24	; 0x01
     dda:	dd 24       	eor	r13, r13
     ddc:	d3 94       	inc	r13
     dde:	0b c0       	rjmp	.+22     	; 0xdf6 <qtm_key_sensors_process+0x398>
     de0:	d8 01       	movw	r26, r16
     de2:	cc 92       	st	X, r12
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	fc 01       	movw	r30, r24
     dea:	ee 0d       	add	r30, r14
     dec:	ff 1d       	adc	r31, r15
     dee:	11 82       	std	Z+1, r1	; 0x01
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <qtm_key_sensors_process+0x398>
     df2:	22 24       	eor	r2, r2
     df4:	23 94       	inc	r2
     df6:	bf ef       	ldi	r27, 0xFF	; 255
     df8:	8b 1a       	sub	r8, r27
     dfa:	9b 0a       	sbc	r9, r27
     dfc:	e3 e0       	ldi	r30, 0x03	; 3
     dfe:	ae 0e       	add	r10, r30
     e00:	b1 1c       	adc	r11, r1
     e02:	55 ce       	rjmp	.-854    	; 0xaae <qtm_key_sensors_process+0x50>
     e04:	e8 81       	ld	r30, Y
     e06:	f9 81       	ldd	r31, Y+1	; 0x01
     e08:	80 81       	ld	r24, Z
     e0a:	87 ff       	sbrs	r24, 7
     e0c:	23 c0       	rjmp	.+70     	; 0xe54 <qtm_key_sensors_process+0x3f6>
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	ea 81       	ldd	r30, Y+2	; 0x02
     e18:	fb 81       	ldd	r31, Y+3	; 0x03
     e1a:	80 81       	ld	r24, Z
     e1c:	91 81       	ldd	r25, Z+1	; 0x01
     e1e:	28 17       	cp	r18, r24
     e20:	39 07       	cpc	r19, r25
     e22:	98 f4       	brcc	.+38     	; 0xe4a <qtm_key_sensors_process+0x3ec>
     e24:	ec 81       	ldd	r30, Y+4	; 0x04
     e26:	fd 81       	ldd	r31, Y+5	; 0x05
     e28:	e4 0f       	add	r30, r20
     e2a:	f5 1f       	adc	r31, r21
     e2c:	a2 81       	ldd	r26, Z+2	; 0x02
     e2e:	b3 81       	ldd	r27, Z+3	; 0x03
     e30:	8c 91       	ld	r24, X
     e32:	80 fd       	sbrc	r24, 0
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <qtm_key_sensors_process+0x3e2>
     e36:	90 81       	ld	r25, Z
     e38:	97 7f       	andi	r25, 0xF7	; 247
     e3a:	11 f0       	breq	.+4      	; 0xe40 <qtm_key_sensors_process+0x3e2>
     e3c:	81 60       	ori	r24, 0x01	; 1
     e3e:	8c 93       	st	X, r24
     e40:	2f 5f       	subi	r18, 0xFF	; 255
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	4a 5f       	subi	r20, 0xFA	; 250
     e46:	5f 4f       	sbci	r21, 0xFF	; 255
     e48:	e6 cf       	rjmp	.-52     	; 0xe16 <qtm_key_sensors_process+0x3b8>
     e4a:	e8 81       	ld	r30, Y
     e4c:	f9 81       	ldd	r31, Y+1	; 0x01
     e4e:	80 81       	ld	r24, Z
     e50:	8f 77       	andi	r24, 0x7F	; 127
     e52:	80 83       	st	Z, r24
     e54:	d1 10       	cpse	r13, r1
     e56:	07 c0       	rjmp	.+14     	; 0xe66 <qtm_key_sensors_process+0x408>
     e58:	e8 81       	ld	r30, Y
     e5a:	f9 81       	ldd	r31, Y+1	; 0x01
     e5c:	21 10       	cpse	r2, r1
     e5e:	6f c0       	rjmp	.+222    	; 0xf3e <qtm_key_sensors_process+0x4e0>
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	6e c0       	rjmp	.+220    	; 0xf42 <qtm_key_sensors_process+0x4e4>
     e66:	ea 81       	ldd	r30, Y+2	; 0x02
     e68:	fb 81       	ldd	r31, Y+3	; 0x03
     e6a:	81 85       	ldd	r24, Z+9	; 0x09
     e6c:	88 23       	and	r24, r24
     e6e:	a1 f3       	breq	.-24     	; 0xe58 <qtm_key_sensors_process+0x3fa>
     e70:	e8 81       	ld	r30, Y
     e72:	f9 81       	ldd	r31, Y+1	; 0x01
     e74:	80 81       	ld	r24, Z
     e76:	80 68       	ori	r24, 0x80	; 128
     e78:	80 83       	st	Z, r24
     e7a:	ea 81       	ldd	r30, Y+2	; 0x02
     e7c:	fb 81       	ldd	r31, Y+3	; 0x03
     e7e:	81 85       	ldd	r24, Z+9	; 0x09
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	51 f7       	brne	.-44     	; 0xe58 <qtm_key_sensors_process+0x3fa>
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	96 e0       	ldi	r25, 0x06	; 6
     e8e:	d9 2e       	mov	r13, r25
     e90:	ea 81       	ldd	r30, Y+2	; 0x02
     e92:	fb 81       	ldd	r31, Y+3	; 0x03
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	26 17       	cp	r18, r22
     e9a:	37 07       	cpc	r19, r23
     e9c:	e8 f6       	brcc	.-70     	; 0xe58 <qtm_key_sensors_process+0x3fa>
     e9e:	0c 81       	ldd	r16, Y+4	; 0x04
     ea0:	1d 81       	ldd	r17, Y+5	; 0x05
     ea2:	fa 01       	movw	r30, r20
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	e0 0f       	add	r30, r16
     eaa:	f1 1f       	adc	r31, r17
     eac:	80 81       	ld	r24, Z
     eae:	98 2f       	mov	r25, r24
     eb0:	97 7f       	andi	r25, 0xF7	; 247
     eb2:	a1 f1       	breq	.+104    	; 0xf1c <qtm_key_sensors_process+0x4be>
     eb4:	85 38       	cpi	r24, 0x85	; 133
     eb6:	11 f0       	breq	.+4      	; 0xebc <qtm_key_sensors_process+0x45e>
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	b1 f5       	brne	.+108    	; 0xf28 <qtm_key_sensors_process+0x4ca>
     ebc:	ee 80       	ldd	r14, Y+6	; 0x06
     ebe:	ff 80       	ldd	r15, Y+7	; 0x07
     ec0:	d7 01       	movw	r26, r14
     ec2:	a4 0f       	add	r26, r20
     ec4:	b5 1f       	adc	r27, r21
     ec6:	12 96       	adiw	r26, 0x02	; 2
     ec8:	bc 90       	ld	r11, X
     eca:	bb 20       	and	r11, r11
     ecc:	39 f1       	breq	.+78     	; 0xf1c <qtm_key_sensors_process+0x4be>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	c1 2c       	mov	r12, r1
     ed4:	86 17       	cp	r24, r22
     ed6:	97 07       	cpc	r25, r23
     ed8:	f8 f4       	brcc	.+62     	; 0xf18 <qtm_key_sensors_process+0x4ba>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	d1 f0       	breq	.+52     	; 0xf14 <qtm_key_sensors_process+0x4b6>
     ee0:	d8 9e       	mul	r13, r24
     ee2:	d0 01       	movw	r26, r0
     ee4:	d9 9e       	mul	r13, r25
     ee6:	b0 0d       	add	r27, r0
     ee8:	11 24       	eor	r1, r1
     eea:	a0 0f       	add	r26, r16
     eec:	b1 1f       	adc	r27, r17
     eee:	ac 91       	ld	r26, X
     ef0:	a4 30       	cpi	r26, 0x04	; 4
     ef2:	11 f0       	breq	.+4      	; 0xef8 <qtm_key_sensors_process+0x49a>
     ef4:	a6 38       	cpi	r26, 0x86	; 134
     ef6:	71 f4       	brne	.+28     	; 0xf14 <qtm_key_sensors_process+0x4b6>
     ef8:	dc 01       	movw	r26, r24
     efa:	aa 0f       	add	r26, r26
     efc:	bb 1f       	adc	r27, r27
     efe:	a8 0f       	add	r26, r24
     f00:	b9 1f       	adc	r27, r25
     f02:	ae 0d       	add	r26, r14
     f04:	bf 1d       	adc	r27, r15
     f06:	12 96       	adiw	r26, 0x02	; 2
     f08:	ac 91       	ld	r26, X
     f0a:	ba 12       	cpse	r11, r26
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <qtm_key_sensors_process+0x4b6>
     f0e:	cb 01       	movw	r24, r22
     f10:	cc 24       	eor	r12, r12
     f12:	c3 94       	inc	r12
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	de cf       	rjmp	.-68     	; 0xed4 <qtm_key_sensors_process+0x476>
     f18:	c1 10       	cpse	r12, r1
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <qtm_key_sensors_process+0x4ca>
     f1c:	02 80       	ldd	r0, Z+2	; 0x02
     f1e:	f3 81       	ldd	r31, Z+3	; 0x03
     f20:	e0 2d       	mov	r30, r0
     f22:	80 81       	ld	r24, Z
     f24:	8e 7f       	andi	r24, 0xFE	; 254
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <qtm_key_sensors_process+0x4d4>
     f28:	02 80       	ldd	r0, Z+2	; 0x02
     f2a:	f3 81       	ldd	r31, Z+3	; 0x03
     f2c:	e0 2d       	mov	r30, r0
     f2e:	80 81       	ld	r24, Z
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	80 83       	st	Z, r24
     f34:	2f 5f       	subi	r18, 0xFF	; 255
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	4d 5f       	subi	r20, 0xFD	; 253
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	a9 cf       	rjmp	.-174    	; 0xe90 <qtm_key_sensors_process+0x432>
     f3e:	80 81       	ld	r24, Z
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	80 83       	st	Z, r24
     f44:	80 91 66 3e 	lds	r24, 0x3E66	; 0x803e66 <qtm_local_ms_timecount>
     f48:	90 91 67 3e 	lds	r25, 0x3E67	; 0x803e67 <qtm_local_ms_timecount+0x1>
     f4c:	e8 81       	ld	r30, Y
     f4e:	f9 81       	ldd	r31, Y+1	; 0x01
     f50:	21 81       	ldd	r18, Z+1	; 0x01
     f52:	32 81       	ldd	r19, Z+2	; 0x02
     f54:	a9 01       	movw	r20, r18
     f56:	48 53       	subi	r20, 0x38	; 56
     f58:	5f 4f       	sbci	r21, 0xFF	; 255
     f5a:	48 17       	cp	r20, r24
     f5c:	59 07       	cpc	r21, r25
     f5e:	38 f4       	brcc	.+14     	; 0xf6e <qtm_key_sensors_process+0x510>
     f60:	82 1b       	sub	r24, r18
     f62:	93 0b       	sbc	r25, r19
     f64:	aa 24       	eor	r10, r10
     f66:	a3 94       	inc	r10
     f68:	a3 e0       	ldi	r26, 0x03	; 3
     f6a:	ba 2e       	mov	r11, r26
     f6c:	44 c0       	rjmp	.+136    	; 0xff6 <qtm_key_sensors_process+0x598>
     f6e:	82 17       	cp	r24, r18
     f70:	93 07       	cpc	r25, r19
     f72:	10 f0       	brcs	.+4      	; 0xf78 <qtm_key_sensors_process+0x51a>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	04 c1       	rjmp	.+520    	; 0x1180 <qtm_key_sensors_process+0x722>
     f78:	82 1b       	sub	r24, r18
     f7a:	93 0b       	sbc	r25, r19
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	89 3c       	cpi	r24, 0xC9	; 201
     f80:	91 05       	cpc	r25, r1
     f82:	c0 f3       	brcs	.-16     	; 0xf74 <qtm_key_sensors_process+0x516>
     f84:	ef cf       	rjmp	.-34     	; 0xf64 <qtm_key_sensors_process+0x506>
     f86:	88 5c       	subi	r24, 0xC8	; 200
     f88:	91 09       	sbc	r25, r1
     f8a:	e8 81       	ld	r30, Y
     f8c:	f9 81       	ldd	r31, Y+1	; 0x01
     f8e:	21 81       	ldd	r18, Z+1	; 0x01
     f90:	32 81       	ldd	r19, Z+2	; 0x02
     f92:	28 53       	subi	r18, 0x38	; 56
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	21 83       	std	Z+1, r18	; 0x01
     f98:	32 83       	std	Z+2, r19	; 0x02
     f9a:	23 81       	ldd	r18, Z+3	; 0x03
     f9c:	21 11       	cpse	r18, r1
     f9e:	96 c0       	rjmp	.+300    	; 0x10cc <qtm_key_sensors_process+0x66e>
     fa0:	24 81       	ldd	r18, Z+4	; 0x04
     fa2:	22 23       	and	r18, r18
     fa4:	11 f0       	breq	.+4      	; 0xfaa <qtm_key_sensors_process+0x54c>
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	24 83       	std	Z+4, r18	; 0x04
     faa:	e8 81       	ld	r30, Y
     fac:	f9 81       	ldd	r31, Y+1	; 0x01
     fae:	25 81       	ldd	r18, Z+5	; 0x05
     fb0:	22 23       	and	r18, r18
     fb2:	11 f0       	breq	.+4      	; 0xfb8 <qtm_key_sensors_process+0x55a>
     fb4:	21 50       	subi	r18, 0x01	; 1
     fb6:	25 83       	std	Z+5, r18	; 0x05
     fb8:	8a 80       	ldd	r8, Y+2	; 0x02
     fba:	9b 80       	ldd	r9, Y+3	; 0x03
     fbc:	d4 01       	movw	r26, r8
     fbe:	16 96       	adiw	r26, 0x06	; 6
     fc0:	2c 91       	ld	r18, X
     fc2:	16 97       	sbiw	r26, 0x06	; 6
     fc4:	21 11       	cpse	r18, r1
     fc6:	1b c0       	rjmp	.+54     	; 0xffe <qtm_key_sensors_process+0x5a0>
     fc8:	8a 80       	ldd	r8, Y+2	; 0x02
     fca:	9b 80       	ldd	r9, Y+3	; 0x03
     fcc:	f4 01       	movw	r30, r8
     fce:	27 81       	ldd	r18, Z+7	; 0x07
     fd0:	21 11       	cpse	r18, r1
     fd2:	48 c0       	rjmp	.+144    	; 0x1064 <qtm_key_sensors_process+0x606>
     fd4:	ea 81       	ldd	r30, Y+2	; 0x02
     fd6:	fb 81       	ldd	r31, Y+3	; 0x03
     fd8:	23 81       	ldd	r18, Z+3	; 0x03
     fda:	22 23       	and	r18, r18
     fdc:	61 f0       	breq	.+24     	; 0xff6 <qtm_key_sensors_process+0x598>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ea 81       	ldd	r30, Y+2	; 0x02
     fe8:	fb 81       	ldd	r31, Y+3	; 0x03
     fea:	40 81       	ld	r20, Z
     fec:	51 81       	ldd	r21, Z+1	; 0x01
     fee:	a4 17       	cp	r26, r20
     ff0:	b5 07       	cpc	r27, r21
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <qtm_key_sensors_process+0x598>
     ff4:	6e c0       	rjmp	.+220    	; 0x10d2 <qtm_key_sensors_process+0x674>
     ff6:	89 3c       	cpi	r24, 0xC9	; 201
     ff8:	91 05       	cpc	r25, r1
     ffa:	28 f6       	brcc	.-118    	; 0xf86 <qtm_key_sensors_process+0x528>
     ffc:	bb cf       	rjmp	.-138    	; 0xf74 <qtm_key_sensors_process+0x516>
     ffe:	08 81       	ld	r16, Y
    1000:	19 81       	ldd	r17, Y+1	; 0x01
    1002:	f8 01       	movw	r30, r16
    1004:	24 81       	ldd	r18, Z+4	; 0x04
    1006:	21 11       	cpse	r18, r1
    1008:	df cf       	rjmp	.-66     	; 0xfc8 <qtm_key_sensors_process+0x56a>
    100a:	ed 90       	ld	r14, X+
    100c:	fc 90       	ld	r15, X
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	4e 15       	cp	r20, r14
    1018:	5f 05       	cpc	r21, r15
    101a:	f1 f0       	breq	.+60     	; 0x1058 <qtm_key_sensors_process+0x5fa>
    101c:	ec 81       	ldd	r30, Y+4	; 0x04
    101e:	fd 81       	ldd	r31, Y+5	; 0x05
    1020:	e6 0f       	add	r30, r22
    1022:	f7 1f       	adc	r31, r23
    1024:	20 81       	ld	r18, Z
    1026:	23 30       	cpi	r18, 0x03	; 3
    1028:	11 f0       	breq	.+4      	; 0x102e <qtm_key_sensors_process+0x5d0>
    102a:	28 30       	cpi	r18, 0x08	; 8
    102c:	81 f4       	brne	.+32     	; 0x104e <qtm_key_sensors_process+0x5f0>
    102e:	24 81       	ldd	r18, Z+4	; 0x04
    1030:	35 81       	ldd	r19, Z+5	; 0x05
    1032:	c2 80       	ldd	r12, Z+2	; 0x02
    1034:	d3 80       	ldd	r13, Z+3	; 0x03
    1036:	d6 01       	movw	r26, r12
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	cd 90       	ld	r12, X+
    103c:	dc 90       	ld	r13, X
    103e:	12 97       	sbiw	r26, 0x02	; 2
    1040:	2c 15       	cp	r18, r12
    1042:	3d 05       	cpc	r19, r13
    1044:	20 f4       	brcc	.+8      	; 0x104e <qtm_key_sensors_process+0x5f0>
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	24 83       	std	Z+4, r18	; 0x04
    104c:	35 83       	std	Z+5, r19	; 0x05
    104e:	4f 5f       	subi	r20, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	6a 5f       	subi	r22, 0xFA	; 250
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	df cf       	rjmp	.-66     	; 0x1016 <qtm_key_sensors_process+0x5b8>
    1058:	f4 01       	movw	r30, r8
    105a:	26 81       	ldd	r18, Z+6	; 0x06
    105c:	d8 01       	movw	r26, r16
    105e:	14 96       	adiw	r26, 0x04	; 4
    1060:	2c 93       	st	X, r18
    1062:	b2 cf       	rjmp	.-156    	; 0xfc8 <qtm_key_sensors_process+0x56a>
    1064:	08 81       	ld	r16, Y
    1066:	19 81       	ldd	r17, Y+1	; 0x01
    1068:	d8 01       	movw	r26, r16
    106a:	15 96       	adiw	r26, 0x05	; 5
    106c:	2c 91       	ld	r18, X
    106e:	21 11       	cpse	r18, r1
    1070:	b1 cf       	rjmp	.-158    	; 0xfd4 <qtm_key_sensors_process+0x576>
    1072:	e0 80       	ld	r14, Z
    1074:	f1 80       	ldd	r15, Z+1	; 0x01
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	4e 15       	cp	r20, r14
    1080:	5f 05       	cpc	r21, r15
    1082:	f1 f0       	breq	.+60     	; 0x10c0 <qtm_key_sensors_process+0x662>
    1084:	ec 81       	ldd	r30, Y+4	; 0x04
    1086:	fd 81       	ldd	r31, Y+5	; 0x05
    1088:	e6 0f       	add	r30, r22
    108a:	f7 1f       	adc	r31, r23
    108c:	20 81       	ld	r18, Z
    108e:	23 30       	cpi	r18, 0x03	; 3
    1090:	11 f0       	breq	.+4      	; 0x1096 <qtm_key_sensors_process+0x638>
    1092:	28 30       	cpi	r18, 0x08	; 8
    1094:	81 f4       	brne	.+32     	; 0x10b6 <qtm_key_sensors_process+0x658>
    1096:	24 81       	ldd	r18, Z+4	; 0x04
    1098:	35 81       	ldd	r19, Z+5	; 0x05
    109a:	c2 80       	ldd	r12, Z+2	; 0x02
    109c:	d3 80       	ldd	r13, Z+3	; 0x03
    109e:	d6 01       	movw	r26, r12
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	cd 90       	ld	r12, X+
    10a4:	dc 90       	ld	r13, X
    10a6:	12 97       	sbiw	r26, 0x02	; 2
    10a8:	c2 16       	cp	r12, r18
    10aa:	d3 06       	cpc	r13, r19
    10ac:	20 f4       	brcc	.+8      	; 0x10b6 <qtm_key_sensors_process+0x658>
    10ae:	21 50       	subi	r18, 0x01	; 1
    10b0:	31 09       	sbc	r19, r1
    10b2:	24 83       	std	Z+4, r18	; 0x04
    10b4:	35 83       	std	Z+5, r19	; 0x05
    10b6:	4f 5f       	subi	r20, 0xFF	; 255
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ba:	6a 5f       	subi	r22, 0xFA	; 250
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	df cf       	rjmp	.-66     	; 0x107e <qtm_key_sensors_process+0x620>
    10c0:	f4 01       	movw	r30, r8
    10c2:	27 81       	ldd	r18, Z+7	; 0x07
    10c4:	d8 01       	movw	r26, r16
    10c6:	15 96       	adiw	r26, 0x05	; 5
    10c8:	2c 93       	st	X, r18
    10ca:	84 cf       	rjmp	.-248    	; 0xfd4 <qtm_key_sensors_process+0x576>
    10cc:	21 50       	subi	r18, 0x01	; 1
    10ce:	23 83       	std	Z+3, r18	; 0x03
    10d0:	81 cf       	rjmp	.-254    	; 0xfd4 <qtm_key_sensors_process+0x576>
    10d2:	a9 01       	movw	r20, r18
    10d4:	44 0f       	add	r20, r20
    10d6:	55 1f       	adc	r21, r21
    10d8:	ec 81       	ldd	r30, Y+4	; 0x04
    10da:	fd 81       	ldd	r31, Y+5	; 0x05
    10dc:	e4 0f       	add	r30, r20
    10de:	f5 1f       	adc	r31, r21
    10e0:	60 81       	ld	r22, Z
    10e2:	65 38       	cpi	r22, 0x85	; 133
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <qtm_key_sensors_process+0x68a>
    10e6:	47 c0       	rjmp	.+142    	; 0x1176 <qtm_key_sensors_process+0x718>
    10e8:	61 81       	ldd	r22, Z+1	; 0x01
    10ea:	66 23       	and	r22, r22
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <qtm_key_sensors_process+0x696>
    10ee:	61 50       	subi	r22, 0x01	; 1
    10f0:	61 83       	std	Z+1, r22	; 0x01
    10f2:	41 c0       	rjmp	.+130    	; 0x1176 <qtm_key_sensors_process+0x718>
    10f4:	a0 82       	st	Z, r10
    10f6:	6c 81       	ldd	r22, Y+4	; 0x04
    10f8:	7d 81       	ldd	r23, Y+5	; 0x05
    10fa:	fb 01       	movw	r30, r22
    10fc:	e4 0f       	add	r30, r20
    10fe:	f5 1f       	adc	r31, r21
    1100:	02 80       	ldd	r0, Z+2	; 0x02
    1102:	f3 81       	ldd	r31, Z+3	; 0x03
    1104:	e0 2d       	mov	r30, r0
    1106:	b0 82       	st	Z, r11
    1108:	ee 81       	ldd	r30, Y+6	; 0x06
    110a:	ff 81       	ldd	r31, Y+7	; 0x07
    110c:	e2 0f       	add	r30, r18
    110e:	f3 1f       	adc	r31, r19
    1110:	d2 80       	ldd	r13, Z+2	; 0x02
    1112:	dd 20       	and	r13, r13
    1114:	81 f1       	breq	.+96     	; 0x1176 <qtm_key_sensors_process+0x718>
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	00 e0       	ldi	r16, 0x00	; 0
    111c:	10 e0       	ldi	r17, 0x00	; 0
    111e:	ea 81       	ldd	r30, Y+2	; 0x02
    1120:	fb 81       	ldd	r31, Y+3	; 0x03
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	06 17       	cp	r16, r22
    1128:	17 07       	cpc	r17, r23
    112a:	28 f5       	brcc	.+74     	; 0x1176 <qtm_key_sensors_process+0x718>
    112c:	ee 81       	ldd	r30, Y+6	; 0x06
    112e:	ff 81       	ldd	r31, Y+7	; 0x07
    1130:	e4 0f       	add	r30, r20
    1132:	f5 1f       	adc	r31, r21
    1134:	62 81       	ldd	r22, Z+2	; 0x02
    1136:	d6 12       	cpse	r13, r22
    1138:	19 c0       	rjmp	.+50     	; 0x116c <qtm_key_sensors_process+0x70e>
    113a:	ba 01       	movw	r22, r20
    113c:	66 0f       	add	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	ec 81       	ldd	r30, Y+4	; 0x04
    1142:	fd 81       	ldd	r31, Y+5	; 0x05
    1144:	4f 01       	movw	r8, r30
    1146:	86 0e       	add	r8, r22
    1148:	97 1e       	adc	r9, r23
    114a:	f4 01       	movw	r30, r8
    114c:	e2 80       	ldd	r14, Z+2	; 0x02
    114e:	f3 80       	ldd	r15, Z+3	; 0x03
    1150:	f7 01       	movw	r30, r14
    1152:	f0 80       	ld	r15, Z
    1154:	f0 fe       	sbrs	r15, 0
    1156:	0a c0       	rjmp	.+20     	; 0x116c <qtm_key_sensors_process+0x70e>
    1158:	f4 01       	movw	r30, r8
    115a:	a0 82       	st	Z, r10
    115c:	ec 81       	ldd	r30, Y+4	; 0x04
    115e:	fd 81       	ldd	r31, Y+5	; 0x05
    1160:	e6 0f       	add	r30, r22
    1162:	f7 1f       	adc	r31, r23
    1164:	02 80       	ldd	r0, Z+2	; 0x02
    1166:	f3 81       	ldd	r31, Z+3	; 0x03
    1168:	e0 2d       	mov	r30, r0
    116a:	b0 82       	st	Z, r11
    116c:	0f 5f       	subi	r16, 0xFF	; 255
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	4d 5f       	subi	r20, 0xFD	; 253
    1172:	5f 4f       	sbci	r21, 0xFF	; 255
    1174:	d4 cf       	rjmp	.-88     	; 0x111e <qtm_key_sensors_process+0x6c0>
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	2d 5f       	subi	r18, 0xFD	; 253
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	34 cf       	rjmp	.-408    	; 0xfe6 <qtm_key_sensors_process+0x588>
    117e:	8b e0       	ldi	r24, 0x0B	; 11
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	9f 90       	pop	r9
    1196:	8f 90       	pop	r8
    1198:	7f 90       	pop	r7
    119a:	6f 90       	pop	r6
    119c:	5f 90       	pop	r5
    119e:	4f 90       	pop	r4
    11a0:	3f 90       	pop	r3
    11a2:	2f 90       	pop	r2
    11a4:	08 95       	ret

000011a6 <qtm_error_handler>:
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	90 93 6a 3e 	sts	0x3E6A, r25	; 0x803e6a <qtm_state>
    11ac:	e0 91 a2 3e 	lds	r30, 0x3EA2	; 0x803ea2 <qtm>
    11b0:	f0 91 a3 3e 	lds	r31, 0x3EA3	; 0x803ea3 <qtm+0x1>
    11b4:	01 88       	ldd	r0, Z+17	; 0x11
    11b6:	f2 89       	ldd	r31, Z+18	; 0x12
    11b8:	e0 2d       	mov	r30, r0
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <qtm_error_handler+0x1a>
    11be:	09 94       	ijmp
    11c0:	ff cf       	rjmp	.-2      	; 0x11c0 <qtm_error_handler+0x1a>

000011c2 <generic_callback_function>:
    11c2:	e0 91 a2 3e 	lds	r30, 0x3EA2	; 0x803ea2 <qtm>
    11c6:	f0 91 a3 3e 	lds	r31, 0x3EA3	; 0x803ea3 <qtm+0x1>
    11ca:	03 88       	ldd	r0, Z+19	; 0x13
    11cc:	f4 89       	ldd	r31, Z+20	; 0x14
    11ce:	e0 2d       	mov	r30, r0
    11d0:	30 97       	sbiw	r30, 0x00	; 0
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <generic_callback_function+0x14>
    11d4:	09 94       	ijmp
    11d6:	80 e4       	ldi	r24, 0x40	; 64
    11d8:	e6 cf       	rjmp	.-52     	; 0x11a6 <qtm_error_handler>

000011da <qmt_get_binding_layer_ptr>:
    11da:	80 91 a2 3e 	lds	r24, 0x3EA2	; 0x803ea2 <qtm>
    11de:	90 91 a3 3e 	lds	r25, 0x3EA3	; 0x803ea3 <qtm+0x1>
    11e2:	08 95       	ret

000011e4 <qtm_binding_layer_init>:
    11e4:	cf 93       	push	r28
    11e6:	80 93 a2 3e 	sts	0x3EA2, r24	; 0x803ea2 <qtm>
    11ea:	90 93 a3 3e 	sts	0x3EA3, r25	; 0x803ea3 <qtm+0x1>
    11ee:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <qtm_state>
    11f2:	85 30       	cpi	r24, 0x05	; 5
    11f4:	39 f0       	breq	.+14     	; 0x1204 <qtm_binding_layer_init+0x20>
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	28 f0       	brcs	.+10     	; 0x1204 <qtm_binding_layer_init+0x20>
    11fa:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    11fe:	88 23       	and	r24, r24
    1200:	71 f1       	breq	.+92     	; 0x125e <qtm_binding_layer_init+0x7a>
    1202:	40 c0       	rjmp	.+128    	; 0x1284 <qtm_binding_layer_init+0xa0>
    1204:	10 92 68 3e 	sts	0x3E68, r1	; 0x803e68 <errors>
    1208:	c0 e0       	ldi	r28, 0x00	; 0
    120a:	a0 91 a2 3e 	lds	r26, 0x3EA2	; 0x803ea2 <qtm>
    120e:	b0 91 a3 3e 	lds	r27, 0x3EA3	; 0x803ea3 <qtm+0x1>
    1212:	8c 2f       	mov	r24, r28
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	11 96       	adiw	r26, 0x01	; 1
    121c:	ed 91       	ld	r30, X+
    121e:	fc 91       	ld	r31, X
    1220:	12 97       	sbiw	r26, 0x02	; 2
    1222:	e8 0f       	add	r30, r24
    1224:	f9 1f       	adc	r31, r25
    1226:	01 90       	ld	r0, Z+
    1228:	f0 81       	ld	r31, Z
    122a:	e0 2d       	mov	r30, r0
    122c:	30 97       	sbiw	r30, 0x00	; 0
    122e:	29 f3       	breq	.-54     	; 0x11fa <qtm_binding_layer_init+0x16>
    1230:	17 96       	adiw	r26, 0x07	; 7
    1232:	2d 91       	ld	r18, X+
    1234:	3c 91       	ld	r19, X
    1236:	18 97       	sbiw	r26, 0x08	; 8
    1238:	d9 01       	movw	r26, r18
    123a:	a8 0f       	add	r26, r24
    123c:	b9 1f       	adc	r27, r25
    123e:	8d 91       	ld	r24, X+
    1240:	9c 91       	ld	r25, X
    1242:	09 95       	icall
    1244:	88 23       	and	r24, r24
    1246:	29 f0       	breq	.+10     	; 0x1252 <qtm_binding_layer_init+0x6e>
    1248:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <errors>
    1252:	cf 5f       	subi	r28, 0xFF	; 255
    1254:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    1258:	88 23       	and	r24, r24
    125a:	b9 f2       	breq	.-82     	; 0x120a <qtm_binding_layer_init+0x26>
    125c:	ce cf       	rjmp	.-100    	; 0x11fa <qtm_binding_layer_init+0x16>
    125e:	82 e0       	ldi	r24, 0x02	; 2
    1260:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    1264:	e0 91 a2 3e 	lds	r30, 0x3EA2	; 0x803ea2 <qtm>
    1268:	f0 91 a3 3e 	lds	r31, 0x3EA3	; 0x803ea3 <qtm+0x1>
    126c:	07 84       	ldd	r0, Z+15	; 0x0f
    126e:	f0 89       	ldd	r31, Z+16	; 0x10
    1270:	e0 2d       	mov	r30, r0
    1272:	30 97       	sbiw	r30, 0x00	; 0
    1274:	11 f0       	breq	.+4      	; 0x127a <qtm_binding_layer_init+0x96>
    1276:	09 95       	icall
    1278:	08 c0       	rjmp	.+16     	; 0x128a <qtm_binding_layer_init+0xa6>
    127a:	85 e0       	ldi	r24, 0x05	; 5
    127c:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <qtm_binding_layer_init+0xa2>
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <errors>
    128a:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    128e:	88 23       	and	r24, r24
    1290:	29 f0       	breq	.+10     	; 0x129c <qtm_binding_layer_init+0xb8>
    1292:	10 92 68 3e 	sts	0x3E68, r1	; 0x803e68 <errors>
    1296:	80 e8       	ldi	r24, 0x80	; 128
    1298:	cf 91       	pop	r28
    129a:	85 cf       	rjmp	.-246    	; 0x11a6 <qtm_error_handler>
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <qtm_lib_start_acquisition>:
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	18 2f       	mov	r17, r24
    12a8:	a0 91 a2 3e 	lds	r26, 0x3EA2	; 0x803ea2 <qtm>
    12ac:	b0 91 a3 3e 	lds	r27, 0x3EA3	; 0x803ea3 <qtm+0x1>
    12b0:	15 96       	adiw	r26, 0x05	; 5
    12b2:	2d 91       	ld	r18, X+
    12b4:	3c 91       	ld	r19, X
    12b6:	16 97       	sbiw	r26, 0x06	; 6
    12b8:	d0 e0       	ldi	r29, 0x00	; 0
    12ba:	f9 01       	movw	r30, r18
    12bc:	ed 0f       	add	r30, r29
    12be:	f1 1d       	adc	r31, r1
    12c0:	ed 0f       	add	r30, r29
    12c2:	f1 1d       	adc	r31, r1
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	89 2b       	or	r24, r25
    12ca:	11 f0       	breq	.+4      	; 0x12d0 <qtm_lib_start_acquisition+0x30>
    12cc:	df 5f       	subi	r29, 0xFF	; 255
    12ce:	f5 cf       	rjmp	.-22     	; 0x12ba <qtm_lib_start_acquisition+0x1a>
    12d0:	53 96       	adiw	r26, 0x13	; 19
    12d2:	8d 91       	ld	r24, X+
    12d4:	9c 91       	ld	r25, X
    12d6:	54 97       	sbiw	r26, 0x14	; 20
    12d8:	89 2b       	or	r24, r25
    12da:	49 f1       	breq	.+82     	; 0x132e <qtm_lib_start_acquisition+0x8e>
    12dc:	81 2f       	mov	r24, r17
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	f9 01       	movw	r30, r18
    12e6:	e8 0f       	add	r30, r24
    12e8:	f9 1f       	adc	r31, r25
    12ea:	01 90       	ld	r0, Z+
    12ec:	f0 81       	ld	r31, Z
    12ee:	e0 2d       	mov	r30, r0
    12f0:	30 97       	sbiw	r30, 0x00	; 0
    12f2:	e9 f0       	breq	.+58     	; 0x132e <qtm_lib_start_acquisition+0x8e>
    12f4:	1b 96       	adiw	r26, 0x0b	; 11
    12f6:	2d 91       	ld	r18, X+
    12f8:	3c 91       	ld	r19, X
    12fa:	1c 97       	sbiw	r26, 0x0c	; 12
    12fc:	d9 01       	movw	r26, r18
    12fe:	a8 0f       	add	r26, r24
    1300:	b9 1f       	adc	r27, r25
    1302:	8d 91       	ld	r24, X+
    1304:	9c 91       	ld	r25, X
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	91 f0       	breq	.+36     	; 0x132e <qtm_lib_start_acquisition+0x8e>
    130a:	61 ee       	ldi	r22, 0xE1	; 225
    130c:	78 e0       	ldi	r23, 0x08	; 8
    130e:	09 95       	icall
    1310:	c8 2f       	mov	r28, r24
    1312:	81 11       	cpse	r24, r1
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <qtm_lib_start_acquisition+0x82>
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    131c:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <current_process_id>
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <qtm_lib_start_acquisition+0x88>
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    1328:	1d 17       	cp	r17, r29
    132a:	20 f0       	brcs	.+8      	; 0x1334 <qtm_lib_start_acquisition+0x94>
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <qtm_lib_start_acquisition+0x90>
    132e:	c2 e0       	ldi	r28, 0x02	; 2
    1330:	82 e8       	ldi	r24, 0x82	; 130
    1332:	39 df       	rcall	.-398    	; 0x11a6 <qtm_error_handler>
    1334:	8c 2f       	mov	r24, r28
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	08 95       	ret

0000133e <qtm_lib_acq_process>:
    133e:	e0 91 a2 3e 	lds	r30, 0x3EA2	; 0x803ea2 <qtm>
    1342:	f0 91 a3 3e 	lds	r31, 0x3EA3	; 0x803ea3 <qtm+0x1>
    1346:	05 84       	ldd	r0, Z+13	; 0x0d
    1348:	f6 85       	ldd	r31, Z+14	; 0x0e
    134a:	e0 2d       	mov	r30, r0
    134c:	09 94       	ijmp

0000134e <qtm_lib_post_process>:
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	1f 92       	push	r1
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	e0 91 a2 3e 	lds	r30, 0x3EA2	; 0x803ea2 <qtm>
    1360:	f0 91 a3 3e 	lds	r31, 0x3EA3	; 0x803ea3 <qtm+0x1>
    1364:	05 88       	ldd	r0, Z+21	; 0x15
    1366:	f6 89       	ldd	r31, Z+22	; 0x16
    1368:	e0 2d       	mov	r30, r0
    136a:	30 97       	sbiw	r30, 0x00	; 0
    136c:	49 f0       	breq	.+18     	; 0x1380 <qtm_lib_post_process+0x32>
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    1374:	ce 01       	movw	r24, r28
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	09 95       	icall
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    1380:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    1384:	81 11       	cpse	r24, r1
    1386:	2c c0       	rjmp	.+88     	; 0x13e0 <qtm_lib_post_process+0x92>
    1388:	19 81       	ldd	r17, Y+1	; 0x01
    138a:	11 11       	cpse	r17, r1
    138c:	29 c0       	rjmp	.+82     	; 0x13e0 <qtm_lib_post_process+0x92>
    138e:	84 e0       	ldi	r24, 0x04	; 4
    1390:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    1394:	a0 91 a2 3e 	lds	r26, 0x3EA2	; 0x803ea2 <qtm>
    1398:	b0 91 a3 3e 	lds	r27, 0x3EA3	; 0x803ea3 <qtm+0x1>
    139c:	80 91 69 3e 	lds	r24, 0x3E69	; 0x803e69 <current_process_id>
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	13 96       	adiw	r26, 0x03	; 3
    13a8:	ed 91       	ld	r30, X+
    13aa:	fc 91       	ld	r31, X
    13ac:	14 97       	sbiw	r26, 0x04	; 4
    13ae:	e8 0f       	add	r30, r24
    13b0:	f9 1f       	adc	r31, r25
    13b2:	01 90       	ld	r0, Z+
    13b4:	f0 81       	ld	r31, Z
    13b6:	e0 2d       	mov	r30, r0
    13b8:	19 96       	adiw	r26, 0x09	; 9
    13ba:	2d 91       	ld	r18, X+
    13bc:	3c 91       	ld	r19, X
    13be:	1a 97       	sbiw	r26, 0x0a	; 10
    13c0:	30 97       	sbiw	r30, 0x00	; 0
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <qtm_lib_post_process+0x96>
    13c4:	d9 01       	movw	r26, r18
    13c6:	a8 0f       	add	r26, r24
    13c8:	b9 1f       	adc	r27, r25
    13ca:	8d 91       	ld	r24, X+
    13cc:	9c 91       	ld	r25, X
    13ce:	09 95       	icall
    13d0:	81 11       	cpse	r24, r1
    13d2:	3d c0       	rjmp	.+122    	; 0x144e <qtm_lib_post_process+0x100>
    13d4:	80 91 69 3e 	lds	r24, 0x3E69	; 0x803e69 <current_process_id>
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	80 93 69 3e 	sts	0x3E69, r24	; 0x803e69 <current_process_id>
    13de:	da cf       	rjmp	.-76     	; 0x1394 <qtm_lib_post_process+0x46>
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	3c c0       	rjmp	.+120    	; 0x145c <qtm_lib_post_process+0x10e>
    13e4:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <current_process_id>
    13e8:	f9 01       	movw	r30, r18
    13ea:	e1 0f       	add	r30, r17
    13ec:	f1 1d       	adc	r31, r1
    13ee:	e1 0f       	add	r30, r17
    13f0:	f1 1d       	adc	r31, r1
    13f2:	01 90       	ld	r0, Z+
    13f4:	f0 81       	ld	r31, Z
    13f6:	e0 2d       	mov	r30, r0
    13f8:	30 97       	sbiw	r30, 0x00	; 0
    13fa:	59 f0       	breq	.+22     	; 0x1412 <qtm_lib_post_process+0xc4>
    13fc:	01 90       	ld	r0, Z+
    13fe:	f0 81       	ld	r31, Z
    1400:	e0 2d       	mov	r30, r0
    1402:	80 81       	ld	r24, Z
    1404:	87 ff       	sbrs	r24, 7
    1406:	03 c0       	rjmp	.+6      	; 0x140e <qtm_lib_post_process+0xc0>
    1408:	9c 91       	ld	r25, X
    140a:	94 60       	ori	r25, 0x04	; 4
    140c:	9c 93       	st	X, r25
    140e:	1f 5f       	subi	r17, 0xFF	; 255
    1410:	eb cf       	rjmp	.-42     	; 0x13e8 <qtm_lib_post_process+0x9a>
    1412:	10 93 69 3e 	sts	0x3E69, r17	; 0x803e69 <current_process_id>
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <qtm_state>
    141c:	57 96       	adiw	r26, 0x17	; 23
    141e:	ed 91       	ld	r30, X+
    1420:	fc 91       	ld	r31, X
    1422:	58 97       	sbiw	r26, 0x18	; 24
    1424:	30 97       	sbiw	r30, 0x00	; 0
    1426:	11 f0       	breq	.+4      	; 0x142c <qtm_lib_post_process+0xde>
    1428:	09 95       	icall
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <qtm_lib_post_process+0xe8>
    142c:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <errors>
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    143c:	88 23       	and	r24, r24
    143e:	71 f0       	breq	.+28     	; 0x145c <qtm_lib_post_process+0x10e>
    1440:	10 92 68 3e 	sts	0x3E68, r1	; 0x803e68 <errors>
    1444:	80 91 69 3e 	lds	r24, 0x3E69	; 0x803e69 <current_process_id>
    1448:	80 64       	ori	r24, 0x40	; 64
    144a:	ad de       	rcall	.-678    	; 0x11a6 <qtm_error_handler>
    144c:	07 c0       	rjmp	.+14     	; 0x145c <qtm_lib_post_process+0x10e>
    144e:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <errors>
    1452:	8f 5f       	subi	r24, 0xFF	; 255
    1454:	80 93 68 3e 	sts	0x3E68, r24	; 0x803e68 <errors>
    1458:	13 e0       	ldi	r17, 0x03	; 3
    145a:	ee cf       	rjmp	.-36     	; 0x1438 <qtm_lib_post_process+0xea>
    145c:	81 2f       	mov	r24, r17
    145e:	0f 90       	pop	r0
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	08 95       	ret

00001468 <select_next_channel_to_measure>:
    1468:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <current_measure_channel>
    146c:	90 91 6f 3e 	lds	r25, 0x3E6F	; 0x803e6f <current_measure_channel+0x1>
    1470:	a0 91 a4 3e 	lds	r26, 0x3EA4	; 0x803ea4 <qtm_acquisition_control_working_set_ptr>
    1474:	b0 91 a5 3e 	lds	r27, 0x3EA5	; 0x803ea5 <qtm_acquisition_control_working_set_ptr+0x1>
    1478:	ed 91       	ld	r30, X+
    147a:	fc 91       	ld	r31, X
    147c:	11 97       	sbiw	r26, 0x01	; 1
    147e:	40 81       	ld	r20, Z
    1480:	51 81       	ldd	r21, Z+1	; 0x01
    1482:	25 e0       	ldi	r18, 0x05	; 5
    1484:	28 9f       	mul	r18, r24
    1486:	b0 01       	movw	r22, r0
    1488:	29 9f       	mul	r18, r25
    148a:	70 0d       	add	r23, r0
    148c:	11 24       	eor	r1, r1
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	84 17       	cp	r24, r20
    1494:	95 07       	cpc	r25, r21
    1496:	a8 f4       	brcc	.+42     	; 0x14c2 <select_next_channel_to_measure+0x5a>
    1498:	14 96       	adiw	r26, 0x04	; 4
    149a:	ed 91       	ld	r30, X+
    149c:	fc 91       	ld	r31, X
    149e:	15 97       	sbiw	r26, 0x05	; 5
    14a0:	e2 0f       	add	r30, r18
    14a2:	f3 1f       	adc	r31, r19
    14a4:	e6 0f       	add	r30, r22
    14a6:	f7 1f       	adc	r31, r23
    14a8:	e0 81       	ld	r30, Z
    14aa:	2b 5f       	subi	r18, 0xFB	; 251
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
    14ae:	e0 fd       	sbrc	r30, 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <select_next_channel_to_measure+0x4e>
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	ee cf       	rjmp	.-36     	; 0x1492 <select_next_channel_to_measure+0x2a>
    14b6:	80 93 6e 3e 	sts	0x3E6E, r24	; 0x803e6e <current_measure_channel>
    14ba:	90 93 6f 3e 	sts	0x3E6F, r25	; 0x803e6f <current_measure_channel+0x1>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	08 95       	ret
    14c2:	10 92 6e 3e 	sts	0x3E6E, r1	; 0x803e6e <current_measure_channel>
    14c6:	10 92 6f 3e 	sts	0x3E6F, r1	; 0x803e6f <current_measure_channel+0x1>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	08 95       	ret

000014ce <qtm_measure_node>:
    14ce:	bc 01       	movw	r22, r24
    14d0:	e0 91 a4 3e 	lds	r30, 0x3EA4	; 0x803ea4 <qtm_acquisition_control_working_set_ptr>
    14d4:	f0 91 a5 3e 	lds	r31, 0x3EA5	; 0x803ea5 <qtm_acquisition_control_working_set_ptr+0x1>
    14d8:	86 e0       	ldi	r24, 0x06	; 6
    14da:	86 9f       	mul	r24, r22
    14dc:	90 01       	movw	r18, r0
    14de:	87 9f       	mul	r24, r23
    14e0:	30 0d       	add	r19, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	a2 81       	ldd	r26, Z+2	; 0x02
    14e6:	b3 81       	ldd	r27, Z+3	; 0x03
    14e8:	a2 0f       	add	r26, r18
    14ea:	b3 1f       	adc	r27, r19
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	8c 91       	ld	r24, X
    14f0:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
    14f4:	a2 81       	ldd	r26, Z+2	; 0x02
    14f6:	b3 81       	ldd	r27, Z+3	; 0x03
    14f8:	a2 0f       	add	r26, r18
    14fa:	b3 1f       	adc	r27, r19
    14fc:	8c 91       	ld	r24, X
    14fe:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    1502:	95 e0       	ldi	r25, 0x05	; 5
    1504:	96 9f       	mul	r25, r22
    1506:	a0 01       	movw	r20, r0
    1508:	97 9f       	mul	r25, r23
    150a:	50 0d       	add	r21, r0
    150c:	11 24       	eor	r1, r1
    150e:	a4 81       	ldd	r26, Z+4	; 0x04
    1510:	b5 81       	ldd	r27, Z+5	; 0x05
    1512:	a4 0f       	add	r26, r20
    1514:	b5 1f       	adc	r27, r21
    1516:	13 96       	adiw	r26, 0x03	; 3
    1518:	8c 91       	ld	r24, X
    151a:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <__TEXT_REGION_LENGTH__+0x70061a>
    151e:	a4 81       	ldd	r26, Z+4	; 0x04
    1520:	b5 81       	ldd	r27, Z+5	; 0x05
    1522:	a4 0f       	add	r26, r20
    1524:	b5 1f       	adc	r27, r21
    1526:	14 96       	adiw	r26, 0x04	; 4
    1528:	8c 91       	ld	r24, X
    152a:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <__TEXT_REGION_LENGTH__+0x70061b>
    152e:	a4 81       	ldd	r26, Z+4	; 0x04
    1530:	b5 81       	ldd	r27, Z+5	; 0x05
    1532:	a4 0f       	add	r26, r20
    1534:	b5 1f       	adc	r27, r21
    1536:	8c 91       	ld	r24, X
    1538:	81 fd       	sbrc	r24, 1
    153a:	9c 93       	st	X, r25
    153c:	84 81       	ldd	r24, Z+4	; 0x04
    153e:	95 81       	ldd	r25, Z+5	; 0x05
    1540:	dc 01       	movw	r26, r24
    1542:	a4 0f       	add	r26, r20
    1544:	b5 1f       	adc	r27, r21
    1546:	8c 91       	ld	r24, X
    1548:	8c 71       	andi	r24, 0x1C	; 28
    154a:	69 f4       	brne	.+26     	; 0x1566 <qtm_measure_node+0x98>
    154c:	a2 81       	ldd	r26, Z+2	; 0x02
    154e:	b3 81       	ldd	r27, Z+3	; 0x03
    1550:	a2 0f       	add	r26, r18
    1552:	b3 1f       	adc	r27, r19
    1554:	14 96       	adiw	r26, 0x04	; 4
    1556:	ac 91       	ld	r26, X
    1558:	a2 95       	swap	r26
    155a:	af 70       	andi	r26, 0x0F	; 15
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	a4 58       	subi	r26, 0x84	; 132
    1560:	b4 46       	sbci	r27, 0x64	; 100
    1562:	8c 91       	ld	r24, X
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <qtm_measure_node+0x9a>
    1566:	8f e3       	ldi	r24, 0x3F	; 63
    1568:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <__TEXT_REGION_LENGTH__+0x70061c>
    156c:	a2 81       	ldd	r26, Z+2	; 0x02
    156e:	b3 81       	ldd	r27, Z+3	; 0x03
    1570:	a2 0f       	add	r26, r18
    1572:	b3 1f       	adc	r27, r19
    1574:	12 96       	adiw	r26, 0x02	; 2
    1576:	8c 91       	ld	r24, X
    1578:	8b 31       	cpi	r24, 0x1B	; 27
    157a:	10 f4       	brcc	.+4      	; 0x1580 <qtm_measure_node+0xb2>
    157c:	8c 5f       	subi	r24, 0xFC	; 252
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <qtm_measure_node+0xb4>
    1580:	8f e1       	ldi	r24, 0x1F	; 31
    1582:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1586:	a2 81       	ldd	r26, Z+2	; 0x02
    1588:	b3 81       	ldd	r27, Z+3	; 0x03
    158a:	a2 0f       	add	r26, r18
    158c:	b3 1f       	adc	r27, r19
    158e:	15 96       	adiw	r26, 0x05	; 5
    1590:	8c 91       	ld	r24, X
    1592:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    1596:	a2 81       	ldd	r26, Z+2	; 0x02
    1598:	b3 81       	ldd	r27, Z+3	; 0x03
    159a:	a2 0f       	add	r26, r18
    159c:	b3 1f       	adc	r27, r19
    159e:	13 96       	adiw	r26, 0x03	; 3
    15a0:	8c 91       	ld	r24, X
    15a2:	82 95       	swap	r24
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <__TEXT_REGION_LENGTH__+0x700619>
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	fc 01       	movw	r30, r24
    15b0:	e2 0f       	add	r30, r18
    15b2:	f3 1f       	adc	r31, r19
    15b4:	83 81       	ldd	r24, Z+3	; 0x03
    15b6:	8f 70       	andi	r24, 0x0F	; 15
    15b8:	80 61       	ori	r24, 0x10	; 16
    15ba:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    15be:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    15c2:	83 60       	ori	r24, 0x03	; 3
    15c4:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    15c8:	81 e8       	ldi	r24, 0x81	; 129
    15ca:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    15d4:	08 95       	ret

000015d6 <qtm_acquisition_process>:
    15d6:	3f 92       	push	r3
    15d8:	4f 92       	push	r4
    15da:	5f 92       	push	r5
    15dc:	6f 92       	push	r6
    15de:	7f 92       	push	r7
    15e0:	8f 92       	push	r8
    15e2:	9f 92       	push	r9
    15e4:	af 92       	push	r10
    15e6:	bf 92       	push	r11
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <touch_seq_lib_state>
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <qtm_acquisition_process+0x2c>
    1600:	48 c1       	rjmp	.+656    	; 0x1892 <qtm_acquisition_process+0x2bc>
    1602:	a0 91 a4 3e 	lds	r26, 0x3EA4	; 0x803ea4 <qtm_acquisition_control_working_set_ptr>
    1606:	b0 91 a5 3e 	lds	r27, 0x3EA5	; 0x803ea5 <qtm_acquisition_control_working_set_ptr+0x1>
    160a:	c0 90 a6 3e 	lds	r12, 0x3EA6	; 0x803ea6 <qtm_raw_data_measurements_ptr>
    160e:	d0 90 a7 3e 	lds	r13, 0x3EA7	; 0x803ea7 <qtm_raw_data_measurements_ptr+0x1>
    1612:	00 e0       	ldi	r16, 0x00	; 0
    1614:	10 e0       	ldi	r17, 0x00	; 0
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	e1 2c       	mov	r14, r1
    161c:	f1 2c       	mov	r15, r1
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	33 24       	eor	r3, r3
    1622:	33 94       	inc	r3
    1624:	d1 e8       	ldi	r29, 0x81	; 129
    1626:	4d 2e       	mov	r4, r29
    1628:	88 24       	eor	r8, r8
    162a:	8a 94       	dec	r8
    162c:	99 24       	eor	r9, r9
    162e:	93 94       	inc	r9
    1630:	6d 90       	ld	r6, X+
    1632:	7c 90       	ld	r7, X
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	f3 01       	movw	r30, r6
    1638:	20 81       	ld	r18, Z
    163a:	31 81       	ldd	r19, Z+1	; 0x01
    163c:	e2 16       	cp	r14, r18
    163e:	f3 06       	cpc	r15, r19
    1640:	08 f0       	brcs	.+2      	; 0x1644 <qtm_acquisition_process+0x6e>
    1642:	23 c1       	rjmp	.+582    	; 0x188a <qtm_acquisition_process+0x2b4>
    1644:	e6 01       	movw	r28, r12
    1646:	29 91       	ld	r18, Y+
    1648:	39 91       	ld	r19, Y+
    164a:	6e 01       	movw	r12, r28
    164c:	14 96       	adiw	r26, 0x04	; 4
    164e:	ed 91       	ld	r30, X+
    1650:	fc 91       	ld	r31, X
    1652:	15 97       	sbiw	r26, 0x05	; 5
    1654:	e6 0f       	add	r30, r22
    1656:	f7 1f       	adc	r31, r23
    1658:	40 81       	ld	r20, Z
    165a:	4c 71       	andi	r20, 0x1C	; 28
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	56 95       	lsr	r21
    1660:	47 95       	ror	r20
    1662:	56 95       	lsr	r21
    1664:	47 95       	ror	r20
    1666:	41 15       	cp	r20, r1
    1668:	51 05       	cpc	r21, r1
    166a:	21 f0       	breq	.+8      	; 0x1674 <qtm_acquisition_process+0x9e>
    166c:	41 30       	cpi	r20, 0x01	; 1
    166e:	51 05       	cpc	r21, r1
    1670:	b9 f0       	breq	.+46     	; 0x16a0 <qtm_acquisition_process+0xca>
    1672:	02 c1       	rjmp	.+516    	; 0x1878 <qtm_acquisition_process+0x2a2>
    1674:	12 96       	adiw	r26, 0x02	; 2
    1676:	cd 91       	ld	r28, X+
    1678:	dc 91       	ld	r29, X
    167a:	13 97       	sbiw	r26, 0x03	; 3
    167c:	c0 0f       	add	r28, r16
    167e:	d1 1f       	adc	r29, r17
    1680:	4c 81       	ldd	r20, Y+4	; 0x04
    1682:	4f 70       	andi	r20, 0x0F	; 15
    1684:	9d 81       	ldd	r25, Y+5	; 0x05
    1686:	49 17       	cp	r20, r25
    1688:	10 f4       	brcc	.+4      	; 0x168e <qtm_acquisition_process+0xb8>
    168a:	94 1b       	sub	r25, r20
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <qtm_acquisition_process+0xba>
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <qtm_acquisition_process+0xc0>
    1692:	36 95       	lsr	r19
    1694:	27 95       	ror	r18
    1696:	9a 95       	dec	r25
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <qtm_acquisition_process+0xbc>
    169a:	21 83       	std	Z+1, r18	; 0x01
    169c:	32 83       	std	Z+2, r19	; 0x02
    169e:	ed c0       	rjmp	.+474    	; 0x187a <qtm_acquisition_process+0x2a4>
    16a0:	12 96       	adiw	r26, 0x02	; 2
    16a2:	4d 91       	ld	r20, X+
    16a4:	5c 91       	ld	r21, X
    16a6:	13 97       	sbiw	r26, 0x03	; 3
    16a8:	40 0f       	add	r20, r16
    16aa:	51 1f       	adc	r21, r17
    16ac:	ea 01       	movw	r28, r20
    16ae:	0d 80       	ldd	r0, Y+5	; 0x05
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <qtm_acquisition_process+0xe0>
    16b2:	36 95       	lsr	r19
    16b4:	27 95       	ror	r18
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <qtm_acquisition_process+0xdc>
    16ba:	21 83       	std	Z+1, r18	; 0x01
    16bc:	32 83       	std	Z+2, r19	; 0x02
    16be:	a3 80       	ldd	r10, Z+3	; 0x03
    16c0:	b4 80       	ldd	r11, Z+4	; 0x04
    16c2:	21 15       	cp	r18, r1
    16c4:	d2 e0       	ldi	r29, 0x02	; 2
    16c6:	3d 07       	cpc	r19, r29
    16c8:	20 f0       	brcs	.+8      	; 0x16d2 <qtm_acquisition_process+0xfc>
    16ca:	2f 5f       	subi	r18, 0xFF	; 255
    16cc:	31 40       	sbci	r19, 0x01	; 1
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <qtm_acquisition_process+0x106>
    16d2:	a4 01       	movw	r20, r8
    16d4:	42 1b       	sub	r20, r18
    16d6:	53 0b       	sbc	r21, r19
    16d8:	9a 01       	movw	r18, r20
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	e3 01       	movw	r28, r6
    16de:	5a 80       	ldd	r5, Y+2	; 0x02
    16e0:	d0 e4       	ldi	r29, 0x40	; 64
    16e2:	5d 12       	cpse	r5, r29
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <qtm_acquisition_process+0x11a>
    16e6:	36 95       	lsr	r19
    16e8:	27 95       	ror	r18
    16ea:	99 23       	and	r25, r25
    16ec:	19 f0       	breq	.+6      	; 0x16f4 <qtm_acquisition_process+0x11e>
    16ee:	09 c0       	rjmp	.+18     	; 0x1702 <qtm_acquisition_process+0x12c>
    16f0:	99 23       	and	r25, r25
    16f2:	39 f0       	breq	.+14     	; 0x1702 <qtm_acquisition_process+0x12c>
    16f4:	4f ef       	ldi	r20, 0xFF	; 255
    16f6:	a4 16       	cp	r10, r20
    16f8:	b4 06       	cpc	r11, r20
    16fa:	31 f4       	brne	.+12     	; 0x1708 <qtm_acquisition_process+0x132>
    16fc:	40 82       	st	Z, r4
    16fe:	8e e0       	ldi	r24, 0x0E	; 14
    1700:	07 c0       	rjmp	.+14     	; 0x1710 <qtm_acquisition_process+0x13a>
    1702:	77 24       	eor	r7, r7
    1704:	73 94       	inc	r7
    1706:	01 c0       	rjmp	.+2      	; 0x170a <qtm_acquisition_process+0x134>
    1708:	71 2c       	mov	r7, r1
    170a:	2a 30       	cpi	r18, 0x0A	; 10
    170c:	31 05       	cpc	r19, r1
    170e:	90 f4       	brcc	.+36     	; 0x1734 <qtm_acquisition_process+0x15e>
    1710:	14 96       	adiw	r26, 0x04	; 4
    1712:	ed 91       	ld	r30, X+
    1714:	fc 91       	ld	r31, X
    1716:	15 97       	sbiw	r26, 0x05	; 5
    1718:	e6 0f       	add	r30, r22
    171a:	f7 1f       	adc	r31, r23
    171c:	90 81       	ld	r25, Z
    171e:	97 ff       	sbrs	r25, 7
    1720:	30 82       	st	Z, r3
    1722:	14 96       	adiw	r26, 0x04	; 4
    1724:	ed 91       	ld	r30, X+
    1726:	fc 91       	ld	r31, X
    1728:	15 97       	sbiw	r26, 0x05	; 5
    172a:	e6 0f       	add	r30, r22
    172c:	f7 1f       	adc	r31, r23
    172e:	a3 82       	std	Z+3, r10	; 0x03
    1730:	b4 82       	std	Z+4, r11	; 0x04
    1732:	a3 c0       	rjmp	.+326    	; 0x187a <qtm_acquisition_process+0x2a4>
    1734:	e5 01       	movw	r28, r10
    1736:	cd 2f       	mov	r28, r29
    1738:	dd 27       	eor	r29, r29
    173a:	c2 95       	swap	r28
    173c:	cf 70       	andi	r28, 0x0F	; 15
    173e:	9c 2f       	mov	r25, r28
    1740:	a5 01       	movw	r20, r10
    1742:	44 27       	eor	r20, r20
    1744:	5f 70       	andi	r21, 0x0F	; 15
    1746:	65 2e       	mov	r6, r21
    1748:	a5 01       	movw	r20, r10
    174a:	40 7f       	andi	r20, 0xF0	; 240
    174c:	55 27       	eor	r21, r21
    174e:	52 95       	swap	r21
    1750:	42 95       	swap	r20
    1752:	4f 70       	andi	r20, 0x0F	; 15
    1754:	45 27       	eor	r20, r21
    1756:	5f 70       	andi	r21, 0x0F	; 15
    1758:	45 27       	eor	r20, r21
    175a:	5a 2d       	mov	r21, r10
    175c:	5f 70       	andi	r21, 0x0F	; 15
    175e:	a5 2e       	mov	r10, r21
    1760:	c4 30       	cpi	r28, 0x04	; 4
    1762:	30 f0       	brcs	.+12     	; 0x1770 <qtm_acquisition_process+0x19a>
    1764:	93 70       	andi	r25, 0x03	; 3
    1766:	d6 95       	lsr	r29
    1768:	c7 95       	ror	r28
    176a:	d6 95       	lsr	r29
    176c:	c7 95       	ror	r28
    176e:	9c 0f       	add	r25, r28
    1770:	71 10       	cpse	r7, r1
    1772:	3c c0       	rjmp	.+120    	; 0x17ec <qtm_acquisition_process+0x216>
    1774:	50 e8       	ldi	r21, 0x80	; 128
    1776:	55 0d       	add	r21, r5
    1778:	52 30       	cpi	r21, 0x02	; 2
    177a:	10 f4       	brcc	.+4      	; 0x1780 <qtm_acquisition_process+0x1aa>
    177c:	56 e0       	ldi	r21, 0x06	; 6
    177e:	07 c0       	rjmp	.+14     	; 0x178e <qtm_acquisition_process+0x1b8>
    1780:	53 e0       	ldi	r21, 0x03	; 3
    1782:	05 c0       	rjmp	.+10     	; 0x178e <qtm_acquisition_process+0x1b8>
    1784:	95 17       	cp	r25, r21
    1786:	68 f4       	brcc	.+26     	; 0x17a2 <qtm_acquisition_process+0x1cc>
    1788:	9f 5f       	subi	r25, 0xFF	; 255
    178a:	2f 5c       	subi	r18, 0xCF	; 207
    178c:	31 09       	sbc	r19, r1
    178e:	20 3d       	cpi	r18, 0xD0	; 208
    1790:	31 05       	cpc	r19, r1
    1792:	c0 f7       	brcc	.-16     	; 0x1784 <qtm_acquisition_process+0x1ae>
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <qtm_acquisition_process+0x1cc>
    1796:	cf e0       	ldi	r28, 0x0F	; 15
    1798:	6c 16       	cp	r6, r28
    179a:	49 f0       	breq	.+18     	; 0x17ae <qtm_acquisition_process+0x1d8>
    179c:	63 94       	inc	r6
    179e:	25 51       	subi	r18, 0x15	; 21
    17a0:	31 09       	sbc	r19, r1
    17a2:	26 31       	cpi	r18, 0x16	; 22
    17a4:	31 05       	cpc	r19, r1
    17a6:	b8 f7       	brcc	.-18     	; 0x1796 <qtm_acquisition_process+0x1c0>
    17a8:	df e0       	ldi	r29, 0x0F	; 15
    17aa:	6d 12       	cpse	r6, r29
    17ac:	0e c0       	rjmp	.+28     	; 0x17ca <qtm_acquisition_process+0x1f4>
    17ae:	95 17       	cp	r25, r21
    17b0:	20 f4       	brcc	.+8      	; 0x17ba <qtm_acquisition_process+0x1e4>
    17b2:	9f 5f       	subi	r25, 0xFF	; 255
    17b4:	d5 e0       	ldi	r29, 0x05	; 5
    17b6:	6d 2e       	mov	r6, r29
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <qtm_acquisition_process+0x1f4>
    17ba:	cf e0       	ldi	r28, 0x0F	; 15
    17bc:	6c 2e       	mov	r6, r28
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <qtm_acquisition_process+0x1f4>
    17c0:	4f 30       	cpi	r20, 0x0F	; 15
    17c2:	49 f0       	breq	.+18     	; 0x17d6 <qtm_acquisition_process+0x200>
    17c4:	4f 5f       	subi	r20, 0xFF	; 255
    17c6:	22 50       	subi	r18, 0x02	; 2
    17c8:	31 09       	sbc	r19, r1
    17ca:	23 30       	cpi	r18, 0x03	; 3
    17cc:	31 05       	cpc	r19, r1
    17ce:	c0 f7       	brcc	.-16     	; 0x17c0 <qtm_acquisition_process+0x1ea>
    17d0:	4f 30       	cpi	r20, 0x0F	; 15
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <qtm_acquisition_process+0x200>
    17d4:	65 c0       	rjmp	.+202    	; 0x18a0 <qtm_acquisition_process+0x2ca>
    17d6:	4f e0       	ldi	r20, 0x0F	; 15
    17d8:	64 16       	cp	r6, r20
    17da:	81 f1       	breq	.+96     	; 0x183c <qtm_acquisition_process+0x266>
    17dc:	63 94       	inc	r6
    17de:	45 e0       	ldi	r20, 0x05	; 5
    17e0:	5f c0       	rjmp	.+190    	; 0x18a0 <qtm_acquisition_process+0x2ca>
    17e2:	99 23       	and	r25, r25
    17e4:	61 f0       	breq	.+24     	; 0x17fe <qtm_acquisition_process+0x228>
    17e6:	91 50       	subi	r25, 0x01	; 1
    17e8:	2f 5c       	subi	r18, 0xCF	; 207
    17ea:	31 09       	sbc	r19, r1
    17ec:	20 3d       	cpi	r18, 0xD0	; 208
    17ee:	31 05       	cpc	r19, r1
    17f0:	c0 f7       	brcc	.-16     	; 0x17e2 <qtm_acquisition_process+0x20c>
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <qtm_acquisition_process+0x228>
    17f4:	66 20       	and	r6, r6
    17f6:	41 f0       	breq	.+16     	; 0x1808 <qtm_acquisition_process+0x232>
    17f8:	6a 94       	dec	r6
    17fa:	25 51       	subi	r18, 0x15	; 21
    17fc:	31 09       	sbc	r19, r1
    17fe:	26 31       	cpi	r18, 0x16	; 22
    1800:	31 05       	cpc	r19, r1
    1802:	c0 f7       	brcc	.-16     	; 0x17f4 <qtm_acquisition_process+0x21e>
    1804:	61 10       	cpse	r6, r1
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <qtm_acquisition_process+0x24c>
    1808:	99 23       	and	r25, r25
    180a:	21 f0       	breq	.+8      	; 0x1814 <qtm_acquisition_process+0x23e>
    180c:	91 50       	subi	r25, 0x01	; 1
    180e:	5a e0       	ldi	r21, 0x0A	; 10
    1810:	65 2e       	mov	r6, r21
    1812:	07 c0       	rjmp	.+14     	; 0x1822 <qtm_acquisition_process+0x24c>
    1814:	61 2c       	mov	r6, r1
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <qtm_acquisition_process+0x24c>
    1818:	44 23       	and	r20, r20
    181a:	41 f0       	breq	.+16     	; 0x182c <qtm_acquisition_process+0x256>
    181c:	41 50       	subi	r20, 0x01	; 1
    181e:	22 50       	subi	r18, 0x02	; 2
    1820:	31 09       	sbc	r19, r1
    1822:	23 30       	cpi	r18, 0x03	; 3
    1824:	31 05       	cpc	r19, r1
    1826:	c0 f7       	brcc	.-16     	; 0x1818 <qtm_acquisition_process+0x242>
    1828:	41 11       	cpse	r20, r1
    182a:	10 c0       	rjmp	.+32     	; 0x184c <qtm_acquisition_process+0x276>
    182c:	66 20       	and	r6, r6
    182e:	e9 f1       	breq	.+122    	; 0x18aa <qtm_acquisition_process+0x2d4>
    1830:	6a 94       	dec	r6
    1832:	4a e0       	ldi	r20, 0x0A	; 10
    1834:	23 30       	cpi	r18, 0x03	; 3
    1836:	31 05       	cpc	r19, r1
    1838:	c8 f6       	brcc	.-78     	; 0x17ec <qtm_acquisition_process+0x216>
    183a:	08 c0       	rjmp	.+16     	; 0x184c <qtm_acquisition_process+0x276>
    183c:	59 13       	cpse	r21, r25
    183e:	2f c0       	rjmp	.+94     	; 0x189e <qtm_acquisition_process+0x2c8>
    1840:	23 30       	cpi	r18, 0x03	; 3
    1842:	31 05       	cpc	r19, r1
    1844:	40 f1       	brcs	.+80     	; 0x1896 <qtm_acquisition_process+0x2c0>
    1846:	4f e0       	ldi	r20, 0x0F	; 15
    1848:	a4 2e       	mov	r10, r20
    184a:	4f e0       	ldi	r20, 0x0F	; 15
    184c:	94 30       	cpi	r25, 0x04	; 4
    184e:	18 f0       	brcs	.+6      	; 0x1856 <qtm_acquisition_process+0x280>
    1850:	99 0f       	add	r25, r25
    1852:	99 0f       	add	r25, r25
    1854:	99 50       	subi	r25, 0x09	; 9
    1856:	c0 e1       	ldi	r28, 0x10	; 16
    1858:	4c 9f       	mul	r20, r28
    185a:	a0 01       	movw	r20, r0
    185c:	11 24       	eor	r1, r1
    185e:	56 29       	or	r21, r6
    1860:	4a 29       	or	r20, r10
    1862:	c9 2f       	mov	r28, r25
    1864:	d0 e0       	ldi	r29, 0x00	; 0
    1866:	dc 2f       	mov	r29, r28
    1868:	cc 27       	eor	r28, r28
    186a:	d2 95       	swap	r29
    186c:	d0 7f       	andi	r29, 0xF0	; 240
    186e:	4c 2b       	or	r20, r28
    1870:	5d 2b       	or	r21, r29
    1872:	43 83       	std	Z+3, r20	; 0x03
    1874:	54 83       	std	Z+4, r21	; 0x04
    1876:	01 c0       	rjmp	.+2      	; 0x187a <qtm_acquisition_process+0x2a4>
    1878:	ff cf       	rjmp	.-2      	; 0x1878 <qtm_acquisition_process+0x2a2>
    187a:	df ef       	ldi	r29, 0xFF	; 255
    187c:	ed 1a       	sub	r14, r29
    187e:	fd 0a       	sbc	r15, r29
    1880:	6b 5f       	subi	r22, 0xFB	; 251
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	0a 5f       	subi	r16, 0xFA	; 250
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	d3 ce       	rjmp	.-602    	; 0x1630 <qtm_acquisition_process+0x5a>
    188a:	92 e0       	ldi	r25, 0x02	; 2
    188c:	90 93 6d 3e 	sts	0x3E6D, r25	; 0x803e6d <touch_seq_lib_state>
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <qtm_acquisition_process+0x2d8>
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	0c c0       	rjmp	.+24     	; 0x18ae <qtm_acquisition_process+0x2d8>
    1896:	4f e0       	ldi	r20, 0x0F	; 15
    1898:	2f e0       	ldi	r18, 0x0F	; 15
    189a:	a2 2e       	mov	r10, r18
    189c:	d7 cf       	rjmp	.-82     	; 0x184c <qtm_acquisition_process+0x276>
    189e:	4f e0       	ldi	r20, 0x0F	; 15
    18a0:	23 30       	cpi	r18, 0x03	; 3
    18a2:	31 05       	cpc	r19, r1
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <qtm_acquisition_process+0x2d2>
    18a6:	73 cf       	rjmp	.-282    	; 0x178e <qtm_acquisition_process+0x1b8>
    18a8:	d1 cf       	rjmp	.-94     	; 0x184c <qtm_acquisition_process+0x276>
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	cf cf       	rjmp	.-98     	; 0x184c <qtm_acquisition_process+0x276>
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	af 90       	pop	r10
    18c2:	9f 90       	pop	r9
    18c4:	8f 90       	pop	r8
    18c6:	7f 90       	pop	r7
    18c8:	6f 90       	pop	r6
    18ca:	5f 90       	pop	r5
    18cc:	4f 90       	pop	r4
    18ce:	3f 90       	pop	r3
    18d0:	08 95       	ret

000018d2 <qtm_ptc_init_acquisition_module>:
    18d2:	cf 93       	push	r28
    18d4:	dc 01       	movw	r26, r24
    18d6:	89 2b       	or	r24, r25
    18d8:	79 f1       	breq	.+94     	; 0x1938 <qtm_ptc_init_acquisition_module+0x66>
    18da:	ed 91       	ld	r30, X+
    18dc:	fc 91       	ld	r31, X
    18de:	11 97       	sbiw	r26, 0x01	; 1
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	26 17       	cp	r18, r22
    18f0:	37 07       	cpc	r19, r23
    18f2:	79 f0       	breq	.+30     	; 0x1912 <qtm_ptc_init_acquisition_module+0x40>
    18f4:	12 96       	adiw	r26, 0x02	; 2
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	13 97       	sbiw	r26, 0x03	; 3
    18fc:	e4 0f       	add	r30, r20
    18fe:	f5 1f       	adc	r31, r21
    1900:	c0 81       	ld	r28, Z
    1902:	81 81       	ldd	r24, Z+1	; 0x01
    1904:	8c 2b       	or	r24, r28
    1906:	98 2b       	or	r25, r24
    1908:	2f 5f       	subi	r18, 0xFF	; 255
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
    190c:	4a 5f       	subi	r20, 0xFA	; 250
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	ee cf       	rjmp	.-36     	; 0x18ee <qtm_ptc_init_acquisition_module+0x1c>
    1912:	99 23       	and	r25, r25
    1914:	99 f0       	breq	.+38     	; 0x193c <qtm_ptc_init_acquisition_module+0x6a>
    1916:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <touch_seq_lib_state>
    191a:	81 11       	cpse	r24, r1
    191c:	06 c0       	rjmp	.+12     	; 0x192a <qtm_ptc_init_acquisition_module+0x58>
    191e:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <touch_seq_lib_state>
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <qtm_ptc_init_acquisition_module+0x62>
    192a:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    192e:	98 2b       	or	r25, r24
    1930:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	03 c0       	rjmp	.+6      	; 0x193e <qtm_ptc_init_acquisition_module+0x6c>
    1938:	8b e0       	ldi	r24, 0x0B	; 11
    193a:	01 c0       	rjmp	.+2      	; 0x193e <qtm_ptc_init_acquisition_module+0x6c>
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <qtm_ptc_qtlib_assign_signal_memory>:
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	31 f0       	breq	.+12     	; 0x1952 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    1946:	80 93 a6 3e 	sts	0x3EA6, r24	; 0x803ea6 <qtm_raw_data_measurements_ptr>
    194a:	90 93 a7 3e 	sts	0x3EA7, r25	; 0x803ea7 <qtm_raw_data_measurements_ptr+0x1>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 95       	ret
    1952:	8b e0       	ldi	r24, 0x0B	; 11
    1954:	08 95       	ret

00001956 <qtm_ptc_start_measurement_seq>:
    1956:	61 15       	cp	r22, r1
    1958:	71 05       	cpc	r23, r1
    195a:	91 f1       	breq	.+100    	; 0x19c0 <qtm_ptc_start_measurement_seq+0x6a>
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	81 f1       	breq	.+96     	; 0x19c0 <qtm_ptc_start_measurement_seq+0x6a>
    1960:	20 91 6d 3e 	lds	r18, 0x3E6D	; 0x803e6d <touch_seq_lib_state>
    1964:	22 23       	and	r18, r18
    1966:	71 f1       	breq	.+92     	; 0x19c4 <qtm_ptc_start_measurement_seq+0x6e>
    1968:	24 30       	cpi	r18, 0x04	; 4
    196a:	71 f1       	breq	.+92     	; 0x19c8 <qtm_ptc_start_measurement_seq+0x72>
    196c:	80 93 a4 3e 	sts	0x3EA4, r24	; 0x803ea4 <qtm_acquisition_control_working_set_ptr>
    1970:	90 93 a5 3e 	sts	0x3EA5, r25	; 0x803ea5 <qtm_acquisition_control_working_set_ptr+0x1>
    1974:	60 93 6b 3e 	sts	0x3E6B, r22	; 0x803e6b <ptc_seq_measure_complete_pointer>
    1978:	70 93 6c 3e 	sts	0x3E6C, r23	; 0x803e6c <ptc_seq_measure_complete_pointer+0x1>
    197c:	20 ec       	ldi	r18, 0xC0	; 192
    197e:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1982:	dc 01       	movw	r26, r24
    1984:	ed 91       	ld	r30, X+
    1986:	fc 91       	ld	r31, X
    1988:	22 81       	ldd	r18, Z+2	; 0x02
    198a:	20 34       	cpi	r18, 0x40	; 64
    198c:	21 f4       	brne	.+8      	; 0x1996 <qtm_ptc_start_measurement_seq+0x40>
    198e:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1992:	20 62       	ori	r18, 0x20	; 32
    1994:	05 c0       	rjmp	.+10     	; 0x19a0 <qtm_ptc_start_measurement_seq+0x4a>
    1996:	20 38       	cpi	r18, 0x80	; 128
    1998:	41 f4       	brne	.+16     	; 0x19aa <qtm_ptc_start_measurement_seq+0x54>
    199a:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    199e:	28 62       	ori	r18, 0x28	; 40
    19a0:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19a4:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    19a8:	13 c0       	rjmp	.+38     	; 0x19d0 <qtm_ptc_start_measurement_seq+0x7a>
    19aa:	21 38       	cpi	r18, 0x81	; 129
    19ac:	79 f4       	brne	.+30     	; 0x19cc <qtm_ptc_start_measurement_seq+0x76>
    19ae:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19b2:	28 62       	ori	r18, 0x28	; 40
    19b4:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19b8:	26 e8       	ldi	r18, 0x86	; 134
    19ba:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    19be:	08 c0       	rjmp	.+16     	; 0x19d0 <qtm_ptc_start_measurement_seq+0x7a>
    19c0:	8b e0       	ldi	r24, 0x0B	; 11
    19c2:	08 95       	ret
    19c4:	83 e0       	ldi	r24, 0x03	; 3
    19c6:	08 95       	ret
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	08 95       	ret
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	08 95       	ret
    19d0:	dc 01       	movw	r26, r24
    19d2:	ed 91       	ld	r30, X+
    19d4:	fc 91       	ld	r31, X
    19d6:	84 81       	ldd	r24, Z+4	; 0x04
    19d8:	80 31       	cpi	r24, 0x10	; 16
    19da:	08 f0       	brcs	.+2      	; 0x19de <qtm_ptc_start_measurement_seq+0x88>
    19dc:	80 e1       	ldi	r24, 0x10	; 16
    19de:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
    19e8:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    19ec:	10 92 6e 3e 	sts	0x3E6E, r1	; 0x803e6e <current_measure_channel>
    19f0:	10 92 6f 3e 	sts	0x3E6F, r1	; 0x803e6f <current_measure_channel+0x1>
    19f4:	39 dd       	rcall	.-1422   	; 0x1468 <select_next_channel_to_measure>
    19f6:	81 11       	cpse	r24, r1
    19f8:	0a c0       	rjmp	.+20     	; 0x1a0e <qtm_ptc_start_measurement_seq+0xb8>
    19fa:	84 e0       	ldi	r24, 0x04	; 4
    19fc:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <touch_seq_lib_state>
    1a00:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <current_measure_channel>
    1a04:	90 91 6f 3e 	lds	r25, 0x3E6F	; 0x803e6f <current_measure_channel+0x1>
    1a08:	62 dd       	rcall	.-1340   	; 0x14ce <qtm_measure_node>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	08 95       	ret
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <touch_seq_lib_state>
    1a14:	08 95       	ret

00001a16 <qtm_enable_sensor_node>:
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	c9 f0       	breq	.+50     	; 0x1a4c <qtm_enable_sensor_node+0x36>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	ed 91       	ld	r30, X+
    1a1e:	fc 91       	ld	r31, X
    1a20:	11 97       	sbiw	r26, 0x01	; 1
    1a22:	20 81       	ld	r18, Z
    1a24:	31 81       	ldd	r19, Z+1	; 0x01
    1a26:	26 17       	cp	r18, r22
    1a28:	37 07       	cpc	r19, r23
    1a2a:	90 f0       	brcs	.+36     	; 0x1a50 <qtm_enable_sensor_node+0x3a>
    1a2c:	45 e0       	ldi	r20, 0x05	; 5
    1a2e:	46 9f       	mul	r20, r22
    1a30:	90 01       	movw	r18, r0
    1a32:	47 9f       	mul	r20, r23
    1a34:	30 0d       	add	r19, r0
    1a36:	11 24       	eor	r1, r1
    1a38:	14 96       	adiw	r26, 0x04	; 4
    1a3a:	ed 91       	ld	r30, X+
    1a3c:	fc 91       	ld	r31, X
    1a3e:	15 97       	sbiw	r26, 0x05	; 5
    1a40:	e2 0f       	add	r30, r18
    1a42:	f3 1f       	adc	r31, r19
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 83       	st	Z, r24
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	08 95       	ret
    1a4c:	8b e0       	ldi	r24, 0x0B	; 11
    1a4e:	08 95       	ret
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	08 95       	ret

00001a54 <qtm_calibrate_sensor_node>:
    1a54:	fc 01       	movw	r30, r24
    1a56:	89 2b       	or	r24, r25
    1a58:	d1 f1       	breq	.+116    	; 0x1ace <qtm_calibrate_sensor_node+0x7a>
    1a5a:	a0 81       	ld	r26, Z
    1a5c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a5e:	8d 91       	ld	r24, X+
    1a60:	9c 91       	ld	r25, X
    1a62:	11 97       	sbiw	r26, 0x01	; 1
    1a64:	86 17       	cp	r24, r22
    1a66:	97 07       	cpc	r25, r23
    1a68:	a0 f1       	brcs	.+104    	; 0x1ad2 <qtm_calibrate_sensor_node+0x7e>
    1a6a:	12 96       	adiw	r26, 0x02	; 2
    1a6c:	9c 91       	ld	r25, X
    1a6e:	04 80       	ldd	r0, Z+4	; 0x04
    1a70:	f5 81       	ldd	r31, Z+5	; 0x05
    1a72:	e0 2d       	mov	r30, r0
    1a74:	90 34       	cpi	r25, 0x40	; 64
    1a76:	59 f4       	brne	.+22     	; 0x1a8e <qtm_calibrate_sensor_node+0x3a>
    1a78:	85 e0       	ldi	r24, 0x05	; 5
    1a7a:	86 9f       	mul	r24, r22
    1a7c:	d0 01       	movw	r26, r0
    1a7e:	87 9f       	mul	r24, r23
    1a80:	b0 0d       	add	r27, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	ae 0f       	add	r26, r30
    1a86:	bf 1f       	adc	r27, r31
    1a88:	84 e3       	ldi	r24, 0x34	; 52
    1a8a:	92 e0       	ldi	r25, 0x02	; 2
    1a8c:	0d c0       	rjmp	.+26     	; 0x1aa8 <qtm_calibrate_sensor_node+0x54>
    1a8e:	90 58       	subi	r25, 0x80	; 128
    1a90:	92 30       	cpi	r25, 0x02	; 2
    1a92:	80 f4       	brcc	.+32     	; 0x1ab4 <qtm_calibrate_sensor_node+0x60>
    1a94:	85 e0       	ldi	r24, 0x05	; 5
    1a96:	86 9f       	mul	r24, r22
    1a98:	d0 01       	movw	r26, r0
    1a9a:	87 9f       	mul	r24, r23
    1a9c:	b0 0d       	add	r27, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	ae 0f       	add	r26, r30
    1aa2:	bf 1f       	adc	r27, r31
    1aa4:	87 e6       	ldi	r24, 0x67	; 103
    1aa6:	95 e0       	ldi	r25, 0x05	; 5
    1aa8:	13 96       	adiw	r26, 0x03	; 3
    1aaa:	8d 93       	st	X+, r24
    1aac:	9c 93       	st	X, r25
    1aae:	14 97       	sbiw	r26, 0x04	; 4
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <qtm_calibrate_sensor_node+0x62>
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	95 e0       	ldi	r25, 0x05	; 5
    1ab8:	96 9f       	mul	r25, r22
    1aba:	90 01       	movw	r18, r0
    1abc:	97 9f       	mul	r25, r23
    1abe:	30 0d       	add	r19, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	e2 0f       	add	r30, r18
    1ac4:	f3 1f       	adc	r31, r19
    1ac6:	90 81       	ld	r25, Z
    1ac8:	92 60       	ori	r25, 0x02	; 2
    1aca:	90 83       	st	Z, r25
    1acc:	08 95       	ret
    1ace:	8b e0       	ldi	r24, 0x0B	; 11
    1ad0:	08 95       	ret
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	08 95       	ret

00001ad6 <qtm_t81x_ptc_handler_eoc>:
    1ad6:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    1ada:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    1ade:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    1ae2:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <current_measure_channel>
    1ae6:	90 91 6f 3e 	lds	r25, 0x3E6F	; 0x803e6f <current_measure_channel+0x1>
    1aea:	9c 01       	movw	r18, r24
    1aec:	22 0f       	add	r18, r18
    1aee:	33 1f       	adc	r19, r19
    1af0:	e0 91 a6 3e 	lds	r30, 0x3EA6	; 0x803ea6 <qtm_raw_data_measurements_ptr>
    1af4:	f0 91 a7 3e 	lds	r31, 0x3EA7	; 0x803ea7 <qtm_raw_data_measurements_ptr+0x1>
    1af8:	e2 0f       	add	r30, r18
    1afa:	f3 1f       	adc	r31, r19
    1afc:	40 83       	st	Z, r20
    1afe:	51 83       	std	Z+1, r21	; 0x01
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	80 93 6e 3e 	sts	0x3E6E, r24	; 0x803e6e <current_measure_channel>
    1b06:	90 93 6f 3e 	sts	0x3E6F, r25	; 0x803e6f <current_measure_channel+0x1>
    1b0a:	ae dc       	rcall	.-1700   	; 0x1468 <select_next_channel_to_measure>
    1b0c:	81 11       	cpse	r24, r1
    1b0e:	08 c0       	rjmp	.+16     	; 0x1b20 <qtm_t81x_ptc_handler_eoc+0x4a>
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <touch_seq_lib_state>
    1b16:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <current_measure_channel>
    1b1a:	90 91 6f 3e 	lds	r25, 0x3E6F	; 0x803e6f <current_measure_channel+0x1>
    1b1e:	d7 cc       	rjmp	.-1618   	; 0x14ce <qtm_measure_node>
    1b20:	e0 91 6b 3e 	lds	r30, 0x3E6B	; 0x803e6b <ptc_seq_measure_complete_pointer>
    1b24:	f0 91 6c 3e 	lds	r31, 0x3E6C	; 0x803e6c <ptc_seq_measure_complete_pointer+0x1>
    1b28:	09 94       	ijmp

00001b2a <__divmodhi4>:
    1b2a:	97 fb       	bst	r25, 7
    1b2c:	07 2e       	mov	r0, r23
    1b2e:	16 f4       	brtc	.+4      	; 0x1b34 <__divmodhi4+0xa>
    1b30:	00 94       	com	r0
    1b32:	06 d0       	rcall	.+12     	; 0x1b40 <__divmodhi4_neg1>
    1b34:	77 fd       	sbrc	r23, 7
    1b36:	08 d0       	rcall	.+16     	; 0x1b48 <__divmodhi4_neg2>
    1b38:	0b d0       	rcall	.+22     	; 0x1b50 <__udivmodhi4>
    1b3a:	07 fc       	sbrc	r0, 7
    1b3c:	05 d0       	rcall	.+10     	; 0x1b48 <__divmodhi4_neg2>
    1b3e:	3e f4       	brtc	.+14     	; 0x1b4e <__divmodhi4_exit>

00001b40 <__divmodhi4_neg1>:
    1b40:	90 95       	com	r25
    1b42:	81 95       	neg	r24
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	08 95       	ret

00001b48 <__divmodhi4_neg2>:
    1b48:	70 95       	com	r23
    1b4a:	61 95       	neg	r22
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255

00001b4e <__divmodhi4_exit>:
    1b4e:	08 95       	ret

00001b50 <__udivmodhi4>:
    1b50:	aa 1b       	sub	r26, r26
    1b52:	bb 1b       	sub	r27, r27
    1b54:	51 e1       	ldi	r21, 0x11	; 17
    1b56:	07 c0       	rjmp	.+14     	; 0x1b66 <__udivmodhi4_ep>

00001b58 <__udivmodhi4_loop>:
    1b58:	aa 1f       	adc	r26, r26
    1b5a:	bb 1f       	adc	r27, r27
    1b5c:	a6 17       	cp	r26, r22
    1b5e:	b7 07       	cpc	r27, r23
    1b60:	10 f0       	brcs	.+4      	; 0x1b66 <__udivmodhi4_ep>
    1b62:	a6 1b       	sub	r26, r22
    1b64:	b7 0b       	sbc	r27, r23

00001b66 <__udivmodhi4_ep>:
    1b66:	88 1f       	adc	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	5a 95       	dec	r21
    1b6c:	a9 f7       	brne	.-22     	; 0x1b58 <__udivmodhi4_loop>
    1b6e:	80 95       	com	r24
    1b70:	90 95       	com	r25
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	08 95       	ret

00001b78 <_exit>:
    1b78:	f8 94       	cli

00001b7a <__stop_program>:
    1b7a:	ff cf       	rjmp	.-2      	; 0x1b7a <__stop_program>
