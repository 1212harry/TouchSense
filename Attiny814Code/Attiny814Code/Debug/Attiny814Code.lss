
Attiny814Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00803e00  00001b74  00001c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b6e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000006  00009b6e  00001b6e  00001c22  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000053  00803e58  00803e58  00001c80  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000348  00000000  00000000  00001cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006092  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026db  00000000  00000000  000080ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d44  00000000  00000000  0000a7a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005bc  00000000  00000000  0000c4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002f67  00000000  00000000  0000caa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fd0  00000000  00000000  0000fa0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000278  00000000  00000000  000109df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	4f c0       	rjmp	.+158    	; 0xc0 <__vector_16>
      22:	b0 c3       	rjmp	.+1888   	; 0x784 <__vector_17>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e4 e7       	ldi	r30, 0x74	; 116
      48:	fb e1       	ldi	r31, 0x1B	; 27
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a8 35       	cpi	r26, 0x58	; 88
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a8 e5       	ldi	r26, 0x58	; 88
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ab 3a       	cpi	r26, 0xAB	; 171
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	2f d1       	rcall	.+606    	; 0x2c6 <main>
      68:	80 cd       	rjmp	.-1280   	; 0xfffffb6a <__eeprom_end+0xff7efb6a>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	08 d4       	rcall	.+2064   	; 0x87e <system_init>

	touch_init();
      6e:	d0 d2       	rcall	.+1440   	; 0x610 <touch_init>
      70:	08 95       	ret

00000072 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      72:	1f 92       	push	r1
      74:	0f 92       	push	r0
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	0f 92       	push	r0
      7a:	11 24       	eor	r1, r1
      7c:	2f 93       	push	r18
      7e:	3f 93       	push	r19
      80:	4f 93       	push	r20
      82:	5f 93       	push	r21
      84:	6f 93       	push	r22
      86:	7f 93       	push	r23
      88:	8f 93       	push	r24
      8a:	9f 93       	push	r25
      8c:	af 93       	push	r26
      8e:	bf 93       	push	r27
      90:	ef 93       	push	r30
      92:	ff 93       	push	r31
	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      94:	36 d3       	rcall	.+1644   	; 0x702 <touch_timer_handler>
	RTC_CallBack();
      96:	8e d0       	rcall	.+284    	; 0x1b4 <RTC_CallBack>
	/* PIT interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      98:	81 e0       	ldi	r24, 0x01	; 1
      9a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
      9e:	ff 91       	pop	r31
      a0:	ef 91       	pop	r30
      a2:	bf 91       	pop	r27
      a4:	af 91       	pop	r26
      a6:	9f 91       	pop	r25
      a8:	8f 91       	pop	r24
      aa:	7f 91       	pop	r23
      ac:	6f 91       	pop	r22
      ae:	5f 91       	pop	r21
      b0:	4f 91       	pop	r20
      b2:	3f 91       	pop	r19
      b4:	2f 91       	pop	r18
      b6:	0f 90       	pop	r0
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	0f 90       	pop	r0
      bc:	1f 90       	pop	r1
      be:	18 95       	reti

000000c0 <__vector_16>:

ISR(AC0_AC_vect)
{
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	2f 93       	push	r18
      cc:	3f 93       	push	r19
      ce:	4f 93       	push	r20
      d0:	5f 93       	push	r21
      d2:	6f 93       	push	r22
      d4:	7f 93       	push	r23
      d6:	8f 93       	push	r24
      d8:	9f 93       	push	r25
      da:	af 93       	push	r26
      dc:	bf 93       	push	r27
      de:	ef 93       	push	r30
      e0:	ff 93       	push	r31
	uint8_t temp;
	/* Insert your AC interrupt handling code here */
	/* The interrupt flag has to be cleared manually */
	temp = AC0.STATUS;
      e2:	e0 e7       	ldi	r30, 0x70	; 112
      e4:	f6 e0       	ldi	r31, 0x06	; 6
      e6:	87 81       	ldd	r24, Z+7	; 0x07
	
	AC0.STATUS = AC_CMP_bm;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	87 83       	std	Z+7, r24	; 0x07
	
	LowBattery();
      ec:	56 d0       	rcall	.+172    	; 0x19a <LowBattery>
}
      ee:	ff 91       	pop	r31
      f0:	ef 91       	pop	r30
      f2:	bf 91       	pop	r27
      f4:	af 91       	pop	r26
      f6:	9f 91       	pop	r25
      f8:	8f 91       	pop	r24
      fa:	7f 91       	pop	r23
      fc:	6f 91       	pop	r22
      fe:	5f 91       	pop	r21
     100:	4f 91       	pop	r20
     102:	3f 91       	pop	r19
     104:	2f 91       	pop	r18
     106:	0f 90       	pop	r0
     108:	0f be       	out	0x3f, r0	; 63
     10a:	0f 90       	pop	r0
     10c:	1f 90       	pop	r1
     10e:	18 95       	reti

00000110 <TOUCH_GetTouchSignal>:
uint16_t AC_TimeCnt = 0;

int16_t TOUCH_GetTouchSignal(void)
{
	return STRONG_EDGE_THRESHOLD;
}
     110:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     114:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
     118:	08 95       	ret

0000011a <TOUCH_SetMeasureBusyFlag>:

void TOUCH_SetMeasureBusyFlag(void)
{
	measureBusyFlag = 1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <measureBusyFlag>
     120:	08 95       	ret

00000122 <Radiotube_Handle>:
}

void Radiotube_Handle(void)
{
	if (RadiotubeState == OFF)
     122:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <RadiotubeState>
     126:	81 30       	cpi	r24, 0x01	; 1
     128:	89 f4       	brne	.+34     	; 0x14c <Radiotube_Handle+0x2a>
	{
		RadiotubeState = ON;
     12a:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     12e:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     130:	2f e5       	ldi	r18, 0x5F	; 95
     132:	3a ee       	ldi	r19, 0xEA	; 234
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	21 50       	subi	r18, 0x01	; 1
     138:	30 40       	sbci	r19, 0x00	; 0
     13a:	80 40       	sbci	r24, 0x00	; 0
     13c:	e1 f7       	brne	.-8      	; 0x136 <Radiotube_Handle+0x14>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <Radiotube_Handle+0x1e>
     140:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     142:	28 98       	cbi	0x05, 0	; 5
		IO1_set_level(true);
		_delay_ms(30);
		IO1_set_level(false);
		edgeDetectFreeze = 1;
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	80 93 60 3e 	sts	0x3E60, r24	; 0x803e60 <edgeDetectFreeze>
     14a:	08 95       	ret
	}
	else
	{
		RadiotubeState = OFF;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <RadiotubeState>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     152:	29 9a       	sbi	0x05, 1	; 5
     154:	9f e5       	ldi	r25, 0x5F	; 95
     156:	2a ee       	ldi	r18, 0xEA	; 234
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	91 50       	subi	r25, 0x01	; 1
     15c:	20 40       	sbci	r18, 0x00	; 0
     15e:	30 40       	sbci	r19, 0x00	; 0
     160:	e1 f7       	brne	.-8      	; 0x15a <Radiotube_Handle+0x38>
     162:	00 c0       	rjmp	.+0      	; 0x164 <Radiotube_Handle+0x42>
     164:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     166:	29 98       	cbi	0x05, 1	; 5
		IO2_set_level(true);
		_delay_ms(30);
		IO2_set_level(false);
		edgeDetectFreeze = 1;
     168:	80 93 60 3e 	sts	0x3E60, r24	; 0x803e60 <edgeDetectFreeze>
		RadiotubeOnTime = 0;
     16c:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <RadiotubeOnTime>
     170:	10 92 62 3e 	sts	0x3E62, r1	; 0x803e62 <RadiotubeOnTime+0x1>
     174:	10 92 63 3e 	sts	0x3E63, r1	; 0x803e63 <RadiotubeOnTime+0x2>
     178:	10 92 64 3e 	sts	0x3E64, r1	; 0x803e64 <RadiotubeOnTime+0x3>
     17c:	08 95       	ret

0000017e <MCU_GoToSleep>:
}

void MCU_GoToSleep(int mode)
{
	// Set sleep mode to Power Down mode
	set_sleep_mode(mode);
     17e:	e0 e5       	ldi	r30, 0x50	; 80
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	90 81       	ld	r25, Z
     184:	99 7f       	andi	r25, 0xF9	; 249
     186:	89 2b       	or	r24, r25
     188:	80 83       	st	Z, r24
	sleep_enable();
     18a:	80 81       	ld	r24, Z
     18c:	81 60       	ori	r24, 0x01	; 1
     18e:	80 83       	st	Z, r24
	sleep_cpu();
     190:	88 95       	sleep
	sleep_disable();
     192:	80 81       	ld	r24, Z
     194:	8e 7f       	andi	r24, 0xFE	; 254
     196:	80 83       	st	Z, r24
     198:	08 95       	ret

0000019a <LowBattery>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     19a:	28 9a       	sbi	0x05, 0	; 5
     19c:	2f e5       	ldi	r18, 0x5F	; 95
     19e:	8a ee       	ldi	r24, 0xEA	; 234
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	21 50       	subi	r18, 0x01	; 1
     1a4:	80 40       	sbci	r24, 0x00	; 0
     1a6:	90 40       	sbci	r25, 0x00	; 0
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <LowBattery+0x8>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LowBattery+0x12>
     1ac:	00 00       	nop
	} else {
		VPORTB.OUT &= ~(1 << pin);
     1ae:	28 98       	cbi	0x05, 0	; 5
	IO1_set_level(true);
	_delay_ms(30);
	IO1_set_level(false);
	while (1)
	{
		wdt_reset();
     1b0:	a8 95       	wdr
     1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <LowBattery+0x16>

000001b4 <RTC_CallBack>:

void RTC_CallBack(void)
{
	/* monitor the battery charge every second */
	/* if the charge of battery below 1.5v, go to the low battery mode */
	AC_TimeCnt++;
     1b4:	80 91 59 3e 	lds	r24, 0x3E59	; 0x803e59 <AC_TimeCnt>
     1b8:	90 91 5a 3e 	lds	r25, 0x3E5A	; 0x803e5a <AC_TimeCnt+0x1>
     1bc:	01 96       	adiw	r24, 0x01	; 1
	if (AC_TimeCnt >= AC_CHECK_TIME_MS(1000))
     1be:	8f 31       	cpi	r24, 0x1F	; 31
     1c0:	91 05       	cpc	r25, r1
     1c2:	28 f4       	brcc	.+10     	; 0x1ce <RTC_CallBack+0x1a>

void RTC_CallBack(void)
{
	/* monitor the battery charge every second */
	/* if the charge of battery below 1.5v, go to the low battery mode */
	AC_TimeCnt++;
     1c4:	80 93 59 3e 	sts	0x3E59, r24	; 0x803e59 <AC_TimeCnt>
     1c8:	90 93 5a 3e 	sts	0x3E5A, r25	; 0x803e5a <AC_TimeCnt+0x1>
     1cc:	18 c0       	rjmp	.+48     	; 0x1fe <RTC_CallBack+0x4a>
	if (AC_TimeCnt >= AC_CHECK_TIME_MS(1000))
	{
		AC_TimeCnt = 0;
     1ce:	10 92 59 3e 	sts	0x3E59, r1	; 0x803e59 <AC_TimeCnt>
     1d2:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <AC_TimeCnt+0x1>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     1d6:	0e 9a       	sbi	0x01, 6	; 1
     1d8:	87 e8       	ldi	r24, 0x87	; 135
     1da:	93 e1       	ldi	r25, 0x13	; 19
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <RTC_CallBack+0x28>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <RTC_CallBack+0x2e>
     1e2:	00 00       	nop
		PA6_set_level(true);
		_delay_ms(2);
		AC_0_init();
     1e4:	f2 d2       	rcall	.+1508   	; 0x7ca <AC_0_init>
     1e6:	87 e8       	ldi	r24, 0x87	; 135
     1e8:	93 e1       	ldi	r25, 0x13	; 19
     1ea:	01 97       	sbiw	r24, 0x01	; 1
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <RTC_CallBack+0x36>
     1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <RTC_CallBack+0x3c>
     1f0:	00 00       	nop
		_delay_ms(2);
		
		if ((AC0.STATUS & AC_STATE_bm) == 0)
     1f2:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <__TEXT_REGION_LENGTH__+0x700677>
     1f6:	84 ff       	sbrs	r24, 4
		LowBattery();
     1f8:	d0 df       	rcall	.-96     	; 0x19a <LowBattery>
		
		AC_0_Disable();
     1fa:	f1 d2       	rcall	.+1506   	; 0x7de <AC_0_Disable>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     1fc:	0e 98       	cbi	0x01, 6	; 1
		PA6_set_level(false);
	}
	
	/* count the time when the  finger on */
	if (SensorState == FINGER_OFF_DETECT)
     1fe:	80 91 67 3e 	lds	r24, 0x3E67	; 0x803e67 <SensorState>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	49 f4       	brne	.+18     	; 0x218 <RTC_CallBack+0x64>
		fingerOnCnt++; 
     206:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <fingerOnCnt>
     20a:	90 91 66 3e 	lds	r25, 0x3E66	; 0x803e66 <fingerOnCnt+0x1>
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	80 93 65 3e 	sts	0x3E65, r24	; 0x803e65 <fingerOnCnt>
     214:	90 93 66 3e 	sts	0x3E66, r25	; 0x803e66 <fingerOnCnt+0x1>
	
	/* freeze the edge detection for 100 ms after open the radiotube */
	if(edgeDetectFreeze == 1)
     218:	80 91 60 3e 	lds	r24, 0x3E60	; 0x803e60 <edgeDetectFreeze>
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	49 f4       	brne	.+18     	; 0x232 <RTC_CallBack+0x7e>
		edgeFreezeCnt++;
     220:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <edgeFreezeCnt>
     224:	90 91 5f 3e 	lds	r25, 0x3E5F	; 0x803e5f <edgeFreezeCnt+0x1>
     228:	01 96       	adiw	r24, 0x01	; 1
     22a:	80 93 5e 3e 	sts	0x3E5E, r24	; 0x803e5e <edgeFreezeCnt>
     22e:	90 93 5f 3e 	sts	0x3E5F, r25	; 0x803e5f <edgeFreezeCnt+0x1>

	if (edgeFreezeCnt > RADIOTUBE_FREEZE_TIME_MS(100))
     232:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <edgeFreezeCnt>
     236:	90 91 5f 3e 	lds	r25, 0x3E5F	; 0x803e5f <edgeFreezeCnt+0x1>
     23a:	04 97       	sbiw	r24, 0x04	; 4
     23c:	30 f0       	brcs	.+12     	; 0x24a <RTC_CallBack+0x96>
	{
		edgeFreezeCnt = 0;
     23e:	10 92 5e 3e 	sts	0x3E5E, r1	; 0x803e5e <edgeFreezeCnt>
     242:	10 92 5f 3e 	sts	0x3E5F, r1	; 0x803e5f <edgeFreezeCnt+0x1>
		edgeDetectFreeze = 0;
     246:	10 92 60 3e 	sts	0x3E60, r1	; 0x803e60 <edgeDetectFreeze>
	}
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
     24a:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <RadiotubeState>
     24e:	81 11       	cpse	r24, r1
     250:	23 c0       	rjmp	.+70     	; 0x298 <RTC_CallBack+0xe4>
	{
		RadiotubeOnTime++;
     252:	80 91 61 3e 	lds	r24, 0x3E61	; 0x803e61 <RadiotubeOnTime>
     256:	90 91 62 3e 	lds	r25, 0x3E62	; 0x803e62 <RadiotubeOnTime+0x1>
     25a:	a0 91 63 3e 	lds	r26, 0x3E63	; 0x803e63 <RadiotubeOnTime+0x2>
     25e:	b0 91 64 3e 	lds	r27, 0x3E64	; 0x803e64 <RadiotubeOnTime+0x3>
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	a1 1d       	adc	r26, r1
     266:	b1 1d       	adc	r27, r1
		if(RadiotubeOnTime > RADIOTUBE_AUTO_CLOSE_TIME_MIN(3))
     268:	8a 3f       	cpi	r24, 0xFA	; 250
     26a:	25 e1       	ldi	r18, 0x15	; 21
     26c:	92 07       	cpc	r25, r18
     26e:	a1 05       	cpc	r26, r1
     270:	b1 05       	cpc	r27, r1
     272:	48 f4       	brcc	.+18     	; 0x286 <RTC_CallBack+0xd2>
	
	/* radiotube will close automatically 
		when it open more than 3 mins */
	if(RadiotubeState == ON)
	{
		RadiotubeOnTime++;
     274:	80 93 61 3e 	sts	0x3E61, r24	; 0x803e61 <RadiotubeOnTime>
     278:	90 93 62 3e 	sts	0x3E62, r25	; 0x803e62 <RadiotubeOnTime+0x1>
     27c:	a0 93 63 3e 	sts	0x3E63, r26	; 0x803e63 <RadiotubeOnTime+0x2>
     280:	b0 93 64 3e 	sts	0x3E64, r27	; 0x803e64 <RadiotubeOnTime+0x3>
     284:	08 95       	ret
		if(RadiotubeOnTime > RADIOTUBE_AUTO_CLOSE_TIME_MIN(3))
		{
			RadiotubeOnTime = 0;
     286:	10 92 61 3e 	sts	0x3E61, r1	; 0x803e61 <RadiotubeOnTime>
     28a:	10 92 62 3e 	sts	0x3E62, r1	; 0x803e62 <RadiotubeOnTime+0x1>
     28e:	10 92 63 3e 	sts	0x3E63, r1	; 0x803e63 <RadiotubeOnTime+0x2>
     292:	10 92 64 3e 	sts	0x3E64, r1	; 0x803e64 <RadiotubeOnTime+0x3>
			Radiotube_Handle();
     296:	45 df       	rcall	.-374    	; 0x122 <Radiotube_Handle>
     298:	08 95       	ret

0000029a <TOUCH_DeltaSmoothing>:
}


int16_t TOUCH_DeltaSmoothing(int16_t curDelta)
{		
	if (edgeDetectFreeze == 1)
     29a:	20 91 60 3e 	lds	r18, 0x3E60	; 0x803e60 <edgeDetectFreeze>
     29e:	21 30       	cpi	r18, 0x01	; 1
     2a0:	79 f0       	breq	.+30     	; 0x2c0 <TOUCH_DeltaSmoothing+0x26>
		return 0;
	else
		return abs(curDelta - filteredDeltaValue);
     2a2:	20 91 5c 3e 	lds	r18, 0x3E5C	; 0x803e5c <filteredDeltaValue>
     2a6:	30 91 5d 3e 	lds	r19, 0x3E5D	; 0x803e5d <filteredDeltaValue+0x1>
     2aa:	82 1b       	sub	r24, r18
     2ac:	93 0b       	sbc	r25, r19
     2ae:	9c 01       	movw	r18, r24
     2b0:	22 f4       	brpl	.+8      	; 0x2ba <TOUCH_DeltaSmoothing+0x20>
     2b2:	22 27       	eor	r18, r18
     2b4:	33 27       	eor	r19, r19
     2b6:	28 1b       	sub	r18, r24
     2b8:	39 0b       	sbc	r19, r25
     2ba:	82 2f       	mov	r24, r18
     2bc:	93 2f       	mov	r25, r19
     2be:	08 95       	ret


int16_t TOUCH_DeltaSmoothing(int16_t curDelta)
{		
	if (edgeDetectFreeze == 1)
		return 0;
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
	else
		return abs(curDelta - filteredDeltaValue);
}
     2c4:	08 95       	ret

000002c6 <main>:

int main(void)
{
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     2c6:	d2 de       	rcall	.-604    	; 0x6c <atmel_start_init>

	switch(SensorState)
	{
		case FINGER_ON_DETECT:
			if (edgeStatus == EDGE_RISING)
				SensorState = FINGER_OFF_DETECT;
     2c8:	dd 24       	eor	r13, r13
     2ca:	d3 94       	inc	r13
	}
	
	if (STRONG_EDGE_THRESHOLD >= 80)
		STRONG_EDGE_THRESHOLD = 80;
	else if (STRONG_EDGE_THRESHOLD <= 35)
		STRONG_EDGE_THRESHOLD = 35;
     2cc:	0f 2e       	mov	r0, r31
     2ce:	f3 e2       	ldi	r31, 0x23	; 35
     2d0:	ef 2e       	mov	r14, r31
     2d2:	f1 2c       	mov	r15, r1
     2d4:	f0 2d       	mov	r31, r0
			noiseCnt = 0;
		}
	}
	
	if (STRONG_EDGE_THRESHOLD >= 80)
		STRONG_EDGE_THRESHOLD = 80;
     2d6:	00 e5       	ldi	r16, 0x50	; 80
     2d8:	10 e0       	ldi	r17, 0x00	; 0
	//Radiotube_Test();
	
	/* Replace with your application code */
	while(1) 
	{
		wdt_reset();
     2da:	a8 95       	wdr
{
	uint8_t keyStatus = 0;
	uint8_t edgeStatus = EDGE_NONE;
	
	///* Does acquisition and post-processing */
	touch_process();
     2dc:	da d1       	rcall	.+948    	; 0x692 <touch_process>
	
	if (measurement_done_touch == 0)
     2de:	80 91 6a 3e 	lds	r24, 0x3E6A	; 0x803e6a <measurement_done_touch>
     2e2:	88 23       	and	r24, r24
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <main+0x22>
     2e6:	95 c0       	rjmp	.+298    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		return keyStatus;
		
	if (edgeDetectFreeze == 1)
     2e8:	80 91 60 3e 	lds	r24, 0x3E60	; 0x803e60 <edgeDetectFreeze>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <main+0x2c>
     2f0:	90 c0       	rjmp	.+288    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
{
	int16_t curDelta;
	int16_t deltaDerivativeAbs,deltaDerivative;
	uint8_t edgeStatus = EDGE_NONE;
	
	curDelta = get_sensor_node_signal(0);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	10 d2       	rcall	.+1056   	; 0x718 <get_sensor_node_signal>
     2f8:	ec 01       	movw	r28, r24
	curDelta -= get_sensor_node_reference(0);
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	19 d2       	rcall	.+1074   	; 0x732 <get_sensor_node_reference>
     300:	9e 01       	movw	r18, r28
     302:	28 1b       	sub	r18, r24
     304:	39 0b       	sbc	r19, r25
     306:	c9 01       	movw	r24, r18
	
	deltaDerivative = curDelta - filteredDeltaValue;
     308:	20 91 5c 3e 	lds	r18, 0x3E5C	; 0x803e5c <filteredDeltaValue>
     30c:	30 91 5d 3e 	lds	r19, 0x3E5D	; 0x803e5d <filteredDeltaValue+0x1>
     310:	ac 01       	movw	r20, r24
     312:	42 1b       	sub	r20, r18
     314:	53 0b       	sbc	r21, r19
     316:	9a 01       	movw	r18, r20
	deltaDerivativeAbs = abs(deltaDerivative);
	filteredDeltaValue = curDelta;
     318:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <filteredDeltaValue>
     31c:	90 93 5d 3e 	sts	0x3E5D, r25	; 0x803e5d <filteredDeltaValue+0x1>
	
	if (deltaDerivativeAbs >= STRONG_EDGE_THRESHOLD)
     320:	ca 01       	movw	r24, r20
     322:	55 23       	and	r21, r21
     324:	24 f4       	brge	.+8      	; 0x32e <main+0x68>
     326:	88 27       	eor	r24, r24
     328:	99 27       	eor	r25, r25
     32a:	84 1b       	sub	r24, r20
     32c:	95 0b       	sbc	r25, r21
     32e:	40 91 04 3e 	lds	r20, 0x3E04	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     332:	50 91 05 3e 	lds	r21, 0x3E05	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
     336:	84 17       	cp	r24, r20
     338:	95 07       	cpc	r25, r21
     33a:	28 f0       	brcs	.+10     	; 0x346 <main+0x80>
	{
		/* this is an strong edge */
		if(deltaDerivative > 0)
     33c:	12 16       	cp	r1, r18
     33e:	13 06       	cpc	r1, r19
     340:	24 f1       	brlt	.+72     	; 0x38a <main+0xc4>
			edgeStatus = EDGE_RISING;
		else 
			edgeStatus = EDGE_FALLING;
     342:	22 e0       	ldi	r18, 0x02	; 2
     344:	25 c0       	rjmp	.+74     	; 0x390 <main+0xca>
	}
	else if (deltaDerivativeAbs >= WEAK_EDGE_THRESHOLD)
     346:	20 91 02 3e 	lds	r18, 0x3E02	; 0x803e02 <WEAK_EDGE_THRESHOLD>
     34a:	30 91 03 3e 	lds	r19, 0x3E03	; 0x803e03 <WEAK_EDGE_THRESHOLD+0x1>
     34e:	82 17       	cp	r24, r18
     350:	93 07       	cpc	r25, r19
     352:	50 f0       	brcs	.+20     	; 0x368 <main+0xa2>
	{
		/* this is an weak edge */
		STRONG_EDGE_THRESHOLD++;
     354:	4f 5f       	subi	r20, 0xFF	; 255
     356:	5f 4f       	sbci	r21, 0xFF	; 255
     358:	40 93 04 3e 	sts	0x3E04, r20	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     35c:	50 93 05 3e 	sts	0x3E05, r21	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
		noiseCnt = 0;
     360:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <__data_end>
uint8_t noiseCnt = 0;
static uint8_t TOUCH_DeltaEdgeDetct(void)
{
	int16_t curDelta;
	int16_t deltaDerivativeAbs,deltaDerivative;
	uint8_t edgeStatus = EDGE_NONE;
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	14 c0       	rjmp	.+40     	; 0x390 <main+0xca>
		STRONG_EDGE_THRESHOLD++;
		noiseCnt = 0;
	}
	else
	{
		noiseCnt++;
     368:	80 91 58 3e 	lds	r24, 0x3E58	; 0x803e58 <__data_end>
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	80 93 58 3e 	sts	0x3E58, r24	; 0x803e58 <__data_end>
		if (noiseCnt >= 100)
     372:	84 36       	cpi	r24, 0x64	; 100
     374:	60 f0       	brcs	.+24     	; 0x38e <main+0xc8>
		{
			STRONG_EDGE_THRESHOLD--;
     376:	41 50       	subi	r20, 0x01	; 1
     378:	51 09       	sbc	r21, r1
     37a:	40 93 04 3e 	sts	0x3E04, r20	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     37e:	50 93 05 3e 	sts	0x3E05, r21	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
			noiseCnt = 0;
     382:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <__data_end>
uint8_t noiseCnt = 0;
static uint8_t TOUCH_DeltaEdgeDetct(void)
{
	int16_t curDelta;
	int16_t deltaDerivativeAbs,deltaDerivative;
	uint8_t edgeStatus = EDGE_NONE;
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	03 c0       	rjmp	.+6      	; 0x390 <main+0xca>
	
	if (deltaDerivativeAbs >= STRONG_EDGE_THRESHOLD)
	{
		/* this is an strong edge */
		if(deltaDerivative > 0)
			edgeStatus = EDGE_RISING;
     38a:	2d 2d       	mov	r18, r13
     38c:	01 c0       	rjmp	.+2      	; 0x390 <main+0xca>
uint8_t noiseCnt = 0;
static uint8_t TOUCH_DeltaEdgeDetct(void)
{
	int16_t curDelta;
	int16_t deltaDerivativeAbs,deltaDerivative;
	uint8_t edgeStatus = EDGE_NONE;
     38e:	20 e0       	ldi	r18, 0x00	; 0
			STRONG_EDGE_THRESHOLD--;
			noiseCnt = 0;
		}
	}
	
	if (STRONG_EDGE_THRESHOLD >= 80)
     390:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     394:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
     398:	80 35       	cpi	r24, 0x50	; 80
     39a:	91 05       	cpc	r25, r1
     39c:	28 f0       	brcs	.+10     	; 0x3a8 <main+0xe2>
		STRONG_EDGE_THRESHOLD = 80;
     39e:	00 93 04 3e 	sts	0x3E04, r16	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     3a2:	10 93 05 3e 	sts	0x3E05, r17	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
     3a6:	42 c0       	rjmp	.+132    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	else if (STRONG_EDGE_THRESHOLD <= 35)
     3a8:	84 97       	sbiw	r24, 0x24	; 36
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <main+0xe8>
     3ac:	3f c0       	rjmp	.+126    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		STRONG_EDGE_THRESHOLD = 35;
     3ae:	e0 92 04 3e 	sts	0x3E04, r14	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     3b2:	f0 92 05 3e 	sts	0x3E05, r15	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
     3b6:	3a c0       	rjmp	.+116    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	

	switch(SensorState)
	{
		case FINGER_ON_DETECT:
			if (edgeStatus == EDGE_RISING)
     3b8:	21 30       	cpi	r18, 0x01	; 1
     3ba:	09 f0       	breq	.+2      	; 0x3be <main+0xf8>
     3bc:	4a c0       	rjmp	.+148    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				SensorState = FINGER_OFF_DETECT;
     3be:	d0 92 67 3e 	sts	0x3E67, r13	; 0x803e67 <SensorState>
     3c2:	47 c0       	rjmp	.+142    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		break;
		
		case FINGER_OFF_DETECT:
			/* state will roll back if rising edge appears. */
			if (edgeStatus == EDGE_RISING)
     3c4:	21 30       	cpi	r18, 0x01	; 1
     3c6:	29 f4       	brne	.+10     	; 0x3d2 <main+0x10c>
				fingerOnCnt = 0;
     3c8:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <fingerOnCnt>
     3cc:	10 92 66 3e 	sts	0x3E66, r1	; 0x803e66 <fingerOnCnt+0x1>
     3d0:	40 c0       	rjmp	.+128    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			/* the time duration of effective touch should between 70ms to 500ms */
			else if (fingerOnCnt >= FINGER_ON_MAXIMUM_TIME_MS(500))
     3d2:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <fingerOnCnt>
     3d6:	90 91 66 3e 	lds	r25, 0x3E66	; 0x803e66 <fingerOnCnt+0x1>
     3da:	0f 97       	sbiw	r24, 0x0f	; 15
     3dc:	38 f0       	brcs	.+14     	; 0x3ec <main+0x126>
			{
				fingerOnCnt = 0;
     3de:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <fingerOnCnt>
     3e2:	10 92 66 3e 	sts	0x3E66, r1	; 0x803e66 <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     3e6:	10 92 67 3e 	sts	0x3E67, r1	; 0x803e67 <SensorState>
     3ea:	33 c0       	rjmp	.+102    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			}
			else if (edgeStatus == EDGE_FALLING)
     3ec:	22 30       	cpi	r18, 0x02	; 2
     3ee:	89 f5       	brne	.+98     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			{
				if (fingerOnCnt >= FINGER_ON_MINIMUM_TIME_MS(70))
     3f0:	80 91 65 3e 	lds	r24, 0x3E65	; 0x803e65 <fingerOnCnt>
     3f4:	90 91 66 3e 	lds	r25, 0x3E66	; 0x803e66 <fingerOnCnt+0x1>
					keyStatus = 1;
					
				fingerOnCnt = 0;
     3f8:	10 92 65 3e 	sts	0x3E65, r1	; 0x803e65 <fingerOnCnt>
     3fc:	10 92 66 3e 	sts	0x3E66, r1	; 0x803e66 <fingerOnCnt+0x1>
				SensorState = FINGER_ON_DETECT;
     400:	10 92 67 3e 	sts	0x3E67, r1	; 0x803e67 <SensorState>
			}
			break;
	}
	
	/* one cycle of measurement is done */
	measurement_done_touch = 0;
     404:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <measurement_done_touch>
	measureBusyFlag = 0;
     408:	10 92 5b 3e 	sts	0x3E5B, r1	; 0x803e5b <measureBusyFlag>
	/* Replace with your application code */
	while(1) 
	{
		wdt_reset();
		
		if(TOUCH_TouchDetect() == 1)
     40c:	02 97       	sbiw	r24, 0x02	; 2
     40e:	08 f0       	brcs	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			Radiotube_Handle();
     410:	88 de       	rcall	.-752    	; 0x122 <Radiotube_Handle>
		
		if (measureBusyFlag == 0)
     412:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <measureBusyFlag>
     416:	81 11       	cpse	r24, r1
     418:	60 cf       	rjmp	.-320    	; 0x2da <main+0x14>
		{
#ifdef _DEBUG
			MCU_GoToSleep(SLEEP_MODE_IDLE);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	af de       	rcall	.-674    	; 0x17e <MCU_GoToSleep>
     420:	5c cf       	rjmp	.-328    	; 0x2da <main+0x14>
			}
			break;
	}
	
	/* one cycle of measurement is done */
	measurement_done_touch = 0;
     422:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <measurement_done_touch>
	measureBusyFlag = 0;
     426:	10 92 5b 3e 	sts	0x3E5B, r1	; 0x803e5b <measureBusyFlag>
     42a:	f3 cf       	rjmp	.-26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	if (STRONG_EDGE_THRESHOLD >= 80)
		STRONG_EDGE_THRESHOLD = 80;
	else if (STRONG_EDGE_THRESHOLD <= 35)
		STRONG_EDGE_THRESHOLD = 35;
	
	WEAK_EDGE_THRESHOLD = STRONG_EDGE_THRESHOLD/2;
     42c:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <STRONG_EDGE_THRESHOLD>
     430:	90 91 05 3e 	lds	r25, 0x3E05	; 0x803e05 <STRONG_EDGE_THRESHOLD+0x1>
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <WEAK_EDGE_THRESHOLD>
     43c:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <WEAK_EDGE_THRESHOLD+0x1>
		
	edgeStatus = TOUCH_DeltaEdgeDetct();
	
	

	switch(SensorState)
     440:	80 91 67 3e 	lds	r24, 0x3E67	; 0x803e67 <SensorState>
     444:	88 23       	and	r24, r24
     446:	09 f4       	brne	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	b7 cf       	rjmp	.-146    	; 0x3b8 <main+0xf2>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	09 f4       	brne	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	ba cf       	rjmp	.-140    	; 0x3c4 <main+0xfe>
     450:	e8 cf       	rjmp	.-48     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			}
			break;
	}
	
	/* one cycle of measurement is done */
	measurement_done_touch = 0;
     452:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <measurement_done_touch>
	measureBusyFlag = 0;
     456:	10 92 5b 3e 	sts	0x3E5B, r1	; 0x803e5b <measureBusyFlag>
     45a:	db cf       	rjmp	.-74     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

0000045c <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     45c:	08 95       	ret

0000045e <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     45e:	cf 93       	push	r28
     460:	c8 2f       	mov	r28, r24
	while (!USART_is_tx_ready())
     462:	65 d2       	rcall	.+1226   	; 0x92e <USART_is_tx_ready>
     464:	88 23       	and	r24, r24
     466:	e9 f3       	breq	.-6      	; 0x462 <datastreamer_transmit+0x4>
		;

	USART_write(data_byte);
     468:	8c 2f       	mov	r24, r28
     46a:	6f d2       	rcall	.+1246   	; 0x94a <USART_write>

	while (USART_is_tx_busy())
     46c:	66 d2       	rcall	.+1228   	; 0x93a <USART_is_tx_busy>
     46e:	81 11       	cpse	r24, r1
     470:	fd cf       	rjmp	.-6      	; 0x46c <datastreamer_transmit+0xe>
		;
}
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	00 d0       	rcall	.+0      	; 0x484 <datastreamer_output+0xe>
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
     488:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <sequence.4393>
     48c:	8f 70       	andi	r24, 0x0F	; 15
     48e:	79 f4       	brne	.+30     	; 0x4ae <datastreamer_output+0x38>
     490:	06 e0       	ldi	r16, 0x06	; 6
     492:	1e e3       	ldi	r17, 0x3E	; 62
     494:	0f 2e       	mov	r0, r31
     496:	f9 e1       	ldi	r31, 0x19	; 25
     498:	ef 2e       	mov	r14, r31
     49a:	fe e3       	ldi	r31, 0x3E	; 62
     49c:	ff 2e       	mov	r15, r31
     49e:	f0 2d       	mov	r31, r0
		for (i = 0; i < sizeof(data); i++) {
			datastreamer_transmit(data[i]);
     4a0:	f8 01       	movw	r30, r16
     4a2:	81 91       	ld	r24, Z+
     4a4:	8f 01       	movw	r16, r30
     4a6:	db df       	rcall	.-74     	; 0x45e <datastreamer_transmit>
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     4a8:	e0 16       	cp	r14, r16
     4aa:	f1 06       	cpc	r15, r17
     4ac:	c9 f7       	brne	.-14     	; 0x4a0 <datastreamer_output+0x2a>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     4ae:	85 e5       	ldi	r24, 0x55	; 85
     4b0:	d6 df       	rcall	.-84     	; 0x45e <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     4b2:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <sequence.4393>
     4b6:	d3 df       	rcall	.-90     	; 0x45e <datastreamer_transmit>

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     4b8:	19 82       	std	Y+1, r1	; 0x01
     4ba:	1a 82       	std	Y+2, r1	; 0x02
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	9a 81       	ldd	r25, Y+2	; 0x02
     4c0:	89 2b       	or	r24, r25
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <datastreamer_output+0x50>
     4c4:	46 c0       	rjmp	.+140    	; 0x552 <datastreamer_output+0xdc>
		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ca:	26 d1       	rcall	.+588    	; 0x718 <get_sensor_node_signal>
     4cc:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     4ce:	c7 df       	rcall	.-114    	; 0x45e <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     4d0:	81 2f       	mov	r24, r17
     4d2:	c5 df       	rcall	.-118    	; 0x45e <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	2c d1       	rcall	.+600    	; 0x732 <get_sensor_node_reference>
		u16temp_output = TOUCH_GetTouchSignal();
     4da:	1a de       	rcall	.-972    	; 0x110 <TOUCH_GetTouchSignal>
     4dc:	19 2f       	mov	r17, r25
		datastreamer_transmit((uint8_t)u16temp_output);
     4de:	bf df       	rcall	.-130    	; 0x45e <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     4e0:	81 2f       	mov	r24, r17
     4e2:	bd df       	rcall	.-134    	; 0x45e <datastreamer_transmit>
		
		

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	9a 81       	ldd	r25, Y+2	; 0x02
     4e8:	17 d1       	rcall	.+558    	; 0x718 <get_sensor_node_signal>
     4ea:	8c 01       	movw	r16, r24
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	20 d1       	rcall	.+576    	; 0x732 <get_sensor_node_reference>
		
		/* delta smoothing */
		temp_int_calc = TOUCH_DeltaSmoothing(temp_int_calc);
     4f2:	98 01       	movw	r18, r16
     4f4:	28 1b       	sub	r18, r24
     4f6:	39 0b       	sbc	r19, r25
     4f8:	c9 01       	movw	r24, r18
     4fa:	cf de       	rcall	.-610    	; 0x29a <TOUCH_DeltaSmoothing>
     4fc:	19 2f       	mov	r17, r25
		
		u16temp_output = (uint16_t)(temp_int_calc);
		datastreamer_transmit((uint8_t)u16temp_output);
     4fe:	af df       	rcall	.-162    	; 0x45e <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     500:	81 2f       	mov	r24, r17
     502:	ad df       	rcall	.-166    	; 0x45e <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	21 d1       	rcall	.+578    	; 0x74c <get_sensor_cc_val>
     50a:	19 2f       	mov	r17, r25
		//u16temp_output = TOUCH_SNR();
		
		datastreamer_transmit((uint8_t)u16temp_output);
     50c:	a8 df       	rcall	.-176    	; 0x45e <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     50e:	81 2f       	mov	r24, r17
     510:	a6 df       	rcall	.-180    	; 0x45e <datastreamer_transmit>
		u8temp_output = NODE_PRSC(qtlib_acq_set1.qtm_acq_node_config[count_bytes_out].node_rsel_prsc);
		datastreamer_transmit(u8temp_output);
#endif
#endif
		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	9a 81       	ldd	r25, Y+2	; 0x02
     516:	27 d1       	rcall	.+590    	; 0x766 <get_sensor_state>
		if (0u != (u8temp_output & 0x80)) {
     518:	88 23       	and	r24, r24
     51a:	1c f4       	brge	.+6      	; 0x522 <datastreamer_output+0xac>
			datastreamer_transmit(0x01);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	9f df       	rcall	.-194    	; 0x45e <datastreamer_transmit>
     520:	02 c0       	rjmp	.+4      	; 0x526 <datastreamer_output+0xb0>
		} else {
			datastreamer_transmit(0x00);
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	9c df       	rcall	.-200    	; 0x45e <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	fc 01       	movw	r30, r24
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	8e 0f       	add	r24, r30
     532:	9f 1f       	adc	r25, r31
     534:	fc 01       	movw	r30, r24
     536:	e7 5c       	subi	r30, 0xC7	; 199
     538:	f1 4c       	sbci	r31, 0xC1	; 193
     53a:	80 81       	ld	r24, Z
     53c:	90 df       	rcall	.-224    	; 0x45e <datastreamer_transmit>
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);

	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	89 2b       	or	r24, r25
     54e:	09 f4       	brne	.+2      	; 0x552 <datastreamer_output+0xdc>
     550:	ba cf       	rjmp	.-140    	; 0x4c6 <datastreamer_output+0x50>
		datastreamer_transmit(qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->median_filter_freq[count]);
	}
#endif
		
	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     552:	80 91 69 3e 	lds	r24, 0x3E69	; 0x803e69 <module_error_code>
     556:	83 df       	rcall	.-250    	; 0x45e <datastreamer_transmit>
	
	/* Frame End */
	datastreamer_transmit(sequence++);
     558:	80 91 68 3e 	lds	r24, 0x3E68	; 0x803e68 <sequence.4393>
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	98 0f       	add	r25, r24
     560:	90 93 68 3e 	sts	0x3E68, r25	; 0x803e68 <sequence.4393>
     564:	7c df       	rcall	.-264    	; 0x45e <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     566:	8a ea       	ldi	r24, 0xAA	; 170
     568:	7a df       	rcall	.-268    	; 0x45e <datastreamer_transmit>
}
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	08 95       	ret

0000057c <qtm_measure_complete_callback>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     57c:	e6 e8       	ldi	r30, 0x86	; 134
     57e:	fe e3       	ldi	r31, 0x3E	; 62
     580:	80 81       	ld	r24, Z
     582:	82 60       	ori	r24, 0x02	; 2
     584:	80 83       	st	Z, r24
     586:	08 95       	ret

00000588 <qtm_post_process_complete>:
     588:	e0 91 31 3e 	lds	r30, 0x3E31	; 0x803e31 <qtlib_key_set1>
     58c:	f0 91 32 3e 	lds	r31, 0x3E32	; 0x803e32 <qtlib_key_set1+0x1>
     590:	80 81       	ld	r24, Z
     592:	88 23       	and	r24, r24
     594:	44 f4       	brge	.+16     	; 0x5a6 <qtm_post_process_complete+0x1e>
     596:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <p_qtm_control>
     59a:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <p_qtm_control+0x1>
     59e:	80 81       	ld	r24, Z
     5a0:	84 60       	ori	r24, 0x04	; 4
     5a2:	80 83       	st	Z, r24
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <qtm_post_process_complete+0x24>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	80 93 6a 3e 	sts	0x3E6A, r24	; 0x803e6a <measurement_done_touch>
     5ac:	64 df       	rcall	.-312    	; 0x476 <datastreamer_output>
     5ae:	08 95       	ret

000005b0 <qtm_error_callback>:
     5b0:	88 23       	and	r24, r24
     5b2:	24 f4       	brge	.+8      	; 0x5bc <qtm_error_callback+0xc>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 69 3e 	sts	0x3E69, r24	; 0x803e69 <module_error_code>
     5ba:	09 c0       	rjmp	.+18     	; 0x5ce <qtm_error_callback+0x1e>
     5bc:	86 fd       	sbrc	r24, 6
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <qtm_error_callback+0x16>
     5c0:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <module_error_code>
     5c4:	04 c0       	rjmp	.+8      	; 0x5ce <qtm_error_callback+0x1e>
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	8e 5f       	subi	r24, 0xFE	; 254
     5ca:	80 93 69 3e 	sts	0x3E69, r24	; 0x803e69 <module_error_code>
     5ce:	53 df       	rcall	.-346    	; 0x476 <datastreamer_output>
     5d0:	08 95       	ret

000005d2 <init_complete_callback>:
     5d2:	82 e8       	ldi	r24, 0x82	; 130
     5d4:	9e e3       	ldi	r25, 0x3E	; 62
     5d6:	d5 d9       	rcall	.-3158   	; 0xfffff982 <__eeprom_end+0xff7ef982>
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	86 e4       	ldi	r24, 0x46	; 70
     5de:	9e e3       	ldi	r25, 0x3E	; 62
     5e0:	3a da       	rcall	.-2956   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	86 e4       	ldi	r24, 0x46	; 70
     5e8:	9e e3       	ldi	r25, 0x3E	; 62
     5ea:	54 da       	rcall	.-2904   	; 0xfffffa94 <__eeprom_end+0xff7efa94>
     5ec:	4d e7       	ldi	r20, 0x7D	; 125
     5ee:	5e e3       	ldi	r21, 0x3E	; 62
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	81 e3       	ldi	r24, 0x31	; 49
     5f4:	9e e3       	ldi	r25, 0x3E	; 62
     5f6:	34 d2       	rcall	.+1128   	; 0xa60 <qtm_init_sensor_key>
     5f8:	08 95       	ret

000005fa <Timer_set_period>:
     5fa:	e0 e4       	ldi	r30, 0x40	; 64
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	92 fd       	sbrc	r25, 2
     602:	fd cf       	rjmp	.-6      	; 0x5fe <Timer_set_period+0x4>
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     60a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     60e:	08 95       	ret

00000610 <touch_init>:
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	f3 df       	rcall	.-26     	; 0x5fa <Timer_set_period>
     614:	e4 e1       	ldi	r30, 0x14	; 20
     616:	f4 e0       	ldi	r31, 0x04	; 4
     618:	80 81       	ld	r24, Z
     61a:	87 7f       	andi	r24, 0xF7	; 247
     61c:	80 83       	st	Z, r24
     61e:	e6 e8       	ldi	r30, 0x86	; 134
     620:	fe e3       	ldi	r31, 0x3E	; 62
     622:	10 82       	st	Z, r1
     624:	8d e2       	ldi	r24, 0x2D	; 45
     626:	9e e3       	ldi	r25, 0x3E	; 62
     628:	81 83       	std	Z+1, r24	; 0x01
     62a:	92 83       	std	Z+2, r25	; 0x02
     62c:	89 e2       	ldi	r24, 0x29	; 41
     62e:	9e e3       	ldi	r25, 0x3E	; 62
     630:	83 83       	std	Z+3, r24	; 0x03
     632:	94 83       	std	Z+4, r25	; 0x04
     634:	81 e2       	ldi	r24, 0x21	; 33
     636:	9e e3       	ldi	r25, 0x3E	; 62
     638:	85 83       	std	Z+5, r24	; 0x05
     63a:	96 83       	std	Z+6, r25	; 0x06
     63c:	85 e2       	ldi	r24, 0x25	; 37
     63e:	9e e3       	ldi	r25, 0x3E	; 62
     640:	87 83       	std	Z+7, r24	; 0x07
     642:	90 87       	std	Z+8, r25	; 0x08
     644:	89 e1       	ldi	r24, 0x19	; 25
     646:	9e e3       	ldi	r25, 0x3E	; 62
     648:	81 87       	std	Z+9, r24	; 0x09
     64a:	92 87       	std	Z+10, r25	; 0x0a
     64c:	8d e1       	ldi	r24, 0x1D	; 29
     64e:	9e e3       	ldi	r25, 0x3E	; 62
     650:	83 87       	std	Z+11, r24	; 0x0b
     652:	94 87       	std	Z+12, r25	; 0x0c
     654:	8b e0       	ldi	r24, 0x0B	; 11
     656:	9b e0       	ldi	r25, 0x0B	; 11
     658:	85 87       	std	Z+13, r24	; 0x0d
     65a:	96 87       	std	Z+14, r25	; 0x0e
     65c:	89 ee       	ldi	r24, 0xE9	; 233
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	87 87       	std	Z+15, r24	; 0x0f
     662:	90 8b       	std	Z+16, r25	; 0x10
     664:	88 ed       	ldi	r24, 0xD8	; 216
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	81 8b       	std	Z+17, r24	; 0x11
     66a:	92 8b       	std	Z+18, r25	; 0x12
     66c:	8e eb       	ldi	r24, 0xBE	; 190
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	83 8b       	std	Z+19, r24	; 0x13
     672:	94 8b       	std	Z+20, r25	; 0x14
     674:	15 8a       	std	Z+21, r1	; 0x15
     676:	16 8a       	std	Z+22, r1	; 0x16
     678:	84 ec       	ldi	r24, 0xC4	; 196
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	87 8b       	std	Z+23, r24	; 0x17
     67e:	90 8f       	std	Z+24, r25	; 0x18
     680:	cf 01       	movw	r24, r30
     682:	d0 d5       	rcall	.+2976   	; 0x1224 <qtm_binding_layer_init>
     684:	ca d5       	rcall	.+2964   	; 0x121a <qmt_get_binding_layer_ptr>
     686:	80 93 84 3e 	sts	0x3E84, r24	; 0x803e84 <p_qtm_control>
     68a:	90 93 85 3e 	sts	0x3E85, r25	; 0x803e85 <p_qtm_control+0x1>
     68e:	e6 de       	rcall	.-564    	; 0x45c <datastreamer_init>
     690:	08 95       	ret

00000692 <touch_process>:
     692:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <p_qtm_control>
     696:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <p_qtm_control+0x1>
     69a:	80 81       	ld	r24, Z
     69c:	80 ff       	sbrs	r24, 0
     69e:	0b c0       	rjmp	.+22     	; 0x6b6 <touch_process+0x24>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	1e d6       	rcall	.+3132   	; 0x12e0 <qtm_lib_start_acquisition>
     6a4:	81 11       	cpse	r24, r1
     6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <touch_process+0x24>
     6a8:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <p_qtm_control>
     6ac:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <p_qtm_control+0x1>
     6b0:	80 81       	ld	r24, Z
     6b2:	8e 7f       	andi	r24, 0xFE	; 254
     6b4:	80 83       	st	Z, r24
     6b6:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <p_qtm_control>
     6ba:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <p_qtm_control+0x1>
     6be:	80 81       	ld	r24, Z
     6c0:	81 ff       	sbrs	r24, 1
     6c2:	0e c0       	rjmp	.+28     	; 0x6e0 <touch_process+0x4e>
     6c4:	5c d6       	rcall	.+3256   	; 0x137e <qtm_lib_acq_process>
     6c6:	81 11       	cpse	r24, r1
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <touch_process+0x3c>
     6ca:	61 d6       	rcall	.+3266   	; 0x138e <qtm_lib_post_process>
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <touch_process+0x40>
     6ce:	80 e8       	ldi	r24, 0x80	; 128
     6d0:	6f df       	rcall	.-290    	; 0x5b0 <qtm_error_callback>
     6d2:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <p_qtm_control>
     6d6:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <p_qtm_control+0x1>
     6da:	80 81       	ld	r24, Z
     6dc:	8d 7f       	andi	r24, 0xFD	; 253
     6de:	80 83       	st	Z, r24
     6e0:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <p_qtm_control>
     6e4:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <p_qtm_control+0x1>
     6e8:	80 81       	ld	r24, Z
     6ea:	82 ff       	sbrs	r24, 2
     6ec:	09 c0       	rjmp	.+18     	; 0x700 <touch_process+0x6e>
     6ee:	81 60       	ori	r24, 0x01	; 1
     6f0:	80 83       	st	Z, r24
     6f2:	e0 91 84 3e 	lds	r30, 0x3E84	; 0x803e84 <p_qtm_control>
     6f6:	f0 91 85 3e 	lds	r31, 0x3E85	; 0x803e85 <p_qtm_control+0x1>
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	80 83       	st	Z, r24
     700:	08 95       	ret

00000702 <touch_timer_handler>:
     702:	0b dd       	rcall	.-1514   	; 0x11a <TOUCH_SetMeasureBusyFlag>
     704:	e6 e8       	ldi	r30, 0x86	; 134
     706:	fe e3       	ldi	r31, 0x3E	; 62
     708:	80 81       	ld	r24, Z
     70a:	81 60       	ori	r24, 0x01	; 1
     70c:	80 83       	st	Z, r24
     70e:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__data_start>
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9a d1       	rcall	.+820    	; 0xa4a <qtm_update_qtlib_timer>
     716:	08 95       	ret

00000718 <get_sensor_node_signal>:
     718:	9c 01       	movw	r18, r24
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	82 0f       	add	r24, r18
     724:	93 1f       	adc	r25, r19
     726:	fc 01       	movw	r30, r24
     728:	e3 58       	subi	r30, 0x83	; 131
     72a:	f1 4c       	sbci	r31, 0xC1	; 193
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	92 81       	ldd	r25, Z+2	; 0x02
     730:	08 95       	ret

00000732 <get_sensor_node_reference>:
     732:	9c 01       	movw	r18, r24
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	fc 01       	movw	r30, r24
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	e1 56       	subi	r30, 0x61	; 97
     744:	f1 4c       	sbci	r31, 0xC1	; 193
     746:	84 81       	ldd	r24, Z+4	; 0x04
     748:	95 81       	ldd	r25, Z+5	; 0x05
     74a:	08 95       	ret

0000074c <get_sensor_cc_val>:
     74c:	9c 01       	movw	r18, r24
     74e:	22 0f       	add	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	22 0f       	add	r18, r18
     754:	33 1f       	adc	r19, r19
     756:	82 0f       	add	r24, r18
     758:	93 1f       	adc	r25, r19
     75a:	fc 01       	movw	r30, r24
     75c:	e3 58       	subi	r30, 0x83	; 131
     75e:	f1 4c       	sbci	r31, 0xC1	; 193
     760:	83 81       	ldd	r24, Z+3	; 0x03
     762:	94 81       	ldd	r25, Z+4	; 0x04
     764:	08 95       	ret

00000766 <get_sensor_state>:
     766:	9c 01       	movw	r18, r24
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	e0 91 35 3e 	lds	r30, 0x3E35	; 0x803e35 <qtlib_key_set1+0x4>
     778:	f0 91 36 3e 	lds	r31, 0x3E36	; 0x803e36 <qtlib_key_set1+0x5>
     77c:	e8 0f       	add	r30, r24
     77e:	f9 1f       	adc	r31, r25
     780:	80 81       	ld	r24, Z
     782:	08 95       	ret

00000784 <__vector_17>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	11 24       	eor	r1, r1
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
	qtm_t81x_ptc_handler_eoc();
     7a6:	b7 d9       	rcall	.-3218   	; 0xfffffb16 <__eeprom_end+0xff7efb16>
}
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	7f 91       	pop	r23
     7b6:	6f 91       	pop	r22
     7b8:	5f 91       	pop	r21
     7ba:	4f 91       	pop	r20
     7bc:	3f 91       	pop	r19
     7be:	2f 91       	pop	r18
     7c0:	0f 90       	pop	r0
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	0f 90       	pop	r0
     7c6:	1f 90       	pop	r1
     7c8:	18 95       	reti

000007ca <AC_0_init>:
 * \return Initialization status.
 */
int8_t AC_0_init()
{

	AC0.INTCTRL = 1 << AC_CMP_bp; /* Analog Comparator 0 Interrupt Enable: enabled */
     7ca:	e0 e7       	ldi	r30, 0x70	; 112
     7cc:	f6 e0       	ldi	r31, 0x06	; 6
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	86 83       	std	Z+6, r24	; 0x06

	AC0.MUXCTRLA = 0 << AC_INVERT_bp    /* Invert AC Output: disabled */
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	82 83       	std	Z+2, r24	; 0x02
	               | AC_MUXNEG_VREF_gc  /* Voltage Reference */
	               | AC_MUXPOS_PIN0_gc; /* Positive Pin 0 */

	AC0.CTRLA = 1 << AC_ENABLE_bp       /* Enable: disabled */
     7d6:	81 e2       	ldi	r24, 0x21	; 33
     7d8:	80 83       	st	Z, r24
	            //| AC_LPMODE_EN_gc       /* Low power mode enabled */
	            | 0 << AC_OUTEN_bp      /* Output Buffer Enable: disabled */
	            | 0 << AC_RUNSTDBY_bp;  /* Run in Standby Mode: disabled */

	return 0;
}
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	08 95       	ret

000007de <AC_0_Disable>:



void AC_0_Disable(void)
{
	AC0.INTCTRL = 0 << AC_CMP_bp; /* Analog Comparator 0 Interrupt Enable: enabled */
     7de:	e0 e7       	ldi	r30, 0x70	; 112
     7e0:	f6 e0       	ldi	r31, 0x06	; 6
     7e2:	16 82       	std	Z+6, r1	; 0x06
	AC0.CTRLA = 0 << AC_ENABLE_bp;	/* Enable: disabled */
     7e4:	10 82       	st	Z, r1
     7e6:	08 95       	ret

000007e8 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	08 95       	ret

000007ec <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     7ec:	42 e0       	ldi	r20, 0x02	; 2
     7ee:	68 ed       	ldi	r22, 0xD8	; 216
     7f0:	88 e7       	ldi	r24, 0x78	; 120
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	7a d0       	rcall	.+244    	; 0x8ea <protected_write_io>
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	68 ed       	ldi	r22, 0xD8	; 216
     7fa:	81 e6       	ldi	r24, 0x61	; 97
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	75 d0       	rcall	.+234    	; 0x8ea <protected_write_io>
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	68 ed       	ldi	r22, 0xD8	; 216
     804:	80 e6       	ldi	r24, 0x60	; 96
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	70 d0       	rcall	.+224    	; 0x8ea <protected_write_io>
	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLA),
	             CLKCTRL_CLKSEL_OSC20M_gc /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */
	                 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	/* wait for system oscillator changing to finish */
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
     80a:	e0 e6       	ldi	r30, 0x60	; 96
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	83 81       	ldd	r24, Z+3	; 0x03
     810:	80 fd       	sbrc	r24, 0
     812:	fd cf       	rjmp	.-6      	; 0x80e <CLKCTRL_init+0x22>
	}

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret

00000818 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     818:	78 94       	sei

	return 0;
}
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	08 95       	ret

0000081e <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     81e:	e0 e1       	ldi	r30, 0x10	; 16
     820:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     822:	80 81       	ld	r24, Z
     824:	88 60       	ori	r24, 0x08	; 8
     826:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     828:	e8 31       	cpi	r30, 0x18	; 24
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	f8 07       	cpc	r31, r24
     82e:	c9 f7       	brne	.-14     	; 0x822 <mcu_init+0x4>
     830:	e0 e3       	ldi	r30, 0x30	; 48
     832:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     834:	80 81       	ld	r24, Z
     836:	88 60       	ori	r24, 0x08	; 8
     838:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     83a:	e8 33       	cpi	r30, 0x38	; 56
     83c:	84 e0       	ldi	r24, 0x04	; 4
     83e:	f8 07       	cpc	r31, r24
     840:	c9 f7       	brne	.-14     	; 0x834 <mcu_init+0x16>
     842:	e0 e5       	ldi	r30, 0x50	; 80
     844:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     846:	80 81       	ld	r24, Z
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     84c:	e8 35       	cpi	r30, 0x58	; 88
     84e:	84 e0       	ldi	r24, 0x04	; 4
     850:	f8 07       	cpc	r31, r24
     852:	c9 f7       	brne	.-14     	; 0x846 <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     854:	08 95       	ret

00000856 <AC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     856:	e7 e1       	ldi	r30, 0x17	; 23
     858:	f4 e0       	ldi	r31, 0x04	; 4
     85a:	80 81       	ld	r24, Z
     85c:	88 7f       	andi	r24, 0xF8	; 248
     85e:	84 60       	ori	r24, 0x04	; 4
     860:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     862:	80 81       	ld	r24, Z
     864:	87 7f       	andi	r24, 0xF7	; 247
     866:	80 83       	st	Z, r24
     868:	08 95       	ret

0000086a <USART_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     86a:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     86c:	e3 e3       	ldi	r30, 0x33	; 51
     86e:	f4 e0       	ldi	r31, 0x04	; 4
     870:	80 81       	ld	r24, Z
     872:	87 7f       	andi	r24, 0xF7	; 247
     874:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     876:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     878:	2a 98       	cbi	0x05, 2	; 5
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	false);

	USART_init();
     87a:	4f d0       	rcall	.+158    	; 0x91a <USART_init>
     87c:	08 95       	ret

0000087e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     87e:	cf df       	rcall	.-98     	; 0x81e <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     880:	00 98       	cbi	0x00, 0	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     882:	e0 e1       	ldi	r30, 0x10	; 16
     884:	f4 e0       	ldi	r31, 0x04	; 4
     886:	80 81       	ld	r24, Z
     888:	88 60       	ori	r24, 0x08	; 8
     88a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     88c:	02 98       	cbi	0x00, 2	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     88e:	e2 e1       	ldi	r30, 0x12	; 18
     890:	f4 e0       	ldi	r31, 0x04	; 4
     892:	80 81       	ld	r24, Z
     894:	88 60       	ori	r24, 0x08	; 8
     896:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     898:	03 98       	cbi	0x00, 3	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     89a:	e3 e1       	ldi	r30, 0x13	; 19
     89c:	f4 e0       	ldi	r31, 0x04	; 4
     89e:	80 81       	ld	r24, Z
     8a0:	88 60       	ori	r24, 0x08	; 8
     8a2:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     8a4:	05 98       	cbi	0x00, 5	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     8a6:	e5 e1       	ldi	r30, 0x15	; 21
     8a8:	f4 e0       	ldi	r31, 0x04	; 4
     8aa:	80 81       	ld	r24, Z
     8ac:	88 60       	ori	r24, 0x08	; 8
     8ae:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     8b0:	06 9a       	sbi	0x00, 6	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     8b2:	0e 98       	cbi	0x01, 6	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8b4:	20 9a       	sbi	0x04, 0	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8b6:	28 98       	cbi	0x05, 0	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     8b8:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     8ba:	29 98       	cbi	0x05, 1	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     8bc:	22 98       	cbi	0x04, 2	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     8be:	e2 e3       	ldi	r30, 0x32	; 50
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	80 81       	ld	r24, Z
     8c4:	88 60       	ori	r24, 0x08	; 8
     8c6:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     8c8:	23 98       	cbi	0x04, 3	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     8ca:	e3 e3       	ldi	r30, 0x33	; 51
     8cc:	f4 e0       	ldi	r31, 0x04	; 4
     8ce:	80 81       	ld	r24, Z
     8d0:	88 60       	ori	r24, 0x08	; 8
     8d2:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
     8d4:	8b df       	rcall	.-234    	; 0x7ec <CLKCTRL_init>

	RTC_init(1);
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	0c d0       	rcall	.+24     	; 0x8f2 <RTC_init>
	
	VREF_0_init();
     8da:	3f d0       	rcall	.+126    	; 0x95a <VREF_0_init>
	
#ifdef _DEBUG
	USART_initialization();
     8dc:	c6 df       	rcall	.-116    	; 0x86a <USART_initialization>
#endif
	
	AC_0_initialization();
     8de:	bb df       	rcall	.-138    	; 0x856 <AC_0_initialization>
	
	WDT_0_init();
     8e0:	44 d0       	rcall	.+136    	; 0x96a <WDT_0_init>

	CPUINT_init();
     8e2:	9a df       	rcall	.-204    	; 0x818 <CPUINT_init>

	SLPCTRL_init();
     8e4:	15 d0       	rcall	.+42     	; 0x910 <SLPCTRL_init>

	BOD_init();
     8e6:	80 df       	rcall	.-256    	; 0x7e8 <BOD_init>
     8e8:	08 95       	ret

000008ea <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     8ea:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     8ec:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     8ee:	40 83       	st	Z, r20
	ret                             // Return to caller
     8f0:	08 95       	ret

000008f2 <RTC_init>:
int8_t RTC_init(uint8_t mode)
{
	//while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
	//}
	
	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     8f2:	e0 e4       	ldi	r30, 0x40	; 64
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
     8f6:	81 89       	ldd	r24, Z+17	; 0x11
     8f8:	81 11       	cpse	r24, r1
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <RTC_init+0x4>
	//| 1 << RTC_RTCEN_bp     /* Enable: enabled */
	//| 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz divided by 32 */
     8fc:	e0 e4       	ldi	r30, 0x40	; 64
     8fe:	f1 e0       	ldi	r31, 0x01	; 1
     900:	17 82       	std	Z+7, r1	; 0x07
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	//RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
	//| 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	 RTC.PITCTRLA = RTC_PERIOD_CYC1024_gc /* Off */
     902:	89 e4       	ldi	r24, 0x49	; 73
     904:	80 8b       	std	Z+16, r24	; 0x10
			 | 1 << RTC_PITEN_bp; /* Enable: disabled */

	 RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */
     906:	15 8a       	std	Z+21, r1	; 0x15

	 RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: disabled */
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	08 95       	ret

00000910 <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	                | SLPCTRL_SMODE_STDBY_gc; /* Power-down Mode */

	return 0;
}
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	08 95       	ret

0000091a <USART_init>:
uint8_t USART_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     91a:	e0 e0       	ldi	r30, 0x00	; 0
     91c:	f8 e0       	ldi	r31, 0x08	; 8
     91e:	8b e5       	ldi	r24, 0x5B	; 91
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	80 87       	std	Z+8, r24	; 0x08
     924:	91 87       	std	Z+9, r25	; 0x09
     926:	80 e4       	ldi	r24, 0x40	; 64
     928:	86 83       	std	Z+6, r24	; 0x06
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	08 95       	ret

0000092e <USART_is_tx_ready>:
     92e:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     932:	85 fb       	bst	r24, 5
     934:	88 27       	eor	r24, r24
     936:	80 f9       	bld	r24, 0
     938:	08 95       	ret

0000093a <USART_is_tx_busy>:
     93a:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
     93e:	86 fb       	bst	r24, 6
     940:	88 27       	eor	r24, r24
     942:	80 f9       	bld	r24, 0
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	89 27       	eor	r24, r25
     948:	08 95       	ret

0000094a <USART_write>:
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     94a:	e0 e0       	ldi	r30, 0x00	; 0
     94c:	f8 e0       	ldi	r31, 0x08	; 8
     94e:	94 81       	ldd	r25, Z+4	; 0x04
     950:	95 ff       	sbrs	r25, 5
     952:	fd cf       	rjmp	.-6      	; 0x94e <USART_write+0x4>
		;
	USART0.TXDATAL = data;
     954:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x700802>
     958:	08 95       	ret

0000095a <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF_CTRLA = VREF_ADC0REFSEL_0V55_gc   /* Voltage reference at 0.55V */
     95a:	84 e0       	ldi	r24, 0x04	; 4
     95c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	             | VREF_DAC0REFSEL_1V5_gc; /* Voltage reference at 1.5V */

	VREF_CTRLB = 0 << VREF_ADC0REFEN_bp    /* ADC0 reference enable: disabled */
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	             | 1 << VREF_DAC0REFEN_bp; /* DAC0/AC0 reference enable: enabled */

	return 0;
}
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret

0000096a <WDT_0_init>:
     96a:	48 e0       	ldi	r20, 0x08	; 8
     96c:	68 ed       	ldi	r22, 0xD8	; 216
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	bb df       	rcall	.-138    	; 0x8ea <protected_write_io>
	ccp_write_io((void *)&(WDT.CTRLA),
	             WDT_PERIOD_1KCLK_gc /* 128 cycles (128) */
	                 | WDT_WINDOW_OFF_gc /* Window mode off */);

	return 0;
}
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	08 95       	ret

00000978 <check_for_aks_block>:
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
     988:	ae 81       	ldd	r26, Y+6	; 0x06
     98a:	bf 81       	ldd	r27, Y+7	; 0x07
     98c:	eb 01       	movw	r28, r22
     98e:	cc 0f       	add	r28, r28
     990:	dd 1f       	adc	r29, r29
     992:	c6 0f       	add	r28, r22
     994:	d7 1f       	adc	r29, r23
     996:	ca 0f       	add	r28, r26
     998:	db 1f       	adc	r29, r27
     99a:	fa 80       	ldd	r15, Y+2	; 0x02
     99c:	fc 01       	movw	r30, r24
     99e:	44 81       	ldd	r20, Z+4	; 0x04
     9a0:	55 81       	ldd	r21, Z+5	; 0x05
     9a2:	e6 e0       	ldi	r30, 0x06	; 6
     9a4:	e6 9f       	mul	r30, r22
     9a6:	90 01       	movw	r18, r0
     9a8:	e7 9f       	mul	r30, r23
     9aa:	30 0d       	add	r19, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	8a 01       	movw	r16, r20
     9b0:	02 0f       	add	r16, r18
     9b2:	13 1f       	adc	r17, r19
     9b4:	f8 01       	movw	r30, r16
     9b6:	22 81       	ldd	r18, Z+2	; 0x02
     9b8:	33 81       	ldd	r19, Z+3	; 0x03
     9ba:	f9 01       	movw	r30, r18
     9bc:	21 81       	ldd	r18, Z+1	; 0x01
     9be:	32 81       	ldd	r19, Z+2	; 0x02
     9c0:	f8 01       	movw	r30, r16
     9c2:	04 81       	ldd	r16, Z+4	; 0x04
     9c4:	15 81       	ldd	r17, Z+5	; 0x05
     9c6:	20 1b       	sub	r18, r16
     9c8:	31 0b       	sbc	r19, r17
     9ca:	e8 81       	ld	r30, Y
     9cc:	2e 1b       	sub	r18, r30
     9ce:	31 09       	sbc	r19, r1
     9d0:	ec 01       	movw	r28, r24
     9d2:	ea 81       	ldd	r30, Y+2	; 0x02
     9d4:	fb 81       	ldd	r31, Y+3	; 0x03
     9d6:	00 81       	ld	r16, Z
     9d8:	11 81       	ldd	r17, Z+1	; 0x01
     9da:	fa 01       	movw	r30, r20
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	40 17       	cp	r20, r16
     9e2:	51 07       	cpc	r21, r17
     9e4:	39 f1       	breq	.+78     	; 0xa34 <check_for_aks_block+0xbc>
     9e6:	46 17       	cp	r20, r22
     9e8:	57 07       	cpc	r21, r23
     9ea:	f9 f0       	breq	.+62     	; 0xa2a <check_for_aks_block+0xb2>
     9ec:	12 96       	adiw	r26, 0x02	; 2
     9ee:	8c 91       	ld	r24, X
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	f8 12       	cpse	r15, r24
     9f4:	1a c0       	rjmp	.+52     	; 0xa2a <check_for_aks_block+0xb2>
     9f6:	80 81       	ld	r24, Z
     9f8:	85 58       	subi	r24, 0x85	; 133
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	e8 f0       	brcs	.+58     	; 0xa38 <check_for_aks_block+0xc0>
     9fe:	c4 80       	ldd	r12, Z+4	; 0x04
     a00:	d5 80       	ldd	r13, Z+5	; 0x05
     a02:	82 81       	ldd	r24, Z+2	; 0x02
     a04:	93 81       	ldd	r25, Z+3	; 0x03
     a06:	ec 01       	movw	r28, r24
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	c8 16       	cp	r12, r24
     a0e:	d9 06       	cpc	r13, r25
     a10:	60 f4       	brcc	.+24     	; 0xa2a <check_for_aks_block+0xb2>
     a12:	8c 19       	sub	r24, r12
     a14:	9d 09       	sbc	r25, r13
     a16:	cc 91       	ld	r28, X
     a18:	d0 e0       	ldi	r29, 0x00	; 0
     a1a:	c8 17       	cp	r28, r24
     a1c:	d9 07       	cpc	r29, r25
     a1e:	28 f4       	brcc	.+10     	; 0xa2a <check_for_aks_block+0xb2>
     a20:	8c 1b       	sub	r24, r28
     a22:	9d 0b       	sbc	r25, r29
     a24:	28 17       	cp	r18, r24
     a26:	39 07       	cpc	r19, r25
     a28:	38 f0       	brcs	.+14     	; 0xa38 <check_for_aks_block+0xc0>
     a2a:	4f 5f       	subi	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	13 96       	adiw	r26, 0x03	; 3
     a30:	36 96       	adiw	r30, 0x06	; 6
     a32:	d6 cf       	rjmp	.-84     	; 0x9e0 <check_for_aks_block+0x68>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <check_for_aks_block+0xc2>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	08 95       	ret

00000a4a <qtm_update_qtlib_timer>:
     a4a:	20 91 6b 3e 	lds	r18, 0x3E6B	; 0x803e6b <qtm_local_ms_timecount>
     a4e:	30 91 6c 3e 	lds	r19, 0x3E6C	; 0x803e6c <qtm_local_ms_timecount+0x1>
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	80 93 6b 3e 	sts	0x3E6B, r24	; 0x803e6b <qtm_local_ms_timecount>
     a5a:	90 93 6c 3e 	sts	0x3E6C, r25	; 0x803e6c <qtm_local_ms_timecount+0x1>
     a5e:	08 95       	ret

00000a60 <qtm_init_sensor_key>:
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	d9 f0       	breq	.+54     	; 0xa9a <qtm_init_sensor_key+0x3a>
     a64:	41 15       	cp	r20, r1
     a66:	51 05       	cpc	r21, r1
     a68:	c1 f0       	breq	.+48     	; 0xa9a <qtm_init_sensor_key+0x3a>
     a6a:	26 e0       	ldi	r18, 0x06	; 6
     a6c:	62 9f       	mul	r22, r18
     a6e:	b0 01       	movw	r22, r0
     a70:	11 24       	eor	r1, r1
     a72:	dc 01       	movw	r26, r24
     a74:	14 96       	adiw	r26, 0x04	; 4
     a76:	ed 91       	ld	r30, X+
     a78:	fc 91       	ld	r31, X
     a7a:	15 97       	sbiw	r26, 0x05	; 5
     a7c:	e6 0f       	add	r30, r22
     a7e:	f7 1f       	adc	r31, r23
     a80:	21 e0       	ldi	r18, 0x01	; 1
     a82:	20 83       	st	Z, r18
     a84:	14 96       	adiw	r26, 0x04	; 4
     a86:	8d 91       	ld	r24, X+
     a88:	9c 91       	ld	r25, X
     a8a:	15 97       	sbiw	r26, 0x05	; 5
     a8c:	fc 01       	movw	r30, r24
     a8e:	e6 0f       	add	r30, r22
     a90:	f7 1f       	adc	r31, r23
     a92:	42 83       	std	Z+2, r20	; 0x02
     a94:	53 83       	std	Z+3, r21	; 0x03
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	08 95       	ret
     a9a:	8b e0       	ldi	r24, 0x0B	; 11
     a9c:	08 95       	ret

00000a9e <qtm_key_sensors_process>:
     a9e:	2f 92       	push	r2
     aa0:	3f 92       	push	r3
     aa2:	4f 92       	push	r4
     aa4:	5f 92       	push	r5
     aa6:	6f 92       	push	r6
     aa8:	7f 92       	push	r7
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	09 f4       	brne	.+2      	; 0xac8 <qtm_key_sensors_process+0x2a>
     ac6:	7b c3       	rjmp	.+1782   	; 0x11be <qtm_key_sensors_process+0x720>
     ac8:	ec 01       	movw	r28, r24
     aca:	a1 2c       	mov	r10, r1
     acc:	b1 2c       	mov	r11, r1
     ace:	81 2c       	mov	r8, r1
     ad0:	91 2c       	mov	r9, r1
     ad2:	21 2c       	mov	r2, r1
     ad4:	d1 2c       	mov	r13, r1
     ad6:	33 e0       	ldi	r19, 0x03	; 3
     ad8:	c3 2e       	mov	r12, r19
     ada:	45 e8       	ldi	r20, 0x85	; 133
     adc:	64 2e       	mov	r6, r20
     ade:	56 e8       	ldi	r21, 0x86	; 134
     ae0:	75 2e       	mov	r7, r21
     ae2:	67 e0       	ldi	r22, 0x07	; 7
     ae4:	36 2e       	mov	r3, r22
     ae6:	72 e0       	ldi	r23, 0x02	; 2
     ae8:	47 2e       	mov	r4, r23
     aea:	e8 e0       	ldi	r30, 0x08	; 8
     aec:	5e 2e       	mov	r5, r30
     aee:	ea 81       	ldd	r30, Y+2	; 0x02
     af0:	fb 81       	ldd	r31, Y+3	; 0x03
     af2:	80 81       	ld	r24, Z
     af4:	91 81       	ldd	r25, Z+1	; 0x01
     af6:	88 16       	cp	r8, r24
     af8:	99 06       	cpc	r9, r25
     afa:	08 f0       	brcs	.+2      	; 0xafe <qtm_key_sensors_process+0x60>
     afc:	a3 c1       	rjmp	.+838    	; 0xe44 <qtm_key_sensors_process+0x3a6>
     afe:	75 01       	movw	r14, r10
     b00:	ee 0c       	add	r14, r14
     b02:	ff 1c       	adc	r15, r15
     b04:	0c 81       	ldd	r16, Y+4	; 0x04
     b06:	1d 81       	ldd	r17, Y+5	; 0x05
     b08:	0e 0d       	add	r16, r14
     b0a:	1f 1d       	adc	r17, r15
     b0c:	d8 01       	movw	r26, r16
     b0e:	8c 91       	ld	r24, X
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <qtm_key_sensors_process+0x78>
     b14:	a1 c0       	rjmp	.+322    	; 0xc58 <qtm_key_sensors_process+0x1ba>
     b16:	38 f4       	brcc	.+14     	; 0xb26 <qtm_key_sensors_process+0x88>
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	01 f1       	breq	.+64     	; 0xb5c <qtm_key_sensors_process+0xbe>
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <qtm_key_sensors_process+0x82>
     b1e:	49 c0       	rjmp	.+146    	; 0xbb2 <qtm_key_sensors_process+0x114>
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	59 f0       	breq	.+22     	; 0xb3a <qtm_key_sensors_process+0x9c>
     b24:	88 c1       	rjmp	.+784    	; 0xe36 <qtm_key_sensors_process+0x398>
     b26:	85 38       	cpi	r24, 0x85	; 133
     b28:	09 f4       	brne	.+2      	; 0xb2c <qtm_key_sensors_process+0x8e>
     b2a:	c0 c0       	rjmp	.+384    	; 0xcac <qtm_key_sensors_process+0x20e>
     b2c:	86 38       	cpi	r24, 0x86	; 134
     b2e:	09 f4       	brne	.+2      	; 0xb32 <qtm_key_sensors_process+0x94>
     b30:	f4 c0       	rjmp	.+488    	; 0xd1a <qtm_key_sensors_process+0x27c>
     b32:	87 30       	cpi	r24, 0x07	; 7
     b34:	09 f0       	breq	.+2      	; 0xb38 <qtm_key_sensors_process+0x9a>
     b36:	7f c1       	rjmp	.+766    	; 0xe36 <qtm_key_sensors_process+0x398>
     b38:	35 c1       	rjmp	.+618    	; 0xda4 <qtm_key_sensors_process+0x306>
     b3a:	d8 01       	movw	r26, r16
     b3c:	12 96       	adiw	r26, 0x02	; 2
     b3e:	ed 91       	ld	r30, X+
     b40:	fc 91       	ld	r31, X
     b42:	13 97       	sbiw	r26, 0x03	; 3
     b44:	80 81       	ld	r24, Z
     b46:	8e 71       	andi	r24, 0x1E	; 30
     b48:	09 f0       	breq	.+2      	; 0xb4c <qtm_key_sensors_process+0xae>
     b4a:	67 c1       	rjmp	.+718    	; 0xe1a <qtm_key_sensors_process+0x37c>
     b4c:	4c 92       	st	X, r4
     b4e:	8c 81       	ldd	r24, Y+4	; 0x04
     b50:	9d 81       	ldd	r25, Y+5	; 0x05
     b52:	fc 01       	movw	r30, r24
     b54:	ee 0d       	add	r30, r14
     b56:	ff 1d       	adc	r31, r15
     b58:	51 82       	std	Z+1, r5	; 0x01
     b5a:	5f c1       	rjmp	.+702    	; 0xe1a <qtm_key_sensors_process+0x37c>
     b5c:	f8 01       	movw	r30, r16
     b5e:	21 81       	ldd	r18, Z+1	; 0x01
     b60:	22 23       	and	r18, r18
     b62:	29 f1       	breq	.+74     	; 0xbae <qtm_key_sensors_process+0x110>
     b64:	02 80       	ldd	r0, Z+2	; 0x02
     b66:	f3 81       	ldd	r31, Z+3	; 0x03
     b68:	e0 2d       	mov	r30, r0
     b6a:	25 30       	cpi	r18, 0x05	; 5
     b6c:	20 f0       	brcs	.+8      	; 0xb76 <qtm_key_sensors_process+0xd8>
     b6e:	81 81       	ldd	r24, Z+1	; 0x01
     b70:	92 81       	ldd	r25, Z+2	; 0x02
     b72:	d8 01       	movw	r26, r16
     b74:	0e c0       	rjmp	.+28     	; 0xb92 <qtm_key_sensors_process+0xf4>
     b76:	d8 01       	movw	r26, r16
     b78:	14 96       	adiw	r26, 0x04	; 4
     b7a:	8d 91       	ld	r24, X+
     b7c:	9c 91       	ld	r25, X
     b7e:	15 97       	sbiw	r26, 0x05	; 5
     b80:	41 81       	ldd	r20, Z+1	; 0x01
     b82:	52 81       	ldd	r21, Z+2	; 0x02
     b84:	84 17       	cp	r24, r20
     b86:	95 07       	cpc	r25, r21
     b88:	69 f0       	breq	.+26     	; 0xba4 <qtm_key_sensors_process+0x106>
     b8a:	48 17       	cp	r20, r24
     b8c:	59 07       	cpc	r21, r25
     b8e:	30 f4       	brcc	.+12     	; 0xb9c <qtm_key_sensors_process+0xfe>
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	8d 93       	st	X+, r24
     b96:	9c 93       	st	X, r25
     b98:	15 97       	sbiw	r26, 0x05	; 5
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <qtm_key_sensors_process+0x106>
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	f8 01       	movw	r30, r16
     ba0:	84 83       	std	Z+4, r24	; 0x04
     ba2:	95 83       	std	Z+5, r25	; 0x05
     ba4:	21 50       	subi	r18, 0x01	; 1
     ba6:	d8 01       	movw	r26, r16
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	2c 93       	st	X, r18
     bac:	36 c1       	rjmp	.+620    	; 0xe1a <qtm_key_sensors_process+0x37c>
     bae:	f8 01       	movw	r30, r16
     bb0:	2f c1       	rjmp	.+606    	; 0xe10 <qtm_key_sensors_process+0x372>
     bb2:	d8 01       	movw	r26, r16
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 91       	ld	r18, X+
     bb8:	3c 91       	ld	r19, X
     bba:	15 97       	sbiw	r26, 0x05	; 5
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	8d 91       	ld	r24, X+
     bc0:	9c 91       	ld	r25, X
     bc2:	13 97       	sbiw	r26, 0x03	; 3
     bc4:	dc 01       	movw	r26, r24
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	4d 91       	ld	r20, X+
     bca:	5c 91       	ld	r21, X
     bcc:	12 97       	sbiw	r26, 0x02	; 2
     bce:	24 17       	cp	r18, r20
     bd0:	35 07       	cpc	r19, r21
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <qtm_key_sensors_process+0x138>
     bd4:	30 c1       	rjmp	.+608    	; 0xe36 <qtm_key_sensors_process+0x398>
     bd6:	8e 81       	ldd	r24, Y+6	; 0x06
     bd8:	9f 81       	ldd	r25, Y+7	; 0x07
     bda:	42 17       	cp	r20, r18
     bdc:	53 07       	cpc	r21, r19
     bde:	e0 f4       	brcc	.+56     	; 0xc18 <qtm_key_sensors_process+0x17a>
     be0:	24 1b       	sub	r18, r20
     be2:	35 0b       	sbc	r19, r21
     be4:	dc 01       	movw	r26, r24
     be6:	aa 0d       	add	r26, r10
     be8:	bb 1d       	adc	r27, r11
     bea:	8c 91       	ld	r24, X
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	05 80       	ldd	r0, Z+5	; 0x05
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <qtm_key_sensors_process+0x158>
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <qtm_key_sensors_process+0x154>
     bfa:	99 27       	eor	r25, r25
     bfc:	28 17       	cp	r18, r24
     bfe:	39 07       	cpc	r19, r25
     c00:	08 f4       	brcc	.+2      	; 0xc04 <qtm_key_sensors_process+0x166>
     c02:	19 c1       	rjmp	.+562    	; 0xe36 <qtm_key_sensors_process+0x398>
     c04:	84 81       	ldd	r24, Z+4	; 0x04
     c06:	88 23       	and	r24, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <qtm_key_sensors_process+0x16e>
     c0a:	15 c1       	rjmp	.+554    	; 0xe36 <qtm_key_sensors_process+0x398>
     c0c:	f8 01       	movw	r30, r16
     c0e:	30 82       	st	Z, r3
     c10:	ea 81       	ldd	r30, Y+2	; 0x02
     c12:	fb 81       	ldd	r31, Y+3	; 0x03
     c14:	24 81       	ldd	r18, Z+4	; 0x04
     c16:	19 c0       	rjmp	.+50     	; 0xc4a <qtm_key_sensors_process+0x1ac>
     c18:	fc 01       	movw	r30, r24
     c1a:	ea 0d       	add	r30, r10
     c1c:	fb 1d       	adc	r31, r11
     c1e:	42 1b       	sub	r20, r18
     c20:	53 0b       	sbc	r21, r19
     c22:	80 81       	ld	r24, Z
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	48 17       	cp	r20, r24
     c28:	59 07       	cpc	r21, r25
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <qtm_key_sensors_process+0x190>
     c2c:	04 c1       	rjmp	.+520    	; 0xe36 <qtm_key_sensors_process+0x398>
     c2e:	82 81       	ldd	r24, Z+2	; 0x02
     c30:	88 23       	and	r24, r24
     c32:	29 f0       	breq	.+10     	; 0xc3e <qtm_key_sensors_process+0x1a0>
     c34:	b4 01       	movw	r22, r8
     c36:	ce 01       	movw	r24, r28
     c38:	9f de       	rcall	.-706    	; 0x978 <check_for_aks_block>
     c3a:	81 11       	cpse	r24, r1
     c3c:	fc c0       	rjmp	.+504    	; 0xe36 <qtm_key_sensors_process+0x398>
     c3e:	e4 e0       	ldi	r30, 0x04	; 4
     c40:	d8 01       	movw	r26, r16
     c42:	ec 93       	st	X, r30
     c44:	ea 81       	ldd	r30, Y+2	; 0x02
     c46:	fb 81       	ldd	r31, Y+3	; 0x03
     c48:	22 81       	ldd	r18, Z+2	; 0x02
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	fc 01       	movw	r30, r24
     c50:	ee 0d       	add	r30, r14
     c52:	ff 1d       	adc	r31, r15
     c54:	21 83       	std	Z+1, r18	; 0x01
     c56:	e1 c0       	rjmp	.+450    	; 0xe1a <qtm_key_sensors_process+0x37c>
     c58:	d8 01       	movw	r26, r16
     c5a:	14 96       	adiw	r26, 0x04	; 4
     c5c:	2d 91       	ld	r18, X+
     c5e:	3c 91       	ld	r19, X
     c60:	15 97       	sbiw	r26, 0x05	; 5
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	ed 91       	ld	r30, X+
     c66:	fc 91       	ld	r31, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	81 81       	ldd	r24, Z+1	; 0x01
     c6c:	92 81       	ldd	r25, Z+2	; 0x02
     c6e:	82 17       	cp	r24, r18
     c70:	93 07       	cpc	r25, r19
     c72:	08 f4       	brcc	.+2      	; 0xc76 <qtm_key_sensors_process+0x1d8>
     c74:	d6 c0       	rjmp	.+428    	; 0xe22 <qtm_key_sensors_process+0x384>
     c76:	ee 81       	ldd	r30, Y+6	; 0x06
     c78:	ff 81       	ldd	r31, Y+7	; 0x07
     c7a:	ea 0d       	add	r30, r10
     c7c:	fb 1d       	adc	r31, r11
     c7e:	82 1b       	sub	r24, r18
     c80:	93 0b       	sbc	r25, r19
     c82:	20 81       	ld	r18, Z
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	28 17       	cp	r18, r24
     c88:	39 07       	cpc	r19, r25
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <qtm_key_sensors_process+0x1f0>
     c8c:	ae c0       	rjmp	.+348    	; 0xdea <qtm_key_sensors_process+0x34c>
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	88 23       	and	r24, r24
     c92:	29 f0       	breq	.+10     	; 0xc9e <qtm_key_sensors_process+0x200>
     c94:	b4 01       	movw	r22, r8
     c96:	ce 01       	movw	r24, r28
     c98:	6f de       	rcall	.-802    	; 0x978 <check_for_aks_block>
     c9a:	81 11       	cpse	r24, r1
     c9c:	cc c0       	rjmp	.+408    	; 0xe36 <qtm_key_sensors_process+0x398>
     c9e:	f8 01       	movw	r30, r16
     ca0:	81 81       	ldd	r24, Z+1	; 0x01
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <qtm_key_sensors_process+0x20a>
     ca6:	67 c0       	rjmp	.+206    	; 0xd76 <qtm_key_sensors_process+0x2d8>
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	b6 c0       	rjmp	.+364    	; 0xe18 <qtm_key_sensors_process+0x37a>
     cac:	a8 81       	ld	r26, Y
     cae:	b9 81       	ldd	r27, Y+1	; 0x01
     cb0:	80 85       	ldd	r24, Z+8	; 0x08
     cb2:	13 96       	adiw	r26, 0x03	; 3
     cb4:	8c 93       	st	X, r24
     cb6:	ec 81       	ldd	r30, Y+4	; 0x04
     cb8:	fd 81       	ldd	r31, Y+5	; 0x05
     cba:	ee 0d       	add	r30, r14
     cbc:	ff 1d       	adc	r31, r15
     cbe:	44 81       	ldd	r20, Z+4	; 0x04
     cc0:	55 81       	ldd	r21, Z+5	; 0x05
     cc2:	a2 81       	ldd	r26, Z+2	; 0x02
     cc4:	b3 81       	ldd	r27, Z+3	; 0x03
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	8d 91       	ld	r24, X+
     cca:	9c 91       	ld	r25, X
     ccc:	12 97       	sbiw	r26, 0x02	; 2
     cce:	84 17       	cp	r24, r20
     cd0:	95 07       	cpc	r25, r21
     cd2:	c0 f0       	brcs	.+48     	; 0xd04 <qtm_key_sensors_process+0x266>
     cd4:	ae 81       	ldd	r26, Y+6	; 0x06
     cd6:	bf 81       	ldd	r27, Y+7	; 0x07
     cd8:	aa 0d       	add	r26, r10
     cda:	bb 1d       	adc	r27, r11
     cdc:	6c 91       	ld	r22, X
     cde:	26 2f       	mov	r18, r22
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	7c 91       	ld	r23, X
     ce6:	7f 5f       	subi	r23, 0xFF	; 255
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <qtm_key_sensors_process+0x250>
     cea:	35 95       	asr	r19
     cec:	27 95       	ror	r18
     cee:	7a 95       	dec	r23
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <qtm_key_sensors_process+0x24c>
     cf2:	84 1b       	sub	r24, r20
     cf4:	95 0b       	sbc	r25, r21
     cf6:	62 1b       	sub	r22, r18
     cf8:	26 2f       	mov	r18, r22
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	28 17       	cp	r18, r24
     cfe:	39 07       	cpc	r19, r25
     d00:	08 f4       	brcc	.+2      	; 0xd04 <qtm_key_sensors_process+0x266>
     d02:	97 c0       	rjmp	.+302    	; 0xe32 <qtm_key_sensors_process+0x394>
     d04:	70 82       	st	Z, r7
     d06:	ea 81       	ldd	r30, Y+2	; 0x02
     d08:	fb 81       	ldd	r31, Y+3	; 0x03
     d0a:	22 81       	ldd	r18, Z+2	; 0x02
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	fc 01       	movw	r30, r24
     d12:	ee 0d       	add	r30, r14
     d14:	ff 1d       	adc	r31, r15
     d16:	21 83       	std	Z+1, r18	; 0x01
     d18:	42 c0       	rjmp	.+132    	; 0xd9e <qtm_key_sensors_process+0x300>
     d1a:	d8 01       	movw	r26, r16
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	6d 91       	ld	r22, X+
     d20:	7c 91       	ld	r23, X
     d22:	15 97       	sbiw	r26, 0x05	; 5
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	ed 91       	ld	r30, X+
     d28:	fc 91       	ld	r31, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	21 81       	ldd	r18, Z+1	; 0x01
     d2e:	32 81       	ldd	r19, Z+2	; 0x02
     d30:	26 17       	cp	r18, r22
     d32:	37 07       	cpc	r19, r23
     d34:	58 f4       	brcc	.+22     	; 0xd4c <qtm_key_sensors_process+0x2ae>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	8c 91       	ld	r24, X
     d3a:	11 97       	sbiw	r26, 0x01	; 1
     d3c:	81 11       	cpse	r24, r1
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <qtm_key_sensors_process+0x2a6>
     d40:	cc 92       	st	X, r12
     d42:	77 c0       	rjmp	.+238    	; 0xe32 <qtm_key_sensors_process+0x394>
     d44:	81 50       	subi	r24, 0x01	; 1
     d46:	f8 01       	movw	r30, r16
     d48:	81 83       	std	Z+1, r24	; 0x01
     d4a:	73 c0       	rjmp	.+230    	; 0xe32 <qtm_key_sensors_process+0x394>
     d4c:	ee 81       	ldd	r30, Y+6	; 0x06
     d4e:	ff 81       	ldd	r31, Y+7	; 0x07
     d50:	ea 0d       	add	r30, r10
     d52:	fb 1d       	adc	r31, r11
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <qtm_key_sensors_process+0x2c6>
     d60:	55 95       	asr	r21
     d62:	47 95       	ror	r20
     d64:	9a 95       	dec	r25
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <qtm_key_sensors_process+0x2c2>
     d68:	26 1b       	sub	r18, r22
     d6a:	37 0b       	sbc	r19, r23
     d6c:	84 1b       	sub	r24, r20
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	82 17       	cp	r24, r18
     d72:	93 07       	cpc	r25, r19
     d74:	60 f4       	brcc	.+24     	; 0xd8e <qtm_key_sensors_process+0x2f0>
     d76:	d8 01       	movw	r26, r16
     d78:	6c 92       	st	X, r6
     d7a:	ea 81       	ldd	r30, Y+2	; 0x02
     d7c:	fb 81       	ldd	r31, Y+3	; 0x03
     d7e:	23 81       	ldd	r18, Z+3	; 0x03
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	fc 01       	movw	r30, r24
     d86:	ee 0d       	add	r30, r14
     d88:	ff 1d       	adc	r31, r15
     d8a:	21 83       	std	Z+1, r18	; 0x01
     d8c:	52 c0       	rjmp	.+164    	; 0xe32 <qtm_key_sensors_process+0x394>
     d8e:	f8 01       	movw	r30, r16
     d90:	81 81       	ldd	r24, Z+1	; 0x01
     d92:	81 11       	cpse	r24, r1
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <qtm_key_sensors_process+0x2fc>
     d96:	c0 82       	st	Z, r12
     d98:	4c c0       	rjmp	.+152    	; 0xe32 <qtm_key_sensors_process+0x394>
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	81 83       	std	Z+1, r24	; 0x01
     d9e:	22 24       	eor	r2, r2
     da0:	23 94       	inc	r2
     da2:	3b c0       	rjmp	.+118    	; 0xe1a <qtm_key_sensors_process+0x37c>
     da4:	d8 01       	movw	r26, r16
     da6:	14 96       	adiw	r26, 0x04	; 4
     da8:	2d 91       	ld	r18, X+
     daa:	3c 91       	ld	r19, X
     dac:	15 97       	sbiw	r26, 0x05	; 5
     dae:	12 96       	adiw	r26, 0x02	; 2
     db0:	8d 91       	ld	r24, X+
     db2:	9c 91       	ld	r25, X
     db4:	13 97       	sbiw	r26, 0x03	; 3
     db6:	dc 01       	movw	r26, r24
     db8:	11 96       	adiw	r26, 0x01	; 1
     dba:	8d 91       	ld	r24, X+
     dbc:	9c 91       	ld	r25, X
     dbe:	12 97       	sbiw	r26, 0x02	; 2
     dc0:	82 17       	cp	r24, r18
     dc2:	93 07       	cpc	r25, r19
     dc4:	68 f5       	brcc	.+90     	; 0xe20 <qtm_key_sensors_process+0x382>
     dc6:	28 1b       	sub	r18, r24
     dc8:	39 0b       	sbc	r19, r25
     dca:	ae 81       	ldd	r26, Y+6	; 0x06
     dcc:	bf 81       	ldd	r27, Y+7	; 0x07
     dce:	aa 0d       	add	r26, r10
     dd0:	bb 1d       	adc	r27, r11
     dd2:	8c 91       	ld	r24, X
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	05 80       	ldd	r0, Z+5	; 0x05
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <qtm_key_sensors_process+0x340>
     dda:	95 95       	asr	r25
     ddc:	87 95       	ror	r24
     dde:	0a 94       	dec	r0
     de0:	e2 f7       	brpl	.-8      	; 0xdda <qtm_key_sensors_process+0x33c>
     de2:	99 27       	eor	r25, r25
     de4:	28 17       	cp	r18, r24
     de6:	39 07       	cpc	r19, r25
     de8:	18 f4       	brcc	.+6      	; 0xdf0 <qtm_key_sensors_process+0x352>
     dea:	f8 01       	movw	r30, r16
     dec:	c0 82       	st	Z, r12
     dee:	1a c0       	rjmp	.+52     	; 0xe24 <qtm_key_sensors_process+0x386>
     df0:	d8 01       	movw	r26, r16
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	8c 91       	ld	r24, X
     df6:	11 97       	sbiw	r26, 0x01	; 1
     df8:	81 11       	cpse	r24, r1
     dfa:	0c c0       	rjmp	.+24     	; 0xe14 <qtm_key_sensors_process+0x376>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	8c 93       	st	X, r24
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	fc 01       	movw	r30, r24
     e06:	ee 0d       	add	r30, r14
     e08:	ff 1d       	adc	r31, r15
     e0a:	02 80       	ldd	r0, Z+2	; 0x02
     e0c:	f3 81       	ldd	r31, Z+3	; 0x03
     e0e:	e0 2d       	mov	r30, r0
     e10:	c0 82       	st	Z, r12
     e12:	11 c0       	rjmp	.+34     	; 0xe36 <qtm_key_sensors_process+0x398>
     e14:	81 50       	subi	r24, 0x01	; 1
     e16:	f8 01       	movw	r30, r16
     e18:	81 83       	std	Z+1, r24	; 0x01
     e1a:	dd 24       	eor	r13, r13
     e1c:	d3 94       	inc	r13
     e1e:	0b c0       	rjmp	.+22     	; 0xe36 <qtm_key_sensors_process+0x398>
     e20:	d8 01       	movw	r26, r16
     e22:	cc 92       	st	X, r12
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	9d 81       	ldd	r25, Y+5	; 0x05
     e28:	fc 01       	movw	r30, r24
     e2a:	ee 0d       	add	r30, r14
     e2c:	ff 1d       	adc	r31, r15
     e2e:	11 82       	std	Z+1, r1	; 0x01
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <qtm_key_sensors_process+0x398>
     e32:	22 24       	eor	r2, r2
     e34:	23 94       	inc	r2
     e36:	bf ef       	ldi	r27, 0xFF	; 255
     e38:	8b 1a       	sub	r8, r27
     e3a:	9b 0a       	sbc	r9, r27
     e3c:	e3 e0       	ldi	r30, 0x03	; 3
     e3e:	ae 0e       	add	r10, r30
     e40:	b1 1c       	adc	r11, r1
     e42:	55 ce       	rjmp	.-854    	; 0xaee <qtm_key_sensors_process+0x50>
     e44:	e8 81       	ld	r30, Y
     e46:	f9 81       	ldd	r31, Y+1	; 0x01
     e48:	80 81       	ld	r24, Z
     e4a:	87 ff       	sbrs	r24, 7
     e4c:	23 c0       	rjmp	.+70     	; 0xe94 <qtm_key_sensors_process+0x3f6>
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	ea 81       	ldd	r30, Y+2	; 0x02
     e58:	fb 81       	ldd	r31, Y+3	; 0x03
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	28 17       	cp	r18, r24
     e60:	39 07       	cpc	r19, r25
     e62:	98 f4       	brcc	.+38     	; 0xe8a <qtm_key_sensors_process+0x3ec>
     e64:	ec 81       	ldd	r30, Y+4	; 0x04
     e66:	fd 81       	ldd	r31, Y+5	; 0x05
     e68:	e4 0f       	add	r30, r20
     e6a:	f5 1f       	adc	r31, r21
     e6c:	a2 81       	ldd	r26, Z+2	; 0x02
     e6e:	b3 81       	ldd	r27, Z+3	; 0x03
     e70:	8c 91       	ld	r24, X
     e72:	80 fd       	sbrc	r24, 0
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <qtm_key_sensors_process+0x3e2>
     e76:	90 81       	ld	r25, Z
     e78:	97 7f       	andi	r25, 0xF7	; 247
     e7a:	11 f0       	breq	.+4      	; 0xe80 <qtm_key_sensors_process+0x3e2>
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	8c 93       	st	X, r24
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	4a 5f       	subi	r20, 0xFA	; 250
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	e6 cf       	rjmp	.-52     	; 0xe56 <qtm_key_sensors_process+0x3b8>
     e8a:	e8 81       	ld	r30, Y
     e8c:	f9 81       	ldd	r31, Y+1	; 0x01
     e8e:	80 81       	ld	r24, Z
     e90:	8f 77       	andi	r24, 0x7F	; 127
     e92:	80 83       	st	Z, r24
     e94:	d1 10       	cpse	r13, r1
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <qtm_key_sensors_process+0x408>
     e98:	e8 81       	ld	r30, Y
     e9a:	f9 81       	ldd	r31, Y+1	; 0x01
     e9c:	21 10       	cpse	r2, r1
     e9e:	6f c0       	rjmp	.+222    	; 0xf7e <qtm_key_sensors_process+0x4e0>
     ea0:	80 81       	ld	r24, Z
     ea2:	8e 7f       	andi	r24, 0xFE	; 254
     ea4:	6e c0       	rjmp	.+220    	; 0xf82 <qtm_key_sensors_process+0x4e4>
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	fb 81       	ldd	r31, Y+3	; 0x03
     eaa:	81 85       	ldd	r24, Z+9	; 0x09
     eac:	88 23       	and	r24, r24
     eae:	a1 f3       	breq	.-24     	; 0xe98 <qtm_key_sensors_process+0x3fa>
     eb0:	e8 81       	ld	r30, Y
     eb2:	f9 81       	ldd	r31, Y+1	; 0x01
     eb4:	80 81       	ld	r24, Z
     eb6:	80 68       	ori	r24, 0x80	; 128
     eb8:	80 83       	st	Z, r24
     eba:	ea 81       	ldd	r30, Y+2	; 0x02
     ebc:	fb 81       	ldd	r31, Y+3	; 0x03
     ebe:	81 85       	ldd	r24, Z+9	; 0x09
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	51 f7       	brne	.-44     	; 0xe98 <qtm_key_sensors_process+0x3fa>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	d9 2e       	mov	r13, r25
     ed0:	ea 81       	ldd	r30, Y+2	; 0x02
     ed2:	fb 81       	ldd	r31, Y+3	; 0x03
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	26 17       	cp	r18, r22
     eda:	37 07       	cpc	r19, r23
     edc:	e8 f6       	brcc	.-70     	; 0xe98 <qtm_key_sensors_process+0x3fa>
     ede:	0c 81       	ldd	r16, Y+4	; 0x04
     ee0:	1d 81       	ldd	r17, Y+5	; 0x05
     ee2:	fa 01       	movw	r30, r20
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	e0 0f       	add	r30, r16
     eea:	f1 1f       	adc	r31, r17
     eec:	80 81       	ld	r24, Z
     eee:	98 2f       	mov	r25, r24
     ef0:	97 7f       	andi	r25, 0xF7	; 247
     ef2:	a1 f1       	breq	.+104    	; 0xf5c <qtm_key_sensors_process+0x4be>
     ef4:	85 38       	cpi	r24, 0x85	; 133
     ef6:	11 f0       	breq	.+4      	; 0xefc <qtm_key_sensors_process+0x45e>
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	b1 f5       	brne	.+108    	; 0xf68 <qtm_key_sensors_process+0x4ca>
     efc:	ee 80       	ldd	r14, Y+6	; 0x06
     efe:	ff 80       	ldd	r15, Y+7	; 0x07
     f00:	d7 01       	movw	r26, r14
     f02:	a4 0f       	add	r26, r20
     f04:	b5 1f       	adc	r27, r21
     f06:	12 96       	adiw	r26, 0x02	; 2
     f08:	bc 90       	ld	r11, X
     f0a:	bb 20       	and	r11, r11
     f0c:	39 f1       	breq	.+78     	; 0xf5c <qtm_key_sensors_process+0x4be>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	c1 2c       	mov	r12, r1
     f14:	86 17       	cp	r24, r22
     f16:	97 07       	cpc	r25, r23
     f18:	f8 f4       	brcc	.+62     	; 0xf58 <qtm_key_sensors_process+0x4ba>
     f1a:	28 17       	cp	r18, r24
     f1c:	39 07       	cpc	r19, r25
     f1e:	d1 f0       	breq	.+52     	; 0xf54 <qtm_key_sensors_process+0x4b6>
     f20:	d8 9e       	mul	r13, r24
     f22:	d0 01       	movw	r26, r0
     f24:	d9 9e       	mul	r13, r25
     f26:	b0 0d       	add	r27, r0
     f28:	11 24       	eor	r1, r1
     f2a:	a0 0f       	add	r26, r16
     f2c:	b1 1f       	adc	r27, r17
     f2e:	ac 91       	ld	r26, X
     f30:	a4 30       	cpi	r26, 0x04	; 4
     f32:	11 f0       	breq	.+4      	; 0xf38 <qtm_key_sensors_process+0x49a>
     f34:	a6 38       	cpi	r26, 0x86	; 134
     f36:	71 f4       	brne	.+28     	; 0xf54 <qtm_key_sensors_process+0x4b6>
     f38:	dc 01       	movw	r26, r24
     f3a:	aa 0f       	add	r26, r26
     f3c:	bb 1f       	adc	r27, r27
     f3e:	a8 0f       	add	r26, r24
     f40:	b9 1f       	adc	r27, r25
     f42:	ae 0d       	add	r26, r14
     f44:	bf 1d       	adc	r27, r15
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	ac 91       	ld	r26, X
     f4a:	ba 12       	cpse	r11, r26
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <qtm_key_sensors_process+0x4b6>
     f4e:	cb 01       	movw	r24, r22
     f50:	cc 24       	eor	r12, r12
     f52:	c3 94       	inc	r12
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	de cf       	rjmp	.-68     	; 0xf14 <qtm_key_sensors_process+0x476>
     f58:	c1 10       	cpse	r12, r1
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <qtm_key_sensors_process+0x4ca>
     f5c:	02 80       	ldd	r0, Z+2	; 0x02
     f5e:	f3 81       	ldd	r31, Z+3	; 0x03
     f60:	e0 2d       	mov	r30, r0
     f62:	80 81       	ld	r24, Z
     f64:	8e 7f       	andi	r24, 0xFE	; 254
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <qtm_key_sensors_process+0x4d4>
     f68:	02 80       	ldd	r0, Z+2	; 0x02
     f6a:	f3 81       	ldd	r31, Z+3	; 0x03
     f6c:	e0 2d       	mov	r30, r0
     f6e:	80 81       	ld	r24, Z
     f70:	81 60       	ori	r24, 0x01	; 1
     f72:	80 83       	st	Z, r24
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	4d 5f       	subi	r20, 0xFD	; 253
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	a9 cf       	rjmp	.-174    	; 0xed0 <qtm_key_sensors_process+0x432>
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	80 83       	st	Z, r24
     f84:	80 91 6b 3e 	lds	r24, 0x3E6B	; 0x803e6b <qtm_local_ms_timecount>
     f88:	90 91 6c 3e 	lds	r25, 0x3E6C	; 0x803e6c <qtm_local_ms_timecount+0x1>
     f8c:	e8 81       	ld	r30, Y
     f8e:	f9 81       	ldd	r31, Y+1	; 0x01
     f90:	21 81       	ldd	r18, Z+1	; 0x01
     f92:	32 81       	ldd	r19, Z+2	; 0x02
     f94:	a9 01       	movw	r20, r18
     f96:	48 53       	subi	r20, 0x38	; 56
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	48 17       	cp	r20, r24
     f9c:	59 07       	cpc	r21, r25
     f9e:	38 f4       	brcc	.+14     	; 0xfae <qtm_key_sensors_process+0x510>
     fa0:	82 1b       	sub	r24, r18
     fa2:	93 0b       	sbc	r25, r19
     fa4:	aa 24       	eor	r10, r10
     fa6:	a3 94       	inc	r10
     fa8:	a3 e0       	ldi	r26, 0x03	; 3
     faa:	ba 2e       	mov	r11, r26
     fac:	44 c0       	rjmp	.+136    	; 0x1036 <qtm_key_sensors_process+0x598>
     fae:	82 17       	cp	r24, r18
     fb0:	93 07       	cpc	r25, r19
     fb2:	10 f0       	brcs	.+4      	; 0xfb8 <qtm_key_sensors_process+0x51a>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	04 c1       	rjmp	.+520    	; 0x11c0 <qtm_key_sensors_process+0x722>
     fb8:	82 1b       	sub	r24, r18
     fba:	93 0b       	sbc	r25, r19
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	89 3c       	cpi	r24, 0xC9	; 201
     fc0:	91 05       	cpc	r25, r1
     fc2:	c0 f3       	brcs	.-16     	; 0xfb4 <qtm_key_sensors_process+0x516>
     fc4:	ef cf       	rjmp	.-34     	; 0xfa4 <qtm_key_sensors_process+0x506>
     fc6:	88 5c       	subi	r24, 0xC8	; 200
     fc8:	91 09       	sbc	r25, r1
     fca:	e8 81       	ld	r30, Y
     fcc:	f9 81       	ldd	r31, Y+1	; 0x01
     fce:	21 81       	ldd	r18, Z+1	; 0x01
     fd0:	32 81       	ldd	r19, Z+2	; 0x02
     fd2:	28 53       	subi	r18, 0x38	; 56
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	21 83       	std	Z+1, r18	; 0x01
     fd8:	32 83       	std	Z+2, r19	; 0x02
     fda:	23 81       	ldd	r18, Z+3	; 0x03
     fdc:	21 11       	cpse	r18, r1
     fde:	96 c0       	rjmp	.+300    	; 0x110c <qtm_key_sensors_process+0x66e>
     fe0:	24 81       	ldd	r18, Z+4	; 0x04
     fe2:	22 23       	and	r18, r18
     fe4:	11 f0       	breq	.+4      	; 0xfea <qtm_key_sensors_process+0x54c>
     fe6:	21 50       	subi	r18, 0x01	; 1
     fe8:	24 83       	std	Z+4, r18	; 0x04
     fea:	e8 81       	ld	r30, Y
     fec:	f9 81       	ldd	r31, Y+1	; 0x01
     fee:	25 81       	ldd	r18, Z+5	; 0x05
     ff0:	22 23       	and	r18, r18
     ff2:	11 f0       	breq	.+4      	; 0xff8 <qtm_key_sensors_process+0x55a>
     ff4:	21 50       	subi	r18, 0x01	; 1
     ff6:	25 83       	std	Z+5, r18	; 0x05
     ff8:	8a 80       	ldd	r8, Y+2	; 0x02
     ffa:	9b 80       	ldd	r9, Y+3	; 0x03
     ffc:	d4 01       	movw	r26, r8
     ffe:	16 96       	adiw	r26, 0x06	; 6
    1000:	2c 91       	ld	r18, X
    1002:	16 97       	sbiw	r26, 0x06	; 6
    1004:	21 11       	cpse	r18, r1
    1006:	1b c0       	rjmp	.+54     	; 0x103e <qtm_key_sensors_process+0x5a0>
    1008:	8a 80       	ldd	r8, Y+2	; 0x02
    100a:	9b 80       	ldd	r9, Y+3	; 0x03
    100c:	f4 01       	movw	r30, r8
    100e:	27 81       	ldd	r18, Z+7	; 0x07
    1010:	21 11       	cpse	r18, r1
    1012:	48 c0       	rjmp	.+144    	; 0x10a4 <qtm_key_sensors_process+0x606>
    1014:	ea 81       	ldd	r30, Y+2	; 0x02
    1016:	fb 81       	ldd	r31, Y+3	; 0x03
    1018:	23 81       	ldd	r18, Z+3	; 0x03
    101a:	22 23       	and	r18, r18
    101c:	61 f0       	breq	.+24     	; 0x1036 <qtm_key_sensors_process+0x598>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	a0 e0       	ldi	r26, 0x00	; 0
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ea 81       	ldd	r30, Y+2	; 0x02
    1028:	fb 81       	ldd	r31, Y+3	; 0x03
    102a:	40 81       	ld	r20, Z
    102c:	51 81       	ldd	r21, Z+1	; 0x01
    102e:	a4 17       	cp	r26, r20
    1030:	b5 07       	cpc	r27, r21
    1032:	08 f4       	brcc	.+2      	; 0x1036 <qtm_key_sensors_process+0x598>
    1034:	6e c0       	rjmp	.+220    	; 0x1112 <qtm_key_sensors_process+0x674>
    1036:	89 3c       	cpi	r24, 0xC9	; 201
    1038:	91 05       	cpc	r25, r1
    103a:	28 f6       	brcc	.-118    	; 0xfc6 <qtm_key_sensors_process+0x528>
    103c:	bb cf       	rjmp	.-138    	; 0xfb4 <qtm_key_sensors_process+0x516>
    103e:	08 81       	ld	r16, Y
    1040:	19 81       	ldd	r17, Y+1	; 0x01
    1042:	f8 01       	movw	r30, r16
    1044:	24 81       	ldd	r18, Z+4	; 0x04
    1046:	21 11       	cpse	r18, r1
    1048:	df cf       	rjmp	.-66     	; 0x1008 <qtm_key_sensors_process+0x56a>
    104a:	ed 90       	ld	r14, X+
    104c:	fc 90       	ld	r15, X
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	4e 15       	cp	r20, r14
    1058:	5f 05       	cpc	r21, r15
    105a:	f1 f0       	breq	.+60     	; 0x1098 <qtm_key_sensors_process+0x5fa>
    105c:	ec 81       	ldd	r30, Y+4	; 0x04
    105e:	fd 81       	ldd	r31, Y+5	; 0x05
    1060:	e6 0f       	add	r30, r22
    1062:	f7 1f       	adc	r31, r23
    1064:	20 81       	ld	r18, Z
    1066:	23 30       	cpi	r18, 0x03	; 3
    1068:	11 f0       	breq	.+4      	; 0x106e <qtm_key_sensors_process+0x5d0>
    106a:	28 30       	cpi	r18, 0x08	; 8
    106c:	81 f4       	brne	.+32     	; 0x108e <qtm_key_sensors_process+0x5f0>
    106e:	24 81       	ldd	r18, Z+4	; 0x04
    1070:	35 81       	ldd	r19, Z+5	; 0x05
    1072:	c2 80       	ldd	r12, Z+2	; 0x02
    1074:	d3 80       	ldd	r13, Z+3	; 0x03
    1076:	d6 01       	movw	r26, r12
    1078:	11 96       	adiw	r26, 0x01	; 1
    107a:	cd 90       	ld	r12, X+
    107c:	dc 90       	ld	r13, X
    107e:	12 97       	sbiw	r26, 0x02	; 2
    1080:	2c 15       	cp	r18, r12
    1082:	3d 05       	cpc	r19, r13
    1084:	20 f4       	brcc	.+8      	; 0x108e <qtm_key_sensors_process+0x5f0>
    1086:	2f 5f       	subi	r18, 0xFF	; 255
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	24 83       	std	Z+4, r18	; 0x04
    108c:	35 83       	std	Z+5, r19	; 0x05
    108e:	4f 5f       	subi	r20, 0xFF	; 255
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	6a 5f       	subi	r22, 0xFA	; 250
    1094:	7f 4f       	sbci	r23, 0xFF	; 255
    1096:	df cf       	rjmp	.-66     	; 0x1056 <qtm_key_sensors_process+0x5b8>
    1098:	f4 01       	movw	r30, r8
    109a:	26 81       	ldd	r18, Z+6	; 0x06
    109c:	d8 01       	movw	r26, r16
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	2c 93       	st	X, r18
    10a2:	b2 cf       	rjmp	.-156    	; 0x1008 <qtm_key_sensors_process+0x56a>
    10a4:	08 81       	ld	r16, Y
    10a6:	19 81       	ldd	r17, Y+1	; 0x01
    10a8:	d8 01       	movw	r26, r16
    10aa:	15 96       	adiw	r26, 0x05	; 5
    10ac:	2c 91       	ld	r18, X
    10ae:	21 11       	cpse	r18, r1
    10b0:	b1 cf       	rjmp	.-158    	; 0x1014 <qtm_key_sensors_process+0x576>
    10b2:	e0 80       	ld	r14, Z
    10b4:	f1 80       	ldd	r15, Z+1	; 0x01
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	4e 15       	cp	r20, r14
    10c0:	5f 05       	cpc	r21, r15
    10c2:	f1 f0       	breq	.+60     	; 0x1100 <qtm_key_sensors_process+0x662>
    10c4:	ec 81       	ldd	r30, Y+4	; 0x04
    10c6:	fd 81       	ldd	r31, Y+5	; 0x05
    10c8:	e6 0f       	add	r30, r22
    10ca:	f7 1f       	adc	r31, r23
    10cc:	20 81       	ld	r18, Z
    10ce:	23 30       	cpi	r18, 0x03	; 3
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <qtm_key_sensors_process+0x638>
    10d2:	28 30       	cpi	r18, 0x08	; 8
    10d4:	81 f4       	brne	.+32     	; 0x10f6 <qtm_key_sensors_process+0x658>
    10d6:	24 81       	ldd	r18, Z+4	; 0x04
    10d8:	35 81       	ldd	r19, Z+5	; 0x05
    10da:	c2 80       	ldd	r12, Z+2	; 0x02
    10dc:	d3 80       	ldd	r13, Z+3	; 0x03
    10de:	d6 01       	movw	r26, r12
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	cd 90       	ld	r12, X+
    10e4:	dc 90       	ld	r13, X
    10e6:	12 97       	sbiw	r26, 0x02	; 2
    10e8:	c2 16       	cp	r12, r18
    10ea:	d3 06       	cpc	r13, r19
    10ec:	20 f4       	brcc	.+8      	; 0x10f6 <qtm_key_sensors_process+0x658>
    10ee:	21 50       	subi	r18, 0x01	; 1
    10f0:	31 09       	sbc	r19, r1
    10f2:	24 83       	std	Z+4, r18	; 0x04
    10f4:	35 83       	std	Z+5, r19	; 0x05
    10f6:	4f 5f       	subi	r20, 0xFF	; 255
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255
    10fa:	6a 5f       	subi	r22, 0xFA	; 250
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	df cf       	rjmp	.-66     	; 0x10be <qtm_key_sensors_process+0x620>
    1100:	f4 01       	movw	r30, r8
    1102:	27 81       	ldd	r18, Z+7	; 0x07
    1104:	d8 01       	movw	r26, r16
    1106:	15 96       	adiw	r26, 0x05	; 5
    1108:	2c 93       	st	X, r18
    110a:	84 cf       	rjmp	.-248    	; 0x1014 <qtm_key_sensors_process+0x576>
    110c:	21 50       	subi	r18, 0x01	; 1
    110e:	23 83       	std	Z+3, r18	; 0x03
    1110:	81 cf       	rjmp	.-254    	; 0x1014 <qtm_key_sensors_process+0x576>
    1112:	a9 01       	movw	r20, r18
    1114:	44 0f       	add	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	ec 81       	ldd	r30, Y+4	; 0x04
    111a:	fd 81       	ldd	r31, Y+5	; 0x05
    111c:	e4 0f       	add	r30, r20
    111e:	f5 1f       	adc	r31, r21
    1120:	60 81       	ld	r22, Z
    1122:	65 38       	cpi	r22, 0x85	; 133
    1124:	09 f0       	breq	.+2      	; 0x1128 <qtm_key_sensors_process+0x68a>
    1126:	47 c0       	rjmp	.+142    	; 0x11b6 <qtm_key_sensors_process+0x718>
    1128:	61 81       	ldd	r22, Z+1	; 0x01
    112a:	66 23       	and	r22, r22
    112c:	19 f0       	breq	.+6      	; 0x1134 <qtm_key_sensors_process+0x696>
    112e:	61 50       	subi	r22, 0x01	; 1
    1130:	61 83       	std	Z+1, r22	; 0x01
    1132:	41 c0       	rjmp	.+130    	; 0x11b6 <qtm_key_sensors_process+0x718>
    1134:	a0 82       	st	Z, r10
    1136:	6c 81       	ldd	r22, Y+4	; 0x04
    1138:	7d 81       	ldd	r23, Y+5	; 0x05
    113a:	fb 01       	movw	r30, r22
    113c:	e4 0f       	add	r30, r20
    113e:	f5 1f       	adc	r31, r21
    1140:	02 80       	ldd	r0, Z+2	; 0x02
    1142:	f3 81       	ldd	r31, Z+3	; 0x03
    1144:	e0 2d       	mov	r30, r0
    1146:	b0 82       	st	Z, r11
    1148:	ee 81       	ldd	r30, Y+6	; 0x06
    114a:	ff 81       	ldd	r31, Y+7	; 0x07
    114c:	e2 0f       	add	r30, r18
    114e:	f3 1f       	adc	r31, r19
    1150:	d2 80       	ldd	r13, Z+2	; 0x02
    1152:	dd 20       	and	r13, r13
    1154:	81 f1       	breq	.+96     	; 0x11b6 <qtm_key_sensors_process+0x718>
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	00 e0       	ldi	r16, 0x00	; 0
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	ea 81       	ldd	r30, Y+2	; 0x02
    1160:	fb 81       	ldd	r31, Y+3	; 0x03
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	06 17       	cp	r16, r22
    1168:	17 07       	cpc	r17, r23
    116a:	28 f5       	brcc	.+74     	; 0x11b6 <qtm_key_sensors_process+0x718>
    116c:	ee 81       	ldd	r30, Y+6	; 0x06
    116e:	ff 81       	ldd	r31, Y+7	; 0x07
    1170:	e4 0f       	add	r30, r20
    1172:	f5 1f       	adc	r31, r21
    1174:	62 81       	ldd	r22, Z+2	; 0x02
    1176:	d6 12       	cpse	r13, r22
    1178:	19 c0       	rjmp	.+50     	; 0x11ac <qtm_key_sensors_process+0x70e>
    117a:	ba 01       	movw	r22, r20
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	ec 81       	ldd	r30, Y+4	; 0x04
    1182:	fd 81       	ldd	r31, Y+5	; 0x05
    1184:	4f 01       	movw	r8, r30
    1186:	86 0e       	add	r8, r22
    1188:	97 1e       	adc	r9, r23
    118a:	f4 01       	movw	r30, r8
    118c:	e2 80       	ldd	r14, Z+2	; 0x02
    118e:	f3 80       	ldd	r15, Z+3	; 0x03
    1190:	f7 01       	movw	r30, r14
    1192:	f0 80       	ld	r15, Z
    1194:	f0 fe       	sbrs	r15, 0
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <qtm_key_sensors_process+0x70e>
    1198:	f4 01       	movw	r30, r8
    119a:	a0 82       	st	Z, r10
    119c:	ec 81       	ldd	r30, Y+4	; 0x04
    119e:	fd 81       	ldd	r31, Y+5	; 0x05
    11a0:	e6 0f       	add	r30, r22
    11a2:	f7 1f       	adc	r31, r23
    11a4:	02 80       	ldd	r0, Z+2	; 0x02
    11a6:	f3 81       	ldd	r31, Z+3	; 0x03
    11a8:	e0 2d       	mov	r30, r0
    11aa:	b0 82       	st	Z, r11
    11ac:	0f 5f       	subi	r16, 0xFF	; 255
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	4d 5f       	subi	r20, 0xFD	; 253
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	d4 cf       	rjmp	.-88     	; 0x115e <qtm_key_sensors_process+0x6c0>
    11b6:	11 96       	adiw	r26, 0x01	; 1
    11b8:	2d 5f       	subi	r18, 0xFD	; 253
    11ba:	3f 4f       	sbci	r19, 0xFF	; 255
    11bc:	34 cf       	rjmp	.-408    	; 0x1026 <qtm_key_sensors_process+0x588>
    11be:	8b e0       	ldi	r24, 0x0B	; 11
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	7f 90       	pop	r7
    11da:	6f 90       	pop	r6
    11dc:	5f 90       	pop	r5
    11de:	4f 90       	pop	r4
    11e0:	3f 90       	pop	r3
    11e2:	2f 90       	pop	r2
    11e4:	08 95       	ret

000011e6 <qtm_error_handler>:
    11e6:	95 e0       	ldi	r25, 0x05	; 5
    11e8:	90 93 6f 3e 	sts	0x3E6F, r25	; 0x803e6f <qtm_state>
    11ec:	e0 91 a5 3e 	lds	r30, 0x3EA5	; 0x803ea5 <qtm>
    11f0:	f0 91 a6 3e 	lds	r31, 0x3EA6	; 0x803ea6 <qtm+0x1>
    11f4:	01 88       	ldd	r0, Z+17	; 0x11
    11f6:	f2 89       	ldd	r31, Z+18	; 0x12
    11f8:	e0 2d       	mov	r30, r0
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <qtm_error_handler+0x1a>
    11fe:	09 94       	ijmp
    1200:	ff cf       	rjmp	.-2      	; 0x1200 <qtm_error_handler+0x1a>

00001202 <generic_callback_function>:
    1202:	e0 91 a5 3e 	lds	r30, 0x3EA5	; 0x803ea5 <qtm>
    1206:	f0 91 a6 3e 	lds	r31, 0x3EA6	; 0x803ea6 <qtm+0x1>
    120a:	03 88       	ldd	r0, Z+19	; 0x13
    120c:	f4 89       	ldd	r31, Z+20	; 0x14
    120e:	e0 2d       	mov	r30, r0
    1210:	30 97       	sbiw	r30, 0x00	; 0
    1212:	09 f0       	breq	.+2      	; 0x1216 <generic_callback_function+0x14>
    1214:	09 94       	ijmp
    1216:	80 e4       	ldi	r24, 0x40	; 64
    1218:	e6 cf       	rjmp	.-52     	; 0x11e6 <qtm_error_handler>

0000121a <qmt_get_binding_layer_ptr>:
    121a:	80 91 a5 3e 	lds	r24, 0x3EA5	; 0x803ea5 <qtm>
    121e:	90 91 a6 3e 	lds	r25, 0x3EA6	; 0x803ea6 <qtm+0x1>
    1222:	08 95       	ret

00001224 <qtm_binding_layer_init>:
    1224:	cf 93       	push	r28
    1226:	80 93 a5 3e 	sts	0x3EA5, r24	; 0x803ea5 <qtm>
    122a:	90 93 a6 3e 	sts	0x3EA6, r25	; 0x803ea6 <qtm+0x1>
    122e:	80 91 6f 3e 	lds	r24, 0x3E6F	; 0x803e6f <qtm_state>
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	39 f0       	breq	.+14     	; 0x1244 <qtm_binding_layer_init+0x20>
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	28 f0       	brcs	.+10     	; 0x1244 <qtm_binding_layer_init+0x20>
    123a:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    123e:	88 23       	and	r24, r24
    1240:	71 f1       	breq	.+92     	; 0x129e <qtm_binding_layer_init+0x7a>
    1242:	40 c0       	rjmp	.+128    	; 0x12c4 <qtm_binding_layer_init+0xa0>
    1244:	10 92 6d 3e 	sts	0x3E6D, r1	; 0x803e6d <errors>
    1248:	c0 e0       	ldi	r28, 0x00	; 0
    124a:	a0 91 a5 3e 	lds	r26, 0x3EA5	; 0x803ea5 <qtm>
    124e:	b0 91 a6 3e 	lds	r27, 0x3EA6	; 0x803ea6 <qtm+0x1>
    1252:	8c 2f       	mov	r24, r28
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	11 96       	adiw	r26, 0x01	; 1
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	12 97       	sbiw	r26, 0x02	; 2
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	01 90       	ld	r0, Z+
    1268:	f0 81       	ld	r31, Z
    126a:	e0 2d       	mov	r30, r0
    126c:	30 97       	sbiw	r30, 0x00	; 0
    126e:	29 f3       	breq	.-54     	; 0x123a <qtm_binding_layer_init+0x16>
    1270:	17 96       	adiw	r26, 0x07	; 7
    1272:	2d 91       	ld	r18, X+
    1274:	3c 91       	ld	r19, X
    1276:	18 97       	sbiw	r26, 0x08	; 8
    1278:	d9 01       	movw	r26, r18
    127a:	a8 0f       	add	r26, r24
    127c:	b9 1f       	adc	r27, r25
    127e:	8d 91       	ld	r24, X+
    1280:	9c 91       	ld	r25, X
    1282:	09 95       	icall
    1284:	88 23       	and	r24, r24
    1286:	29 f0       	breq	.+10     	; 0x1292 <qtm_binding_layer_init+0x6e>
    1288:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <errors>
    1292:	cf 5f       	subi	r28, 0xFF	; 255
    1294:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    1298:	88 23       	and	r24, r24
    129a:	b9 f2       	breq	.-82     	; 0x124a <qtm_binding_layer_init+0x26>
    129c:	ce cf       	rjmp	.-100    	; 0x123a <qtm_binding_layer_init+0x16>
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    12a4:	e0 91 a5 3e 	lds	r30, 0x3EA5	; 0x803ea5 <qtm>
    12a8:	f0 91 a6 3e 	lds	r31, 0x3EA6	; 0x803ea6 <qtm+0x1>
    12ac:	07 84       	ldd	r0, Z+15	; 0x0f
    12ae:	f0 89       	ldd	r31, Z+16	; 0x10
    12b0:	e0 2d       	mov	r30, r0
    12b2:	30 97       	sbiw	r30, 0x00	; 0
    12b4:	11 f0       	breq	.+4      	; 0x12ba <qtm_binding_layer_init+0x96>
    12b6:	09 95       	icall
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <qtm_binding_layer_init+0xa6>
    12ba:	85 e0       	ldi	r24, 0x05	; 5
    12bc:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <qtm_binding_layer_init+0xa2>
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <errors>
    12ca:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    12ce:	88 23       	and	r24, r24
    12d0:	29 f0       	breq	.+10     	; 0x12dc <qtm_binding_layer_init+0xb8>
    12d2:	10 92 6d 3e 	sts	0x3E6D, r1	; 0x803e6d <errors>
    12d6:	80 e8       	ldi	r24, 0x80	; 128
    12d8:	cf 91       	pop	r28
    12da:	85 cf       	rjmp	.-246    	; 0x11e6 <qtm_error_handler>
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <qtm_lib_start_acquisition>:
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	18 2f       	mov	r17, r24
    12e8:	a0 91 a5 3e 	lds	r26, 0x3EA5	; 0x803ea5 <qtm>
    12ec:	b0 91 a6 3e 	lds	r27, 0x3EA6	; 0x803ea6 <qtm+0x1>
    12f0:	15 96       	adiw	r26, 0x05	; 5
    12f2:	2d 91       	ld	r18, X+
    12f4:	3c 91       	ld	r19, X
    12f6:	16 97       	sbiw	r26, 0x06	; 6
    12f8:	d0 e0       	ldi	r29, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	ed 0f       	add	r30, r29
    12fe:	f1 1d       	adc	r31, r1
    1300:	ed 0f       	add	r30, r29
    1302:	f1 1d       	adc	r31, r1
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	89 2b       	or	r24, r25
    130a:	11 f0       	breq	.+4      	; 0x1310 <qtm_lib_start_acquisition+0x30>
    130c:	df 5f       	subi	r29, 0xFF	; 255
    130e:	f5 cf       	rjmp	.-22     	; 0x12fa <qtm_lib_start_acquisition+0x1a>
    1310:	53 96       	adiw	r26, 0x13	; 19
    1312:	8d 91       	ld	r24, X+
    1314:	9c 91       	ld	r25, X
    1316:	54 97       	sbiw	r26, 0x14	; 20
    1318:	89 2b       	or	r24, r25
    131a:	49 f1       	breq	.+82     	; 0x136e <qtm_lib_start_acquisition+0x8e>
    131c:	81 2f       	mov	r24, r17
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	f9 01       	movw	r30, r18
    1326:	e8 0f       	add	r30, r24
    1328:	f9 1f       	adc	r31, r25
    132a:	01 90       	ld	r0, Z+
    132c:	f0 81       	ld	r31, Z
    132e:	e0 2d       	mov	r30, r0
    1330:	30 97       	sbiw	r30, 0x00	; 0
    1332:	e9 f0       	breq	.+58     	; 0x136e <qtm_lib_start_acquisition+0x8e>
    1334:	1b 96       	adiw	r26, 0x0b	; 11
    1336:	2d 91       	ld	r18, X+
    1338:	3c 91       	ld	r19, X
    133a:	1c 97       	sbiw	r26, 0x0c	; 12
    133c:	d9 01       	movw	r26, r18
    133e:	a8 0f       	add	r26, r24
    1340:	b9 1f       	adc	r27, r25
    1342:	8d 91       	ld	r24, X+
    1344:	9c 91       	ld	r25, X
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	91 f0       	breq	.+36     	; 0x136e <qtm_lib_start_acquisition+0x8e>
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	79 e0       	ldi	r23, 0x09	; 9
    134e:	09 95       	icall
    1350:	c8 2f       	mov	r28, r24
    1352:	81 11       	cpse	r24, r1
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <qtm_lib_start_acquisition+0x82>
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    135c:	10 92 6e 3e 	sts	0x3E6E, r1	; 0x803e6e <current_process_id>
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <qtm_lib_start_acquisition+0x88>
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    1368:	1d 17       	cp	r17, r29
    136a:	20 f0       	brcs	.+8      	; 0x1374 <qtm_lib_start_acquisition+0x94>
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <qtm_lib_start_acquisition+0x90>
    136e:	c2 e0       	ldi	r28, 0x02	; 2
    1370:	82 e8       	ldi	r24, 0x82	; 130
    1372:	39 df       	rcall	.-398    	; 0x11e6 <qtm_error_handler>
    1374:	8c 2f       	mov	r24, r28
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	08 95       	ret

0000137e <qtm_lib_acq_process>:
    137e:	e0 91 a5 3e 	lds	r30, 0x3EA5	; 0x803ea5 <qtm>
    1382:	f0 91 a6 3e 	lds	r31, 0x3EA6	; 0x803ea6 <qtm+0x1>
    1386:	05 84       	ldd	r0, Z+13	; 0x0d
    1388:	f6 85       	ldd	r31, Z+14	; 0x0e
    138a:	e0 2d       	mov	r30, r0
    138c:	09 94       	ijmp

0000138e <qtm_lib_post_process>:
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	1f 92       	push	r1
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	e0 91 a5 3e 	lds	r30, 0x3EA5	; 0x803ea5 <qtm>
    13a0:	f0 91 a6 3e 	lds	r31, 0x3EA6	; 0x803ea6 <qtm+0x1>
    13a4:	05 88       	ldd	r0, Z+21	; 0x15
    13a6:	f6 89       	ldd	r31, Z+22	; 0x16
    13a8:	e0 2d       	mov	r30, r0
    13aa:	30 97       	sbiw	r30, 0x00	; 0
    13ac:	49 f0       	breq	.+18     	; 0x13c0 <qtm_lib_post_process+0x32>
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	09 95       	icall
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    13c0:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    13c4:	81 11       	cpse	r24, r1
    13c6:	2c c0       	rjmp	.+88     	; 0x1420 <qtm_lib_post_process+0x92>
    13c8:	19 81       	ldd	r17, Y+1	; 0x01
    13ca:	11 11       	cpse	r17, r1
    13cc:	29 c0       	rjmp	.+82     	; 0x1420 <qtm_lib_post_process+0x92>
    13ce:	84 e0       	ldi	r24, 0x04	; 4
    13d0:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    13d4:	a0 91 a5 3e 	lds	r26, 0x3EA5	; 0x803ea5 <qtm>
    13d8:	b0 91 a6 3e 	lds	r27, 0x3EA6	; 0x803ea6 <qtm+0x1>
    13dc:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <current_process_id>
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	13 96       	adiw	r26, 0x03	; 3
    13e8:	ed 91       	ld	r30, X+
    13ea:	fc 91       	ld	r31, X
    13ec:	14 97       	sbiw	r26, 0x04	; 4
    13ee:	e8 0f       	add	r30, r24
    13f0:	f9 1f       	adc	r31, r25
    13f2:	01 90       	ld	r0, Z+
    13f4:	f0 81       	ld	r31, Z
    13f6:	e0 2d       	mov	r30, r0
    13f8:	19 96       	adiw	r26, 0x09	; 9
    13fa:	2d 91       	ld	r18, X+
    13fc:	3c 91       	ld	r19, X
    13fe:	1a 97       	sbiw	r26, 0x0a	; 10
    1400:	30 97       	sbiw	r30, 0x00	; 0
    1402:	81 f0       	breq	.+32     	; 0x1424 <qtm_lib_post_process+0x96>
    1404:	d9 01       	movw	r26, r18
    1406:	a8 0f       	add	r26, r24
    1408:	b9 1f       	adc	r27, r25
    140a:	8d 91       	ld	r24, X+
    140c:	9c 91       	ld	r25, X
    140e:	09 95       	icall
    1410:	81 11       	cpse	r24, r1
    1412:	3d c0       	rjmp	.+122    	; 0x148e <qtm_lib_post_process+0x100>
    1414:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <current_process_id>
    1418:	8f 5f       	subi	r24, 0xFF	; 255
    141a:	80 93 6e 3e 	sts	0x3E6E, r24	; 0x803e6e <current_process_id>
    141e:	da cf       	rjmp	.-76     	; 0x13d4 <qtm_lib_post_process+0x46>
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	3c c0       	rjmp	.+120    	; 0x149c <qtm_lib_post_process+0x10e>
    1424:	10 92 6e 3e 	sts	0x3E6E, r1	; 0x803e6e <current_process_id>
    1428:	f9 01       	movw	r30, r18
    142a:	e1 0f       	add	r30, r17
    142c:	f1 1d       	adc	r31, r1
    142e:	e1 0f       	add	r30, r17
    1430:	f1 1d       	adc	r31, r1
    1432:	01 90       	ld	r0, Z+
    1434:	f0 81       	ld	r31, Z
    1436:	e0 2d       	mov	r30, r0
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	59 f0       	breq	.+22     	; 0x1452 <qtm_lib_post_process+0xc4>
    143c:	01 90       	ld	r0, Z+
    143e:	f0 81       	ld	r31, Z
    1440:	e0 2d       	mov	r30, r0
    1442:	80 81       	ld	r24, Z
    1444:	87 ff       	sbrs	r24, 7
    1446:	03 c0       	rjmp	.+6      	; 0x144e <qtm_lib_post_process+0xc0>
    1448:	9c 91       	ld	r25, X
    144a:	94 60       	ori	r25, 0x04	; 4
    144c:	9c 93       	st	X, r25
    144e:	1f 5f       	subi	r17, 0xFF	; 255
    1450:	eb cf       	rjmp	.-42     	; 0x1428 <qtm_lib_post_process+0x9a>
    1452:	10 93 6e 3e 	sts	0x3E6E, r17	; 0x803e6e <current_process_id>
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	80 93 6f 3e 	sts	0x3E6F, r24	; 0x803e6f <qtm_state>
    145c:	57 96       	adiw	r26, 0x17	; 23
    145e:	ed 91       	ld	r30, X+
    1460:	fc 91       	ld	r31, X
    1462:	58 97       	sbiw	r26, 0x18	; 24
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	11 f0       	breq	.+4      	; 0x146c <qtm_lib_post_process+0xde>
    1468:	09 95       	icall
    146a:	05 c0       	rjmp	.+10     	; 0x1476 <qtm_lib_post_process+0xe8>
    146c:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <errors>
    1476:	10 e0       	ldi	r17, 0x00	; 0
    1478:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    147c:	88 23       	and	r24, r24
    147e:	71 f0       	breq	.+28     	; 0x149c <qtm_lib_post_process+0x10e>
    1480:	10 92 6d 3e 	sts	0x3E6D, r1	; 0x803e6d <errors>
    1484:	80 91 6e 3e 	lds	r24, 0x3E6E	; 0x803e6e <current_process_id>
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	ad de       	rcall	.-678    	; 0x11e6 <qtm_error_handler>
    148c:	07 c0       	rjmp	.+14     	; 0x149c <qtm_lib_post_process+0x10e>
    148e:	80 91 6d 3e 	lds	r24, 0x3E6D	; 0x803e6d <errors>
    1492:	8f 5f       	subi	r24, 0xFF	; 255
    1494:	80 93 6d 3e 	sts	0x3E6D, r24	; 0x803e6d <errors>
    1498:	13 e0       	ldi	r17, 0x03	; 3
    149a:	ee cf       	rjmp	.-36     	; 0x1478 <qtm_lib_post_process+0xea>
    149c:	81 2f       	mov	r24, r17
    149e:	0f 90       	pop	r0
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	08 95       	ret

000014a8 <select_next_channel_to_measure>:
    14a8:	80 91 73 3e 	lds	r24, 0x3E73	; 0x803e73 <current_measure_channel>
    14ac:	90 91 74 3e 	lds	r25, 0x3E74	; 0x803e74 <current_measure_channel+0x1>
    14b0:	a0 91 a7 3e 	lds	r26, 0x3EA7	; 0x803ea7 <qtm_acquisition_control_working_set_ptr>
    14b4:	b0 91 a8 3e 	lds	r27, 0x3EA8	; 0x803ea8 <qtm_acquisition_control_working_set_ptr+0x1>
    14b8:	ed 91       	ld	r30, X+
    14ba:	fc 91       	ld	r31, X
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	40 81       	ld	r20, Z
    14c0:	51 81       	ldd	r21, Z+1	; 0x01
    14c2:	25 e0       	ldi	r18, 0x05	; 5
    14c4:	28 9f       	mul	r18, r24
    14c6:	b0 01       	movw	r22, r0
    14c8:	29 9f       	mul	r18, r25
    14ca:	70 0d       	add	r23, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	84 17       	cp	r24, r20
    14d4:	95 07       	cpc	r25, r21
    14d6:	a8 f4       	brcc	.+42     	; 0x1502 <select_next_channel_to_measure+0x5a>
    14d8:	14 96       	adiw	r26, 0x04	; 4
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	15 97       	sbiw	r26, 0x05	; 5
    14e0:	e2 0f       	add	r30, r18
    14e2:	f3 1f       	adc	r31, r19
    14e4:	e6 0f       	add	r30, r22
    14e6:	f7 1f       	adc	r31, r23
    14e8:	e0 81       	ld	r30, Z
    14ea:	2b 5f       	subi	r18, 0xFB	; 251
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	e0 fd       	sbrc	r30, 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <select_next_channel_to_measure+0x4e>
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	ee cf       	rjmp	.-36     	; 0x14d2 <select_next_channel_to_measure+0x2a>
    14f6:	80 93 73 3e 	sts	0x3E73, r24	; 0x803e73 <current_measure_channel>
    14fa:	90 93 74 3e 	sts	0x3E74, r25	; 0x803e74 <current_measure_channel+0x1>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	08 95       	ret
    1502:	10 92 73 3e 	sts	0x3E73, r1	; 0x803e73 <current_measure_channel>
    1506:	10 92 74 3e 	sts	0x3E74, r1	; 0x803e74 <current_measure_channel+0x1>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	08 95       	ret

0000150e <qtm_measure_node>:
    150e:	bc 01       	movw	r22, r24
    1510:	e0 91 a7 3e 	lds	r30, 0x3EA7	; 0x803ea7 <qtm_acquisition_control_working_set_ptr>
    1514:	f0 91 a8 3e 	lds	r31, 0x3EA8	; 0x803ea8 <qtm_acquisition_control_working_set_ptr+0x1>
    1518:	86 e0       	ldi	r24, 0x06	; 6
    151a:	86 9f       	mul	r24, r22
    151c:	90 01       	movw	r18, r0
    151e:	87 9f       	mul	r24, r23
    1520:	30 0d       	add	r19, r0
    1522:	11 24       	eor	r1, r1
    1524:	a2 81       	ldd	r26, Z+2	; 0x02
    1526:	b3 81       	ldd	r27, Z+3	; 0x03
    1528:	a2 0f       	add	r26, r18
    152a:	b3 1f       	adc	r27, r19
    152c:	11 96       	adiw	r26, 0x01	; 1
    152e:	8c 91       	ld	r24, X
    1530:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
    1534:	a2 81       	ldd	r26, Z+2	; 0x02
    1536:	b3 81       	ldd	r27, Z+3	; 0x03
    1538:	a2 0f       	add	r26, r18
    153a:	b3 1f       	adc	r27, r19
    153c:	8c 91       	ld	r24, X
    153e:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    1542:	95 e0       	ldi	r25, 0x05	; 5
    1544:	96 9f       	mul	r25, r22
    1546:	a0 01       	movw	r20, r0
    1548:	97 9f       	mul	r25, r23
    154a:	50 0d       	add	r21, r0
    154c:	11 24       	eor	r1, r1
    154e:	a4 81       	ldd	r26, Z+4	; 0x04
    1550:	b5 81       	ldd	r27, Z+5	; 0x05
    1552:	a4 0f       	add	r26, r20
    1554:	b5 1f       	adc	r27, r21
    1556:	13 96       	adiw	r26, 0x03	; 3
    1558:	8c 91       	ld	r24, X
    155a:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <__TEXT_REGION_LENGTH__+0x70061a>
    155e:	a4 81       	ldd	r26, Z+4	; 0x04
    1560:	b5 81       	ldd	r27, Z+5	; 0x05
    1562:	a4 0f       	add	r26, r20
    1564:	b5 1f       	adc	r27, r21
    1566:	14 96       	adiw	r26, 0x04	; 4
    1568:	8c 91       	ld	r24, X
    156a:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <__TEXT_REGION_LENGTH__+0x70061b>
    156e:	a4 81       	ldd	r26, Z+4	; 0x04
    1570:	b5 81       	ldd	r27, Z+5	; 0x05
    1572:	a4 0f       	add	r26, r20
    1574:	b5 1f       	adc	r27, r21
    1576:	8c 91       	ld	r24, X
    1578:	81 fd       	sbrc	r24, 1
    157a:	9c 93       	st	X, r25
    157c:	84 81       	ldd	r24, Z+4	; 0x04
    157e:	95 81       	ldd	r25, Z+5	; 0x05
    1580:	dc 01       	movw	r26, r24
    1582:	a4 0f       	add	r26, r20
    1584:	b5 1f       	adc	r27, r21
    1586:	8c 91       	ld	r24, X
    1588:	8c 71       	andi	r24, 0x1C	; 28
    158a:	69 f4       	brne	.+26     	; 0x15a6 <qtm_measure_node+0x98>
    158c:	a2 81       	ldd	r26, Z+2	; 0x02
    158e:	b3 81       	ldd	r27, Z+3	; 0x03
    1590:	a2 0f       	add	r26, r18
    1592:	b3 1f       	adc	r27, r19
    1594:	14 96       	adiw	r26, 0x04	; 4
    1596:	ac 91       	ld	r26, X
    1598:	a2 95       	swap	r26
    159a:	af 70       	andi	r26, 0x0F	; 15
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	a2 59       	subi	r26, 0x92	; 146
    15a0:	b4 46       	sbci	r27, 0x64	; 100
    15a2:	8c 91       	ld	r24, X
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <qtm_measure_node+0x9a>
    15a6:	8f e3       	ldi	r24, 0x3F	; 63
    15a8:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <__TEXT_REGION_LENGTH__+0x70061c>
    15ac:	a2 81       	ldd	r26, Z+2	; 0x02
    15ae:	b3 81       	ldd	r27, Z+3	; 0x03
    15b0:	a2 0f       	add	r26, r18
    15b2:	b3 1f       	adc	r27, r19
    15b4:	12 96       	adiw	r26, 0x02	; 2
    15b6:	8c 91       	ld	r24, X
    15b8:	8b 31       	cpi	r24, 0x1B	; 27
    15ba:	10 f4       	brcc	.+4      	; 0x15c0 <qtm_measure_node+0xb2>
    15bc:	8c 5f       	subi	r24, 0xFC	; 252
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <qtm_measure_node+0xb4>
    15c0:	8f e1       	ldi	r24, 0x1F	; 31
    15c2:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    15c6:	a2 81       	ldd	r26, Z+2	; 0x02
    15c8:	b3 81       	ldd	r27, Z+3	; 0x03
    15ca:	a2 0f       	add	r26, r18
    15cc:	b3 1f       	adc	r27, r19
    15ce:	15 96       	adiw	r26, 0x05	; 5
    15d0:	8c 91       	ld	r24, X
    15d2:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    15d6:	a2 81       	ldd	r26, Z+2	; 0x02
    15d8:	b3 81       	ldd	r27, Z+3	; 0x03
    15da:	a2 0f       	add	r26, r18
    15dc:	b3 1f       	adc	r27, r19
    15de:	13 96       	adiw	r26, 0x03	; 3
    15e0:	8c 91       	ld	r24, X
    15e2:	82 95       	swap	r24
    15e4:	8f 70       	andi	r24, 0x0F	; 15
    15e6:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <__TEXT_REGION_LENGTH__+0x700619>
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	fc 01       	movw	r30, r24
    15f0:	e2 0f       	add	r30, r18
    15f2:	f3 1f       	adc	r31, r19
    15f4:	83 81       	ldd	r24, Z+3	; 0x03
    15f6:	8f 70       	andi	r24, 0x0F	; 15
    15f8:	80 61       	ori	r24, 0x10	; 16
    15fa:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    15fe:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1602:	83 60       	ori	r24, 0x03	; 3
    1604:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1608:	81 e8       	ldi	r24, 0x81	; 129
    160a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1614:	08 95       	ret

00001616 <qtm_acquisition_process>:
    1616:	3f 92       	push	r3
    1618:	4f 92       	push	r4
    161a:	5f 92       	push	r5
    161c:	6f 92       	push	r6
    161e:	7f 92       	push	r7
    1620:	8f 92       	push	r8
    1622:	9f 92       	push	r9
    1624:	af 92       	push	r10
    1626:	bf 92       	push	r11
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	80 91 72 3e 	lds	r24, 0x3E72	; 0x803e72 <touch_seq_lib_state>
    163c:	88 23       	and	r24, r24
    163e:	09 f4       	brne	.+2      	; 0x1642 <qtm_acquisition_process+0x2c>
    1640:	48 c1       	rjmp	.+656    	; 0x18d2 <qtm_acquisition_process+0x2bc>
    1642:	a0 91 a7 3e 	lds	r26, 0x3EA7	; 0x803ea7 <qtm_acquisition_control_working_set_ptr>
    1646:	b0 91 a8 3e 	lds	r27, 0x3EA8	; 0x803ea8 <qtm_acquisition_control_working_set_ptr+0x1>
    164a:	c0 90 a9 3e 	lds	r12, 0x3EA9	; 0x803ea9 <qtm_raw_data_measurements_ptr>
    164e:	d0 90 aa 3e 	lds	r13, 0x3EAA	; 0x803eaa <qtm_raw_data_measurements_ptr+0x1>
    1652:	00 e0       	ldi	r16, 0x00	; 0
    1654:	10 e0       	ldi	r17, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	e1 2c       	mov	r14, r1
    165c:	f1 2c       	mov	r15, r1
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	33 24       	eor	r3, r3
    1662:	33 94       	inc	r3
    1664:	d1 e8       	ldi	r29, 0x81	; 129
    1666:	4d 2e       	mov	r4, r29
    1668:	88 24       	eor	r8, r8
    166a:	8a 94       	dec	r8
    166c:	99 24       	eor	r9, r9
    166e:	93 94       	inc	r9
    1670:	6d 90       	ld	r6, X+
    1672:	7c 90       	ld	r7, X
    1674:	11 97       	sbiw	r26, 0x01	; 1
    1676:	f3 01       	movw	r30, r6
    1678:	20 81       	ld	r18, Z
    167a:	31 81       	ldd	r19, Z+1	; 0x01
    167c:	e2 16       	cp	r14, r18
    167e:	f3 06       	cpc	r15, r19
    1680:	08 f0       	brcs	.+2      	; 0x1684 <qtm_acquisition_process+0x6e>
    1682:	23 c1       	rjmp	.+582    	; 0x18ca <qtm_acquisition_process+0x2b4>
    1684:	e6 01       	movw	r28, r12
    1686:	29 91       	ld	r18, Y+
    1688:	39 91       	ld	r19, Y+
    168a:	6e 01       	movw	r12, r28
    168c:	14 96       	adiw	r26, 0x04	; 4
    168e:	ed 91       	ld	r30, X+
    1690:	fc 91       	ld	r31, X
    1692:	15 97       	sbiw	r26, 0x05	; 5
    1694:	e6 0f       	add	r30, r22
    1696:	f7 1f       	adc	r31, r23
    1698:	40 81       	ld	r20, Z
    169a:	4c 71       	andi	r20, 0x1C	; 28
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	56 95       	lsr	r21
    16a0:	47 95       	ror	r20
    16a2:	56 95       	lsr	r21
    16a4:	47 95       	ror	r20
    16a6:	41 15       	cp	r20, r1
    16a8:	51 05       	cpc	r21, r1
    16aa:	21 f0       	breq	.+8      	; 0x16b4 <qtm_acquisition_process+0x9e>
    16ac:	41 30       	cpi	r20, 0x01	; 1
    16ae:	51 05       	cpc	r21, r1
    16b0:	b9 f0       	breq	.+46     	; 0x16e0 <qtm_acquisition_process+0xca>
    16b2:	02 c1       	rjmp	.+516    	; 0x18b8 <qtm_acquisition_process+0x2a2>
    16b4:	12 96       	adiw	r26, 0x02	; 2
    16b6:	cd 91       	ld	r28, X+
    16b8:	dc 91       	ld	r29, X
    16ba:	13 97       	sbiw	r26, 0x03	; 3
    16bc:	c0 0f       	add	r28, r16
    16be:	d1 1f       	adc	r29, r17
    16c0:	4c 81       	ldd	r20, Y+4	; 0x04
    16c2:	4f 70       	andi	r20, 0x0F	; 15
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	49 17       	cp	r20, r25
    16c8:	10 f4       	brcc	.+4      	; 0x16ce <qtm_acquisition_process+0xb8>
    16ca:	94 1b       	sub	r25, r20
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <qtm_acquisition_process+0xba>
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <qtm_acquisition_process+0xc0>
    16d2:	36 95       	lsr	r19
    16d4:	27 95       	ror	r18
    16d6:	9a 95       	dec	r25
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <qtm_acquisition_process+0xbc>
    16da:	21 83       	std	Z+1, r18	; 0x01
    16dc:	32 83       	std	Z+2, r19	; 0x02
    16de:	ed c0       	rjmp	.+474    	; 0x18ba <qtm_acquisition_process+0x2a4>
    16e0:	12 96       	adiw	r26, 0x02	; 2
    16e2:	4d 91       	ld	r20, X+
    16e4:	5c 91       	ld	r21, X
    16e6:	13 97       	sbiw	r26, 0x03	; 3
    16e8:	40 0f       	add	r20, r16
    16ea:	51 1f       	adc	r21, r17
    16ec:	ea 01       	movw	r28, r20
    16ee:	0d 80       	ldd	r0, Y+5	; 0x05
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <qtm_acquisition_process+0xe0>
    16f2:	36 95       	lsr	r19
    16f4:	27 95       	ror	r18
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <qtm_acquisition_process+0xdc>
    16fa:	21 83       	std	Z+1, r18	; 0x01
    16fc:	32 83       	std	Z+2, r19	; 0x02
    16fe:	a3 80       	ldd	r10, Z+3	; 0x03
    1700:	b4 80       	ldd	r11, Z+4	; 0x04
    1702:	21 15       	cp	r18, r1
    1704:	d2 e0       	ldi	r29, 0x02	; 2
    1706:	3d 07       	cpc	r19, r29
    1708:	20 f0       	brcs	.+8      	; 0x1712 <qtm_acquisition_process+0xfc>
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	31 40       	sbci	r19, 0x01	; 1
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	05 c0       	rjmp	.+10     	; 0x171c <qtm_acquisition_process+0x106>
    1712:	a4 01       	movw	r20, r8
    1714:	42 1b       	sub	r20, r18
    1716:	53 0b       	sbc	r21, r19
    1718:	9a 01       	movw	r18, r20
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	e3 01       	movw	r28, r6
    171e:	5a 80       	ldd	r5, Y+2	; 0x02
    1720:	d0 e4       	ldi	r29, 0x40	; 64
    1722:	5d 12       	cpse	r5, r29
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <qtm_acquisition_process+0x11a>
    1726:	36 95       	lsr	r19
    1728:	27 95       	ror	r18
    172a:	99 23       	and	r25, r25
    172c:	19 f0       	breq	.+6      	; 0x1734 <qtm_acquisition_process+0x11e>
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <qtm_acquisition_process+0x12c>
    1730:	99 23       	and	r25, r25
    1732:	39 f0       	breq	.+14     	; 0x1742 <qtm_acquisition_process+0x12c>
    1734:	4f ef       	ldi	r20, 0xFF	; 255
    1736:	a4 16       	cp	r10, r20
    1738:	b4 06       	cpc	r11, r20
    173a:	31 f4       	brne	.+12     	; 0x1748 <qtm_acquisition_process+0x132>
    173c:	40 82       	st	Z, r4
    173e:	8e e0       	ldi	r24, 0x0E	; 14
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <qtm_acquisition_process+0x13a>
    1742:	77 24       	eor	r7, r7
    1744:	73 94       	inc	r7
    1746:	01 c0       	rjmp	.+2      	; 0x174a <qtm_acquisition_process+0x134>
    1748:	71 2c       	mov	r7, r1
    174a:	2a 30       	cpi	r18, 0x0A	; 10
    174c:	31 05       	cpc	r19, r1
    174e:	90 f4       	brcc	.+36     	; 0x1774 <qtm_acquisition_process+0x15e>
    1750:	14 96       	adiw	r26, 0x04	; 4
    1752:	ed 91       	ld	r30, X+
    1754:	fc 91       	ld	r31, X
    1756:	15 97       	sbiw	r26, 0x05	; 5
    1758:	e6 0f       	add	r30, r22
    175a:	f7 1f       	adc	r31, r23
    175c:	90 81       	ld	r25, Z
    175e:	97 ff       	sbrs	r25, 7
    1760:	30 82       	st	Z, r3
    1762:	14 96       	adiw	r26, 0x04	; 4
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	15 97       	sbiw	r26, 0x05	; 5
    176a:	e6 0f       	add	r30, r22
    176c:	f7 1f       	adc	r31, r23
    176e:	a3 82       	std	Z+3, r10	; 0x03
    1770:	b4 82       	std	Z+4, r11	; 0x04
    1772:	a3 c0       	rjmp	.+326    	; 0x18ba <qtm_acquisition_process+0x2a4>
    1774:	e5 01       	movw	r28, r10
    1776:	cd 2f       	mov	r28, r29
    1778:	dd 27       	eor	r29, r29
    177a:	c2 95       	swap	r28
    177c:	cf 70       	andi	r28, 0x0F	; 15
    177e:	9c 2f       	mov	r25, r28
    1780:	a5 01       	movw	r20, r10
    1782:	44 27       	eor	r20, r20
    1784:	5f 70       	andi	r21, 0x0F	; 15
    1786:	65 2e       	mov	r6, r21
    1788:	a5 01       	movw	r20, r10
    178a:	40 7f       	andi	r20, 0xF0	; 240
    178c:	55 27       	eor	r21, r21
    178e:	52 95       	swap	r21
    1790:	42 95       	swap	r20
    1792:	4f 70       	andi	r20, 0x0F	; 15
    1794:	45 27       	eor	r20, r21
    1796:	5f 70       	andi	r21, 0x0F	; 15
    1798:	45 27       	eor	r20, r21
    179a:	5a 2d       	mov	r21, r10
    179c:	5f 70       	andi	r21, 0x0F	; 15
    179e:	a5 2e       	mov	r10, r21
    17a0:	c4 30       	cpi	r28, 0x04	; 4
    17a2:	30 f0       	brcs	.+12     	; 0x17b0 <qtm_acquisition_process+0x19a>
    17a4:	93 70       	andi	r25, 0x03	; 3
    17a6:	d6 95       	lsr	r29
    17a8:	c7 95       	ror	r28
    17aa:	d6 95       	lsr	r29
    17ac:	c7 95       	ror	r28
    17ae:	9c 0f       	add	r25, r28
    17b0:	71 10       	cpse	r7, r1
    17b2:	3c c0       	rjmp	.+120    	; 0x182c <qtm_acquisition_process+0x216>
    17b4:	50 e8       	ldi	r21, 0x80	; 128
    17b6:	55 0d       	add	r21, r5
    17b8:	52 30       	cpi	r21, 0x02	; 2
    17ba:	10 f4       	brcc	.+4      	; 0x17c0 <qtm_acquisition_process+0x1aa>
    17bc:	56 e0       	ldi	r21, 0x06	; 6
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <qtm_acquisition_process+0x1b8>
    17c0:	53 e0       	ldi	r21, 0x03	; 3
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <qtm_acquisition_process+0x1b8>
    17c4:	95 17       	cp	r25, r21
    17c6:	68 f4       	brcc	.+26     	; 0x17e2 <qtm_acquisition_process+0x1cc>
    17c8:	9f 5f       	subi	r25, 0xFF	; 255
    17ca:	2f 5c       	subi	r18, 0xCF	; 207
    17cc:	31 09       	sbc	r19, r1
    17ce:	20 3d       	cpi	r18, 0xD0	; 208
    17d0:	31 05       	cpc	r19, r1
    17d2:	c0 f7       	brcc	.-16     	; 0x17c4 <qtm_acquisition_process+0x1ae>
    17d4:	06 c0       	rjmp	.+12     	; 0x17e2 <qtm_acquisition_process+0x1cc>
    17d6:	cf e0       	ldi	r28, 0x0F	; 15
    17d8:	6c 16       	cp	r6, r28
    17da:	49 f0       	breq	.+18     	; 0x17ee <qtm_acquisition_process+0x1d8>
    17dc:	63 94       	inc	r6
    17de:	25 51       	subi	r18, 0x15	; 21
    17e0:	31 09       	sbc	r19, r1
    17e2:	26 31       	cpi	r18, 0x16	; 22
    17e4:	31 05       	cpc	r19, r1
    17e6:	b8 f7       	brcc	.-18     	; 0x17d6 <qtm_acquisition_process+0x1c0>
    17e8:	df e0       	ldi	r29, 0x0F	; 15
    17ea:	6d 12       	cpse	r6, r29
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <qtm_acquisition_process+0x1f4>
    17ee:	95 17       	cp	r25, r21
    17f0:	20 f4       	brcc	.+8      	; 0x17fa <qtm_acquisition_process+0x1e4>
    17f2:	9f 5f       	subi	r25, 0xFF	; 255
    17f4:	d5 e0       	ldi	r29, 0x05	; 5
    17f6:	6d 2e       	mov	r6, r29
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <qtm_acquisition_process+0x1f4>
    17fa:	cf e0       	ldi	r28, 0x0F	; 15
    17fc:	6c 2e       	mov	r6, r28
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <qtm_acquisition_process+0x1f4>
    1800:	4f 30       	cpi	r20, 0x0F	; 15
    1802:	49 f0       	breq	.+18     	; 0x1816 <qtm_acquisition_process+0x200>
    1804:	4f 5f       	subi	r20, 0xFF	; 255
    1806:	22 50       	subi	r18, 0x02	; 2
    1808:	31 09       	sbc	r19, r1
    180a:	23 30       	cpi	r18, 0x03	; 3
    180c:	31 05       	cpc	r19, r1
    180e:	c0 f7       	brcc	.-16     	; 0x1800 <qtm_acquisition_process+0x1ea>
    1810:	4f 30       	cpi	r20, 0x0F	; 15
    1812:	09 f0       	breq	.+2      	; 0x1816 <qtm_acquisition_process+0x200>
    1814:	65 c0       	rjmp	.+202    	; 0x18e0 <qtm_acquisition_process+0x2ca>
    1816:	4f e0       	ldi	r20, 0x0F	; 15
    1818:	64 16       	cp	r6, r20
    181a:	81 f1       	breq	.+96     	; 0x187c <qtm_acquisition_process+0x266>
    181c:	63 94       	inc	r6
    181e:	45 e0       	ldi	r20, 0x05	; 5
    1820:	5f c0       	rjmp	.+190    	; 0x18e0 <qtm_acquisition_process+0x2ca>
    1822:	99 23       	and	r25, r25
    1824:	61 f0       	breq	.+24     	; 0x183e <qtm_acquisition_process+0x228>
    1826:	91 50       	subi	r25, 0x01	; 1
    1828:	2f 5c       	subi	r18, 0xCF	; 207
    182a:	31 09       	sbc	r19, r1
    182c:	20 3d       	cpi	r18, 0xD0	; 208
    182e:	31 05       	cpc	r19, r1
    1830:	c0 f7       	brcc	.-16     	; 0x1822 <qtm_acquisition_process+0x20c>
    1832:	05 c0       	rjmp	.+10     	; 0x183e <qtm_acquisition_process+0x228>
    1834:	66 20       	and	r6, r6
    1836:	41 f0       	breq	.+16     	; 0x1848 <qtm_acquisition_process+0x232>
    1838:	6a 94       	dec	r6
    183a:	25 51       	subi	r18, 0x15	; 21
    183c:	31 09       	sbc	r19, r1
    183e:	26 31       	cpi	r18, 0x16	; 22
    1840:	31 05       	cpc	r19, r1
    1842:	c0 f7       	brcc	.-16     	; 0x1834 <qtm_acquisition_process+0x21e>
    1844:	61 10       	cpse	r6, r1
    1846:	0d c0       	rjmp	.+26     	; 0x1862 <qtm_acquisition_process+0x24c>
    1848:	99 23       	and	r25, r25
    184a:	21 f0       	breq	.+8      	; 0x1854 <qtm_acquisition_process+0x23e>
    184c:	91 50       	subi	r25, 0x01	; 1
    184e:	5a e0       	ldi	r21, 0x0A	; 10
    1850:	65 2e       	mov	r6, r21
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <qtm_acquisition_process+0x24c>
    1854:	61 2c       	mov	r6, r1
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <qtm_acquisition_process+0x24c>
    1858:	44 23       	and	r20, r20
    185a:	41 f0       	breq	.+16     	; 0x186c <qtm_acquisition_process+0x256>
    185c:	41 50       	subi	r20, 0x01	; 1
    185e:	22 50       	subi	r18, 0x02	; 2
    1860:	31 09       	sbc	r19, r1
    1862:	23 30       	cpi	r18, 0x03	; 3
    1864:	31 05       	cpc	r19, r1
    1866:	c0 f7       	brcc	.-16     	; 0x1858 <qtm_acquisition_process+0x242>
    1868:	41 11       	cpse	r20, r1
    186a:	10 c0       	rjmp	.+32     	; 0x188c <qtm_acquisition_process+0x276>
    186c:	66 20       	and	r6, r6
    186e:	e9 f1       	breq	.+122    	; 0x18ea <qtm_acquisition_process+0x2d4>
    1870:	6a 94       	dec	r6
    1872:	4a e0       	ldi	r20, 0x0A	; 10
    1874:	23 30       	cpi	r18, 0x03	; 3
    1876:	31 05       	cpc	r19, r1
    1878:	c8 f6       	brcc	.-78     	; 0x182c <qtm_acquisition_process+0x216>
    187a:	08 c0       	rjmp	.+16     	; 0x188c <qtm_acquisition_process+0x276>
    187c:	59 13       	cpse	r21, r25
    187e:	2f c0       	rjmp	.+94     	; 0x18de <qtm_acquisition_process+0x2c8>
    1880:	23 30       	cpi	r18, 0x03	; 3
    1882:	31 05       	cpc	r19, r1
    1884:	40 f1       	brcs	.+80     	; 0x18d6 <qtm_acquisition_process+0x2c0>
    1886:	4f e0       	ldi	r20, 0x0F	; 15
    1888:	a4 2e       	mov	r10, r20
    188a:	4f e0       	ldi	r20, 0x0F	; 15
    188c:	94 30       	cpi	r25, 0x04	; 4
    188e:	18 f0       	brcs	.+6      	; 0x1896 <qtm_acquisition_process+0x280>
    1890:	99 0f       	add	r25, r25
    1892:	99 0f       	add	r25, r25
    1894:	99 50       	subi	r25, 0x09	; 9
    1896:	c0 e1       	ldi	r28, 0x10	; 16
    1898:	4c 9f       	mul	r20, r28
    189a:	a0 01       	movw	r20, r0
    189c:	11 24       	eor	r1, r1
    189e:	56 29       	or	r21, r6
    18a0:	4a 29       	or	r20, r10
    18a2:	c9 2f       	mov	r28, r25
    18a4:	d0 e0       	ldi	r29, 0x00	; 0
    18a6:	dc 2f       	mov	r29, r28
    18a8:	cc 27       	eor	r28, r28
    18aa:	d2 95       	swap	r29
    18ac:	d0 7f       	andi	r29, 0xF0	; 240
    18ae:	4c 2b       	or	r20, r28
    18b0:	5d 2b       	or	r21, r29
    18b2:	43 83       	std	Z+3, r20	; 0x03
    18b4:	54 83       	std	Z+4, r21	; 0x04
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <qtm_acquisition_process+0x2a4>
    18b8:	ff cf       	rjmp	.-2      	; 0x18b8 <qtm_acquisition_process+0x2a2>
    18ba:	df ef       	ldi	r29, 0xFF	; 255
    18bc:	ed 1a       	sub	r14, r29
    18be:	fd 0a       	sbc	r15, r29
    18c0:	6b 5f       	subi	r22, 0xFB	; 251
    18c2:	7f 4f       	sbci	r23, 0xFF	; 255
    18c4:	0a 5f       	subi	r16, 0xFA	; 250
    18c6:	1f 4f       	sbci	r17, 0xFF	; 255
    18c8:	d3 ce       	rjmp	.-602    	; 0x1670 <qtm_acquisition_process+0x5a>
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	90 93 72 3e 	sts	0x3E72, r25	; 0x803e72 <touch_seq_lib_state>
    18d0:	0e c0       	rjmp	.+28     	; 0x18ee <qtm_acquisition_process+0x2d8>
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	0c c0       	rjmp	.+24     	; 0x18ee <qtm_acquisition_process+0x2d8>
    18d6:	4f e0       	ldi	r20, 0x0F	; 15
    18d8:	2f e0       	ldi	r18, 0x0F	; 15
    18da:	a2 2e       	mov	r10, r18
    18dc:	d7 cf       	rjmp	.-82     	; 0x188c <qtm_acquisition_process+0x276>
    18de:	4f e0       	ldi	r20, 0x0F	; 15
    18e0:	23 30       	cpi	r18, 0x03	; 3
    18e2:	31 05       	cpc	r19, r1
    18e4:	08 f0       	brcs	.+2      	; 0x18e8 <qtm_acquisition_process+0x2d2>
    18e6:	73 cf       	rjmp	.-282    	; 0x17ce <qtm_acquisition_process+0x1b8>
    18e8:	d1 cf       	rjmp	.-94     	; 0x188c <qtm_acquisition_process+0x276>
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	cf cf       	rjmp	.-98     	; 0x188c <qtm_acquisition_process+0x276>
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	bf 90       	pop	r11
    1900:	af 90       	pop	r10
    1902:	9f 90       	pop	r9
    1904:	8f 90       	pop	r8
    1906:	7f 90       	pop	r7
    1908:	6f 90       	pop	r6
    190a:	5f 90       	pop	r5
    190c:	4f 90       	pop	r4
    190e:	3f 90       	pop	r3
    1910:	08 95       	ret

00001912 <qtm_ptc_init_acquisition_module>:
    1912:	cf 93       	push	r28
    1914:	dc 01       	movw	r26, r24
    1916:	89 2b       	or	r24, r25
    1918:	79 f1       	breq	.+94     	; 0x1978 <qtm_ptc_init_acquisition_module+0x66>
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	11 97       	sbiw	r26, 0x01	; 1
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	26 17       	cp	r18, r22
    1930:	37 07       	cpc	r19, r23
    1932:	79 f0       	breq	.+30     	; 0x1952 <qtm_ptc_init_acquisition_module+0x40>
    1934:	12 96       	adiw	r26, 0x02	; 2
    1936:	ed 91       	ld	r30, X+
    1938:	fc 91       	ld	r31, X
    193a:	13 97       	sbiw	r26, 0x03	; 3
    193c:	e4 0f       	add	r30, r20
    193e:	f5 1f       	adc	r31, r21
    1940:	c0 81       	ld	r28, Z
    1942:	81 81       	ldd	r24, Z+1	; 0x01
    1944:	8c 2b       	or	r24, r28
    1946:	98 2b       	or	r25, r24
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	3f 4f       	sbci	r19, 0xFF	; 255
    194c:	4a 5f       	subi	r20, 0xFA	; 250
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	ee cf       	rjmp	.-36     	; 0x192e <qtm_ptc_init_acquisition_module+0x1c>
    1952:	99 23       	and	r25, r25
    1954:	99 f0       	breq	.+38     	; 0x197c <qtm_ptc_init_acquisition_module+0x6a>
    1956:	80 91 72 3e 	lds	r24, 0x3E72	; 0x803e72 <touch_seq_lib_state>
    195a:	81 11       	cpse	r24, r1
    195c:	06 c0       	rjmp	.+12     	; 0x196a <qtm_ptc_init_acquisition_module+0x58>
    195e:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 72 3e 	sts	0x3E72, r24	; 0x803e72 <touch_seq_lib_state>
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <qtm_ptc_init_acquisition_module+0x62>
    196a:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    196e:	98 2b       	or	r25, r24
    1970:	90 93 22 06 	sts	0x0622, r25	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	03 c0       	rjmp	.+6      	; 0x197e <qtm_ptc_init_acquisition_module+0x6c>
    1978:	8b e0       	ldi	r24, 0x0B	; 11
    197a:	01 c0       	rjmp	.+2      	; 0x197e <qtm_ptc_init_acquisition_module+0x6c>
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <qtm_ptc_qtlib_assign_signal_memory>:
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	31 f0       	breq	.+12     	; 0x1992 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    1986:	80 93 a9 3e 	sts	0x3EA9, r24	; 0x803ea9 <qtm_raw_data_measurements_ptr>
    198a:	90 93 aa 3e 	sts	0x3EAA, r25	; 0x803eaa <qtm_raw_data_measurements_ptr+0x1>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	08 95       	ret
    1992:	8b e0       	ldi	r24, 0x0B	; 11
    1994:	08 95       	ret

00001996 <qtm_ptc_start_measurement_seq>:
    1996:	61 15       	cp	r22, r1
    1998:	71 05       	cpc	r23, r1
    199a:	91 f1       	breq	.+100    	; 0x1a00 <qtm_ptc_start_measurement_seq+0x6a>
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	81 f1       	breq	.+96     	; 0x1a00 <qtm_ptc_start_measurement_seq+0x6a>
    19a0:	20 91 72 3e 	lds	r18, 0x3E72	; 0x803e72 <touch_seq_lib_state>
    19a4:	22 23       	and	r18, r18
    19a6:	71 f1       	breq	.+92     	; 0x1a04 <qtm_ptc_start_measurement_seq+0x6e>
    19a8:	24 30       	cpi	r18, 0x04	; 4
    19aa:	71 f1       	breq	.+92     	; 0x1a08 <qtm_ptc_start_measurement_seq+0x72>
    19ac:	80 93 a7 3e 	sts	0x3EA7, r24	; 0x803ea7 <qtm_acquisition_control_working_set_ptr>
    19b0:	90 93 a8 3e 	sts	0x3EA8, r25	; 0x803ea8 <qtm_acquisition_control_working_set_ptr+0x1>
    19b4:	60 93 70 3e 	sts	0x3E70, r22	; 0x803e70 <ptc_seq_measure_complete_pointer>
    19b8:	70 93 71 3e 	sts	0x3E71, r23	; 0x803e71 <ptc_seq_measure_complete_pointer+0x1>
    19bc:	20 ec       	ldi	r18, 0xC0	; 192
    19be:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19c2:	dc 01       	movw	r26, r24
    19c4:	ed 91       	ld	r30, X+
    19c6:	fc 91       	ld	r31, X
    19c8:	22 81       	ldd	r18, Z+2	; 0x02
    19ca:	20 34       	cpi	r18, 0x40	; 64
    19cc:	21 f4       	brne	.+8      	; 0x19d6 <qtm_ptc_start_measurement_seq+0x40>
    19ce:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19d2:	20 62       	ori	r18, 0x20	; 32
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <qtm_ptc_start_measurement_seq+0x4a>
    19d6:	20 38       	cpi	r18, 0x80	; 128
    19d8:	41 f4       	brne	.+16     	; 0x19ea <qtm_ptc_start_measurement_seq+0x54>
    19da:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19de:	28 62       	ori	r18, 0x28	; 40
    19e0:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19e4:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    19e8:	13 c0       	rjmp	.+38     	; 0x1a10 <qtm_ptc_start_measurement_seq+0x7a>
    19ea:	21 38       	cpi	r18, 0x81	; 129
    19ec:	79 f4       	brne	.+30     	; 0x1a0c <qtm_ptc_start_measurement_seq+0x76>
    19ee:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19f2:	28 62       	ori	r18, 0x28	; 40
    19f4:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    19f8:	26 e8       	ldi	r18, 0x86	; 134
    19fa:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <qtm_ptc_start_measurement_seq+0x7a>
    1a00:	8b e0       	ldi	r24, 0x0B	; 11
    1a02:	08 95       	ret
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	08 95       	ret
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	08 95       	ret
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	08 95       	ret
    1a10:	dc 01       	movw	r26, r24
    1a12:	ed 91       	ld	r30, X+
    1a14:	fc 91       	ld	r31, X
    1a16:	84 81       	ldd	r24, Z+4	; 0x04
    1a18:	80 31       	cpi	r24, 0x10	; 16
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <qtm_ptc_start_measurement_seq+0x88>
    1a1c:	80 e1       	ldi	r24, 0x10	; 16
    1a1e:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
    1a28:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    1a2c:	10 92 73 3e 	sts	0x3E73, r1	; 0x803e73 <current_measure_channel>
    1a30:	10 92 74 3e 	sts	0x3E74, r1	; 0x803e74 <current_measure_channel+0x1>
    1a34:	39 dd       	rcall	.-1422   	; 0x14a8 <select_next_channel_to_measure>
    1a36:	81 11       	cpse	r24, r1
    1a38:	0a c0       	rjmp	.+20     	; 0x1a4e <qtm_ptc_start_measurement_seq+0xb8>
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	80 93 72 3e 	sts	0x3E72, r24	; 0x803e72 <touch_seq_lib_state>
    1a40:	80 91 73 3e 	lds	r24, 0x3E73	; 0x803e73 <current_measure_channel>
    1a44:	90 91 74 3e 	lds	r25, 0x3E74	; 0x803e74 <current_measure_channel+0x1>
    1a48:	62 dd       	rcall	.-1340   	; 0x150e <qtm_measure_node>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	08 95       	ret
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	80 93 72 3e 	sts	0x3E72, r24	; 0x803e72 <touch_seq_lib_state>
    1a54:	08 95       	ret

00001a56 <qtm_enable_sensor_node>:
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	c9 f0       	breq	.+50     	; 0x1a8c <qtm_enable_sensor_node+0x36>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	20 81       	ld	r18, Z
    1a64:	31 81       	ldd	r19, Z+1	; 0x01
    1a66:	26 17       	cp	r18, r22
    1a68:	37 07       	cpc	r19, r23
    1a6a:	90 f0       	brcs	.+36     	; 0x1a90 <qtm_enable_sensor_node+0x3a>
    1a6c:	45 e0       	ldi	r20, 0x05	; 5
    1a6e:	46 9f       	mul	r20, r22
    1a70:	90 01       	movw	r18, r0
    1a72:	47 9f       	mul	r20, r23
    1a74:	30 0d       	add	r19, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	14 96       	adiw	r26, 0x04	; 4
    1a7a:	ed 91       	ld	r30, X+
    1a7c:	fc 91       	ld	r31, X
    1a7e:	15 97       	sbiw	r26, 0x05	; 5
    1a80:	e2 0f       	add	r30, r18
    1a82:	f3 1f       	adc	r31, r19
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	80 83       	st	Z, r24
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	08 95       	ret
    1a8c:	8b e0       	ldi	r24, 0x0B	; 11
    1a8e:	08 95       	ret
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	08 95       	ret

00001a94 <qtm_calibrate_sensor_node>:
    1a94:	fc 01       	movw	r30, r24
    1a96:	89 2b       	or	r24, r25
    1a98:	d1 f1       	breq	.+116    	; 0x1b0e <qtm_calibrate_sensor_node+0x7a>
    1a9a:	a0 81       	ld	r26, Z
    1a9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	9c 91       	ld	r25, X
    1aa2:	11 97       	sbiw	r26, 0x01	; 1
    1aa4:	86 17       	cp	r24, r22
    1aa6:	97 07       	cpc	r25, r23
    1aa8:	a0 f1       	brcs	.+104    	; 0x1b12 <qtm_calibrate_sensor_node+0x7e>
    1aaa:	12 96       	adiw	r26, 0x02	; 2
    1aac:	9c 91       	ld	r25, X
    1aae:	04 80       	ldd	r0, Z+4	; 0x04
    1ab0:	f5 81       	ldd	r31, Z+5	; 0x05
    1ab2:	e0 2d       	mov	r30, r0
    1ab4:	90 34       	cpi	r25, 0x40	; 64
    1ab6:	59 f4       	brne	.+22     	; 0x1ace <qtm_calibrate_sensor_node+0x3a>
    1ab8:	85 e0       	ldi	r24, 0x05	; 5
    1aba:	86 9f       	mul	r24, r22
    1abc:	d0 01       	movw	r26, r0
    1abe:	87 9f       	mul	r24, r23
    1ac0:	b0 0d       	add	r27, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	ae 0f       	add	r26, r30
    1ac6:	bf 1f       	adc	r27, r31
    1ac8:	84 e3       	ldi	r24, 0x34	; 52
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	0d c0       	rjmp	.+26     	; 0x1ae8 <qtm_calibrate_sensor_node+0x54>
    1ace:	90 58       	subi	r25, 0x80	; 128
    1ad0:	92 30       	cpi	r25, 0x02	; 2
    1ad2:	80 f4       	brcc	.+32     	; 0x1af4 <qtm_calibrate_sensor_node+0x60>
    1ad4:	85 e0       	ldi	r24, 0x05	; 5
    1ad6:	86 9f       	mul	r24, r22
    1ad8:	d0 01       	movw	r26, r0
    1ada:	87 9f       	mul	r24, r23
    1adc:	b0 0d       	add	r27, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	ae 0f       	add	r26, r30
    1ae2:	bf 1f       	adc	r27, r31
    1ae4:	87 e6       	ldi	r24, 0x67	; 103
    1ae6:	95 e0       	ldi	r25, 0x05	; 5
    1ae8:	13 96       	adiw	r26, 0x03	; 3
    1aea:	8d 93       	st	X+, r24
    1aec:	9c 93       	st	X, r25
    1aee:	14 97       	sbiw	r26, 0x04	; 4
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <qtm_calibrate_sensor_node+0x62>
    1af4:	82 e0       	ldi	r24, 0x02	; 2
    1af6:	95 e0       	ldi	r25, 0x05	; 5
    1af8:	96 9f       	mul	r25, r22
    1afa:	90 01       	movw	r18, r0
    1afc:	97 9f       	mul	r25, r23
    1afe:	30 0d       	add	r19, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	e2 0f       	add	r30, r18
    1b04:	f3 1f       	adc	r31, r19
    1b06:	90 81       	ld	r25, Z
    1b08:	92 60       	ori	r25, 0x02	; 2
    1b0a:	90 83       	st	Z, r25
    1b0c:	08 95       	ret
    1b0e:	8b e0       	ldi	r24, 0x0B	; 11
    1b10:	08 95       	ret
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	08 95       	ret

00001b16 <qtm_t81x_ptc_handler_eoc>:
    1b16:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    1b1a:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    1b1e:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    1b22:	80 91 73 3e 	lds	r24, 0x3E73	; 0x803e73 <current_measure_channel>
    1b26:	90 91 74 3e 	lds	r25, 0x3E74	; 0x803e74 <current_measure_channel+0x1>
    1b2a:	9c 01       	movw	r18, r24
    1b2c:	22 0f       	add	r18, r18
    1b2e:	33 1f       	adc	r19, r19
    1b30:	e0 91 a9 3e 	lds	r30, 0x3EA9	; 0x803ea9 <qtm_raw_data_measurements_ptr>
    1b34:	f0 91 aa 3e 	lds	r31, 0x3EAA	; 0x803eaa <qtm_raw_data_measurements_ptr+0x1>
    1b38:	e2 0f       	add	r30, r18
    1b3a:	f3 1f       	adc	r31, r19
    1b3c:	40 83       	st	Z, r20
    1b3e:	51 83       	std	Z+1, r21	; 0x01
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	80 93 73 3e 	sts	0x3E73, r24	; 0x803e73 <current_measure_channel>
    1b46:	90 93 74 3e 	sts	0x3E74, r25	; 0x803e74 <current_measure_channel+0x1>
    1b4a:	ae dc       	rcall	.-1700   	; 0x14a8 <select_next_channel_to_measure>
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	08 c0       	rjmp	.+16     	; 0x1b60 <qtm_t81x_ptc_handler_eoc+0x4a>
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	80 93 72 3e 	sts	0x3E72, r24	; 0x803e72 <touch_seq_lib_state>
    1b56:	80 91 73 3e 	lds	r24, 0x3E73	; 0x803e73 <current_measure_channel>
    1b5a:	90 91 74 3e 	lds	r25, 0x3E74	; 0x803e74 <current_measure_channel+0x1>
    1b5e:	d7 cc       	rjmp	.-1618   	; 0x150e <qtm_measure_node>
    1b60:	e0 91 70 3e 	lds	r30, 0x3E70	; 0x803e70 <ptc_seq_measure_complete_pointer>
    1b64:	f0 91 71 3e 	lds	r31, 0x3E71	; 0x803e71 <ptc_seq_measure_complete_pointer+0x1>
    1b68:	09 94       	ijmp

00001b6a <_exit>:
    1b6a:	f8 94       	cli

00001b6c <__stop_program>:
    1b6c:	ff cf       	rjmp	.-2      	; 0x1b6c <__stop_program>
